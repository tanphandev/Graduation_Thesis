#include "SHA.h"

void write_word(int *btr, int addr, int value) {
	*(btr + addr) = value;
}

unsigned int read_word(int *btr, int addr) {
	return *(btr + addr);
}

void write_ctrl(int SHA_BASE, int value) {
	alt_u32 *btr = (alt_32*) SHA_BASE;
	write_word(btr, ADDR_CTRL, value);
}

void write_block(int SHA_BASE, int MEM_BASE) {
	alt_u32 *btr = (alt_32*) SHA_BASE;
	alt_u32 *mem = (alt_32*) MEM_BASE;
	char index;
	for (index = 0; index < 16; index++) {
		write_word(btr, ADDR_BLOCK_START + index, *(mem + index));
	}
}

void write_clr_irq(int SHA_BASE) {
	alt_u32 *btr = (alt_32*) SHA_BASE;
	write_word(btr, ADDR_IRQ_CLR, IRQ_CLR);
}

unsigned int read_control(int SHA_BASE) {
	alt_u32 *btr = (alt_32*) SHA_BASE;
	return read_word(btr, ADDR_CTRL);
}

unsigned int read_status(int SHA_BASE) {
	alt_u32 *btr = (alt_32*) SHA_BASE;
	return read_word(btr, ADDR_STATUS);
}

unsigned int read_block(int SHA_BASE, char index) {
	alt_u32 *btr = (alt_32*) SHA_BASE;
	return read_word(btr, ADDR_BLOCK_START + index);
}

void read_digest(int SHA_BASE, int MEM_BASE) {
	alt_u32 *btr = (alt_32*) SHA_BASE;
	alt_u32 *mem = (alt_32*) MEM_BASE;
	char index = 0;
	for (index = 0; index < 8; index++) {
		*(mem+ index) = read_word(btr, ADDR_DIGEST_START + index);
	}
}

int getLength(char Message[]) {
	int length;
	length = 0;
	while (1) {
		if (Message[length] != '\n')
			length++;
		else
			break;
	}
	return length;
}

int Padding(unsigned int Block[], char Message[], int l) {
	int i, j, count, NumberBlock;
	unsigned int temp;

	j = 0;
	count = 0;
	temp = 0;
	Block[j] = 0;

	for (i = 0; i < l; i++) {
		temp = Message[i];
		if (count < 3) {
			temp = temp << (3 - count) * 8;
		}
		Block[j] = Block[j] | temp;
		count++;
		if (count == 4) {
			j++;
			Block[j] = 0;
			temp = 0;
			count = 0;
		}
	}
	if ((l % 4) == 0) {
		Block[l / 4] = 0x80 << 24;
	} else {
		j = l / 4;
		i = l % 4;
		if (i < 4) {
			temp = 0x80 << (3 - i) * 8;
		} else {
			temp = 0x80;
		}
		Block[j] = Block[j] | temp;

	}

	if (l <= 55) {
		for (i = j + 1; i < 15; i++) {
			Block[i] = 0;
			NumberBlock = 1;
		}
	}

	Block[i] = l * 8;
	for (i = i + 1; i < 64; i++) {
		Block[i] = 0;
	}
	return NumberBlock;
}

Padding_Mem(int MEM_BASE, unsigned int Message[], int length) {
		int i , j, count, NumberBlock,l;
		l = length;
		unsigned int temp;

		j = 0;
		count = 0;
		temp = 0;
		alt_32 *mem = (alt_32*)MEM_BASE;
		*(mem + j) = 0;

		for (i = 0; i < l; i++) {
			temp = Message[i];
			if (count < 3) {
				temp = temp << (3-count)*8;
			}
			*(mem + j)= *(mem + j) | temp;
			count++;
			if (count == 4) {
				j++;
				*(mem + j) = 0;
				temp = 0;
				count = 0;
			}
		}
		if ((l % 4) == 0) {
			*(mem + l/4) = 0x80 << 24;
		}
		else {
			j = l / 4;
			i = l % 4;
			if (i < 4) {
				temp = 0x80 << (3 - i) * 8;
			}
			else {
				temp = 0x80;
			}
			*(mem + j) = *(mem + j) | temp;

		}

		if (l <= 55) {
			for (i = j + 1; i < 15; i++) {
				*(mem + i) = 0;
				NumberBlock = 1;
			}
		}
		else if (l >= 56 && l <= 119) {
			for (i = j + 1; i < 31; i++) {
				*(mem + i) = 0;
				NumberBlock = 2;
			}
		}
		else if (l >= 120 && l <= 183) {
			for (i = j + 1; i < 47; i++) {
				*(mem + i) = 0;
				NumberBlock = 3;
			}
		}
		*(mem + i) = l * 8;
		for (i = i + 1; i < 64; i++) {
			*(mem + i) = 0;
		}
		return NumberBlock;
    }

unsigned int SHA_Init(int SHA_BASE, int MEM_BASE, int ctrl_value) {
	write_ctrl(SHA_BASE, 0x0); // clear control
	write_clr_irq(SHA_BASE); //clear interrupt
	write_block(SHA_BASE, MEM_BASE);
	write_ctrl(SHA_BASE, ctrl_value);
	return read_control(SHA_BASE);
}

unsigned int* convert_to_byte(int MEM_BASE){
	alt_u32 *memory_ptr = (alt_32*) MEM_BASE;
	int index = 0;
	unsigned int byte = 0;
	unsigned int byte_index = 0;
	 unsigned int* digest_byte = malloc(sizeof(unsigned int) * 32);
	for (index = 0; index < 8; index++) {
			unsigned int byte;
			for (byte = 0; byte < 4; byte++) {
				unsigned int byte_value = (*(memory_ptr + index) >> ((3-byte) * 8)) & 0xFF;
				digest_byte[byte_index] = byte_value;
				byte_index++;
			}
		}
	return digest_byte;
}

unsigned int* reverse_byte(int MEM_BASE){
	alt_u32 *memory_ptr = (alt_32*) MEM_BASE;
	int index = 0x00;
	unsigned int byte = 0;
	unsigned int byte_index = 0;
	 unsigned int* digest_final = malloc(sizeof(unsigned int) * 32);
	for (index = 0x7; index >= 0x0; index--) {
			unsigned int byte;
			for (byte = 0; byte < 4; byte++) {
				unsigned int byte_value = (*(memory_ptr + index) >> (byte * 8)) & 0xFF;
				digest_final[byte_index] = byte_value;
				byte_index++;
			}
		}
	return digest_final;
}

unsigned int compareArrays(unsigned int* final_digest, unsigned int* target, int size) {
	unsigned int index =0;
	/*show block*/
		printf("final digest compare: \n");
		for (index = 0; index < 32; index++) {
			printf("  %.2x ", final_digest[index]);
		}
		printf("\n");
		printf("target digest compare: \n");
		for (index = 0; index < 32; index++) {
			printf("  %.2x ", target[index]);
		}

		printf("\n");

    for (index = 0; index < size; index++) {
        if (final_digest[index] < target[index]) {
        	return 1;
        }
        else if(final_digest[index] > target[index]){
        	return 0;
        }
    }
    return 0;
}
