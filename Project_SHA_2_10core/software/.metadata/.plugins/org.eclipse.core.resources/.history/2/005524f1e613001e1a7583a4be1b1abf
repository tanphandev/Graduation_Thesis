//#include "sys/alt_stdio.h"
//#include "system.h"
//#include "sys/alt_irq.h"
//#include "SHA.h"
//
//volatile alt_u32 *memory_ptr = (alt_u32*) ONCHIP_MEMORY2_1_BASE;
//volatile alt_u32 *mem_base1 = (alt_u32*)(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4);
//volatile alt_u32 *mem_test1 = (alt_u32*)(ONCHIP_MEMORY2_1_BASE + BLOCK_HEADER_SIZE *4 );
//volatile alt_u32 *mem_test2 = (alt_u32*)(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 + BLOCK_HEADER_SIZE *4 );
//
//volatile alt_u32 index = 0;
//unsigned int i = 0;
//unsigned int nounce0 = 0x0;
//unsigned int nounce1 = 0xa;
//unsigned int count = 0x0;
//unsigned int flag0 = 0x0;
//unsigned int flag1 = 0x0;
//unsigned int target[32] = { 0x00 };
//unsigned int NumberOfBlock;
//unsigned int* hash_digest_1;
//unsigned int* final_digest;
//
//void SHA_0_IRQ_Handler(void* isr_context) {
//	//clear interrupt
//	write_clr_irq(SHA_0_BASE);
//	count++;
//
//	if(count == 0x1){
//		//init SHA second
//		SHA_Init(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE + SHA_BLOCK_SIZE * 4 ,
//			CTRL_NEXT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
//	}else if(count == 0x2){
//		read_digest(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE + BLOCK_HEADER_SIZE *4 );
//
//		/*--------Show digest for first hash--------*/
////				printf("\nDigest_first_hash = 0x");
////				for (index = 0; index < 8; index++) {
////
////					printf("%x", *(mem_base + index) );
////				}
////				printf("\n");
////
//		hash_digest_1 = convert_to_byte(ONCHIP_MEMORY2_1_BASE + BLOCK_HEADER_SIZE *4 );
//
//		/*--------Start second hash--------*/
//
//		NumberOfBlock = Padding_Mem(ONCHIP_MEMORY2_1_BASE + BLOCK_HEADER_SIZE *4 , hash_digest_1, 0x20); //32byte
////		free(hash_digest_1);
//		   /*show block*/
////				printf("\nBlock of second hash:");
////				for (index = 0; index < 16; index++) {
////					if ((index % SHA_BLOCK_SIZE) == 0)
////						printf("\n");
////						printf("%.2x", *(mem_base + index));
////					}
////				printf("\n");
//		/*--------init SHA core--------*/
//		SHA_Init(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE + BLOCK_HEADER_SIZE *4 ,
//		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
//	}else if(count == 0x3){
//		printf("\n Interrupt 0");
//		flag0 = flag0 | 0x1;
//		count = 0x0;
//		nounce0++;
//		*(memory_ptr + 19) = nounce0;
//		SHA_Init(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE,
//		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
//	}
//}
//void SHA_1_IRQ_Handler(void* isr_context) {
//	//clear interrupt
//	write_clr_irq(SHA_1_BASE);
//	count++;
//
//	if(count == 0x1){
//		//init SHA second
//		SHA_Init(SHA_1_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 + SHA_BLOCK_SIZE * 4,
//			CTRL_NEXT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
//	}else if(count == 0x2){
//		read_digest(SHA_1_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 + BLOCK_HEADER_SIZE * 4);
//		hash_digest_1 = convert_to_byte(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 + BLOCK_HEADER_SIZE * 4);
//
//		/*--------Start second hash--------*/
//
//		NumberOfBlock = Padding_Mem(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 + BLOCK_HEADER_SIZE * 4, hash_digest_1, 0x20); //32byte
////		free(hash_digest_1);
//
//		/*--------init SHA core--------*/
//		SHA_Init(SHA_1_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 + BLOCK_HEADER_SIZE * 4,
//		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
//
//	}else if(count == 0x3){
//		printf("\n Interrupt 1");
//		flag1 = flag1 | 0x1;
//		count = 0x0;
//		nounce1++;
//		*(mem_base1 + 19) = nounce1;
//		SHA_Init(SHA_1_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4,
//		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
//	}
//}
//void init_block_header(unsigned int block_header[], int MEM_BASE){
//	int NumberOfBlock = 0x0;
//	/*--------padding--------*/
//	NumberOfBlock = Padding_Mem(MEM_BASE, block_header, 0x50);
//}
//
//int main() {
//	unsigned int block_header[80] = {0x00, 0x20, 0x90, 0x20, 0x95, 0x40, 0xd4, 0xbb, 0xb6, 0x51, 0x2d, 0x25, 0x72, 0x36, 0xf1, 0xa6, 0x81, 0x76, 0xc8, 0x1a, 0x2a, 0x94, 0x95, 0xe0, 0x25, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x02, 0x85, 0xb5, 0x9d, 0x7c, 0x57, 0x26, 0x37, 0xd9, 0xfe, 0x92, 0x8d, 0x31, 0xdb, 0xa2, 0x37, 0xbe, 0xe2, 0xe1, 0xb0, 0x3e, 0x53, 0xcf, 0x02, 0x83, 0xac, 0xd2, 0x7e, 0xde, 0x72, 0xab, 0x4b, 0xfa, 0x38, 0x64, 0xb2, 0xe0, 0x05, 0x17, 0x48, 0x59, 0xc1, 0xe5};
////	unsigned int target[32] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xe0, 0xb2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
//	int length = 0x0;
//	unsigned int exponent = block_header[75];
//	unsigned int mantissa[3];
//	unsigned int shiftNum = exponent - 3;
//	unsigned int limited = 0x1;
//	unsigned int limitedLoop = 0xa;
//	alt_putstr("Hello from Nios II!\n");
//
//	/*--------register irq with handeler--------*/
//	alt_ic_isr_register(SHA_0_IRQ_INTERRUPT_CONTROLLER_ID, SHA_0_IRQ,
//			SHA_0_IRQ_Handler, (void*) 0, (void*) 0);
//	alt_ic_isr_register(SHA_1_IRQ_INTERRUPT_CONTROLLER_ID, SHA_1_IRQ,
//			SHA_1_IRQ_Handler, (void*) 0, (void*) 0);
////	alt_ic_isr_register(SHA_2_IRQ_INTERRUPT_CONTROLLER_ID, SHA_2_IRQ,
////			SHA_2_IRQ_Handler, (void*) 0, (void*) 0);
////	alt_ic_isr_register(SHA_3_IRQ_INTERRUPT_CONTROLLER_ID, SHA_3_IRQ,
////			SHA_3_IRQ_Handler, (void*) 0, (void*) 0);
////	alt_ic_isr_register(SHA_4_IRQ_INTERRUPT_CONTROLLER_ID, SHA_4_IRQ,
////			SHA_4_IRQ_Handler, (void*) 0, (void*) 0);
////	alt_ic_isr_register(SHA_5_IRQ_INTERRUPT_CONTROLLER_ID, SHA_5_IRQ,
////			SHA_5_IRQ_Handler, (void*) 0, (void*) 0);
////	alt_ic_isr_register(SHA_6_IRQ_INTERRUPT_CONTROLLER_ID, SHA_6_IRQ,
////			SHA_6_IRQ_Handler, (void*) 0, (void*) 0);
////	alt_ic_isr_register(SHA_7_IRQ_INTERRUPT_CONTROLLER_ID, SHA_7_IRQ,
////			SHA_7_IRQ_Handler, (void*) 0, (void*) 0);
////	alt_ic_isr_register(SHA_8_IRQ_INTERRUPT_CONTROLLER_ID, SHA_8_IRQ,
////			SHA_8_IRQ_Handler, (void*) 0, (void*) 0);
////	alt_ic_isr_register(SHA_9_IRQ_INTERRUPT_CONTROLLER_ID, SHA_9_IRQ,
////			SHA_9_IRQ_Handler, (void*) 0, (void*) 0);
//	//calculate target
//		for (int i = 0; i < 3; i++) {
//			mantissa[i] = block_header[74 - i];
//		}
//		for (int i = 0; i < 3; i++) {
//			target[32 - shiftNum - 1 - i ] = mantissa[2 - i];
//		}
//
//	// init block header for core 0
//		for(index = 76; index < 80 ; index++){
//			block_header[index] = nounce0 >> ((3 - index - 76) * 8) & 0xFF;
//		}
//		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE);
//
//	//init block header for core 1
//		for(index = 76; index < 80 ; index++){
//			block_header[index] = nounce1 >> ((3 - index - 76) * 8) & 0xFF;
//		}
//		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4);
//
//		printf("Start Mining\n");
////						printf("Block header core 0:");
////						for (index = 0; index <32; index++) {
////							if ((index % SHA_BLOCK_SIZE && index!=0) == 0)
////								printf("\n");
////							printf("%.2x", *(memory_ptr + index));
////						}
////						printf("\n");
////
////						printf("Block header core 1:");
////						for (index = 0; index <32; index++) {
////							if ((index % SHA_BLOCK_SIZE && index!=0) == 0)
////								printf("\n");
////							printf("%.2x", *(mem_base1 + index));
////						}
////						printf("\n");
//
//		//	init Core 0
//		SHA_Init(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE,
//				CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
//
//		//	init Core 1
//		SHA_Init(SHA_1_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4,
//				CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
//
//		while(1){
//		if ((flag0 & 0x1) == 1) {
//			read_digest(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE + BLOCK_HEADER_SIZE *4);
//					/*--------Show digest for first hash--------*/
////			printf("\nDigest_final = 0x");
////			for (index = 0; index < 8; index++) {
////
////				printf("%x", *(mem_test1+ index));
////			}
////			printf("\n");
//					final_digest = reverse_byte(ONCHIP_MEMORY2_1_BASE + BLOCK_HEADER_SIZE *4);
//					printf("Final_digest 0 = 0x");
//								for (index = 0; index < 32; index++) {
//									printf("%.2x",final_digest[index] );
//								}
//								printf("\n");
//			if(compareArrays(final_digest,target,0x20)){
//						printf("\nCORE: SHA_0\n ");
//						printf("\nSUCCESS\nDigest Valid\n ");
//						printf("Nounce = %x \n",nounce0);
//						break;
//			}else {
////						printf("\nCORE: SHA_0\n ");
//						printf("Nounce = %x \n", nounce0);
////						printf("Digest invalid!!!\n\n");
//						nounce0++;
//			}
//			flag0 = 0x0;
//		}
//		if ((flag1 & 0x1) == 1) {
//			read_digest(SHA_1_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 + BLOCK_HEADER_SIZE * 4);
////			printf("\nDigest_final = 0x");
////						for (index = 0; index < 8; index++) {
////
////							printf("%x", *(mem_test2 + index) );
////						}
////						printf("\n");
//					final_digest = reverse_byte(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 + BLOCK_HEADER_SIZE * 4);
//					printf("Final_digest 1 = 0x");
//						for (index = 0; index < 32; index++) {
//							printf("%.2x",final_digest[index] );
//						}
//										printf("\n");
//						if(compareArrays(final_digest,target,0x20)){
//						printf("\nCORE: SHA_1\n ");
//						printf("\nSUCCESS\nDigest Valid\n ");
//						printf("Nounce = %x \n",nounce1);
//						break;
//			}else {
////						printf("\nCORE: SHA_1\n ");
//						printf("Nounce = %x \n",nounce1);
////						printf("Digest invalid!!!\n\n");
//						nounce1++;
//			}
//			flag1 = 0x0;
//		}
//	}
//	return 0;
//}
