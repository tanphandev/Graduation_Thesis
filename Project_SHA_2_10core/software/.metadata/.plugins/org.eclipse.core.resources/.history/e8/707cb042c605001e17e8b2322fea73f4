
#include "sys/alt_stdio.h"
#include "system.h"
#include "sys/alt_irq.h"
#include "SHA.h"

volatile alt_u32 *memory_ptr = (alt_u32*) ONCHIP_MEMORY2_1_BASE;

volatile alt_u32 index = 0;
unsigned char flag = 0;

void SHA_0_IRQ_Handler(void* isr_context) {
	flag = flag | 0x1;
	//clear interrupt
	write_clr_irq(SHA_0_BASE);
	/*--------init SHA core--------*/
}

int main() {

	unsigned int block_header[80] = {0x00, 0xa0, 0x11, 0x2e, 0x53, 0x5d, 0x51, 0x23, 0x62, 0xf8, 0x06, 0x87, 0x51, 0x12, 0x04, 0xab, 0xed, 0x45, 0xae, 0x64, 0xcc, 0xa1, 0xa0, 0x5e, 0x82, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x93, 0x74, 0x13, 0xff, 0x6c, 0xdb, 0x14, 0xf4, 0x89, 0x33, 0xdb, 0xf2, 0x3e, 0xbb, 0xe3, 0x75, 0xde, 0x11, 0x92, 0x14, 0x34, 0x7d, 0x8a, 0x36, 0x8e, 0xac, 0x95, 0x4f, 0x94, 0xa1, 0x14, 0x1e, 0x85, 0xd8, 0x2e, 0x64, 0x3e, 0x02, 0x06, 0x17, 0x94, 0x48, 0xa8, 0x02};
	int length = 0x0;
	int NumberOfBlock = 0x0;
	unsigned int* hash_digest_1;
	unsigned int* final_digest;
	unsigned int target[32] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x02, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	unsigned int nounce = 0x0;
	alt_putstr("Hello from Nios II!\n");
	/*--------register irq with handeler--------*/
	alt_ic_isr_register(SHA_0_IRQ_INTERRUPT_CONTROLLER_ID, SHA_0_IRQ,
			SHA_0_IRQ_Handler, (void*) 0, (void*) 0);
   /*--------padding--------*/
	NumberOfBlock = Padding_Mem(ONCHIP_MEMORY2_1_BASE, block_header, 0x50);

	for(nounce = 0x9448A801; nounce <= 0x9448A803; nounce++){
		*(memory_ptr + 0x13) = nounce;//byte thu 19

		/*show block*/
			for (index = 0; index <32; index++) {
				if ((index % SHA_BLOCK_SIZE) == 0)
					printf("\n");
				printf("%.4x ", *(memory_ptr + index));
			}

			printf("\n");
		    /*--------init SHA core--------*/

			//hash lan 1
			SHA_Init(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE,
			CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1

			SHA_Init(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE + SHA_BLOCK_SIZE * 4 ,
			CTRL_NEXT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1

			read_digest(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE);

			printf("Hash digest_1 = 0x");
			for (index = 0; index < 8; index++) {

				printf("%x", *(memory_ptr + index) );
			}
			printf("\n");


			hash_digest_1 = convert_to_byte(ONCHIP_MEMORY2_1_BASE);
			//hash lan 2

			printf("\nBlock_of_hash_second = 0x");
			for (index = 0; index < 32; index++) {

				printf("%.2x",hash_digest_1[index] );
			}
			printf("\n");

			NumberOfBlock = Padding_Mem(ONCHIP_MEMORY2_1_BASE, hash_digest_1, 0x20); //32byte

			printf("Number_of_block: %.2x", NumberOfBlock);
			   /*show block*/
				for (index = 0; index <16; index++) {
					if ((index % SHA_BLOCK_SIZE) == 0)
						printf("\n");
					printf("%.4x ", *(memory_ptr + index));
				}

				printf("\n");
			SHA_Init(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE,
			CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1

			read_digest(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE);
			printf("Hash digest_true = 0x");
			for (index = 0; index < 8; index++) {

				printf("  %x", *(memory_ptr + index) );
			}
			printf("\n");


			//reverse byte

			final_digest = reverse_byte(ONCHIP_MEMORY2_1_BASE);

			printf("\nHash_final = 0x");
				for (index = 0; index < 32; index++) {

					printf("%.2x",final_digest[index] );
				}
				printf("\n");

				printf("\result: %x ",compareArrays(final_digest,target,0x20));

//			if(compareArrays(final_digest,target,0x20)){
//						printf("\nSUCCESS\nDigest Valid\n ");
//						break;
//			}else {
//						printf("Digest invalid!!!");
//			}
	}








//	while (1) {
//		if ((flag & 0x1) == 1) {
//			printf("flag = %4x\n", flag);
//			read_digest(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE);
//			printf("Hash digest = 0x");
//			for (index = 0; index < 8; index++) {
//				printf("%08x", *(memory_ptr + index));
//			}
//			printf("\n");
//			flag = flag & 0b11111110;
//		}
//	}

	return 0;
}
