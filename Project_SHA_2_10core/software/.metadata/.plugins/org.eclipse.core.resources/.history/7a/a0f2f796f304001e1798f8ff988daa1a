#include "sys/alt_stdio.h"
#include "system.h"
#include "sys/alt_irq.h"
#include "SHA.h"

volatile alt_u32 *memory_ptr = (alt_u32*) ONCHIP_MEMORY2_1_BASE;

volatile alt_u32 index = 0;

unsigned char count1 = 0;
int NumberOfBlock_m1 = 0x0;
int NumberOfBlock_final_digest = 0x0;
int length_m1 = 0x0;
int flag = 0x0;
int control_irq = 0x0;
void SHA_0_IRQ_Handler(void* isr_context) {
	if(control_irq == 0x0 ){
		count1++;
		//clear interrupt
		write_clr_irq(SHA_0_BASE);
		if(count1 < NumberOfBlock_m1)
		{
			/*--------init SHA core--------*/
				SHA_Init(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE + SHA_BLOCK_SIZE * count1,
						CTRL_NEXT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
		}
	}else {
		flag = flag | 0x1;
		write_clr_irq(SHA_0_BASE);
	}
}

//void SHA_1_IRQ_Handler(void* isr_context) {
//	flag = flag | 0x2;
//	//clear interrupt
//	write_clr_irq(SHA_1_BASE);
//	/*--------init SHA core--------*/
//	SHA_Init(SHA_2_BASE, ONCHIP_MEMORY2_1_BASE + SHA_BLOCK_SIZE * 8,
//		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
//}
//
//void SHA_2_IRQ_Handler(void* isr_context) {
//	flag = flag | 0x4;
//	//clear interrupt
//	write_clr_irq(SHA_2_BASE);
//}

void hash_block_header(char message_0[]) {
	//padding
	length_m1 = getLength(message_0);
	NumberOfBlock_m1 = Padding_Mem(ONCHIP_MEMORY2_1_BASE, message_0, length_m1);
	   /*show block*/
		for (index = 0; index < 4 * 16; index++) {
			if ((index % SHA_BLOCK_SIZE) == 0)
				printf("\n");
			printf("%.4x", *(memory_ptr + index));
		}
	SHA_Init(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE,
			CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
			printf("control = %.4x\n", read_control(SHA_2_BASE));

}

int main() {

	char message_0[80] = "minnersystem\n";
//	char message_1[80] = "helloword\n";
//	char message_2[80] = "testshairq\n";

	unsigned int block[16] = { 0x0 };
	unsigned int digest_1[8] = { 0x0 };
	unsigned int digest_final[8] = { 0x0 };

	alt_putstr("Hello from Nios II!\n");
	/*--------register irq with handeler--------*/
	alt_ic_isr_register(SHA_0_IRQ_INTERRUPT_CONTROLLER_ID, SHA_0_IRQ,
			SHA_0_IRQ_Handler, (void*) 0, (void*) 0);
//	alt_ic_isr_register(SHA_1_IRQ_INTERRUPT_CONTROLLER_ID, SHA_1_IRQ,
//			SHA_1_IRQ_Handler, (void*) 0, (void*) 0);
//	alt_ic_isr_register(SHA_2_IRQ_INTERRUPT_CONTROLLER_ID, SHA_2_IRQ,
//			SHA_2_IRQ_Handler, (void*) 0, (void*) 0);
   /*--------padding--------*/
//	length = getLength(message_0);
//	NumberOfBlock = Padding_Mem(ONCHIP_MEMORY2_1_BASE, message_0, length);

//	length = getLength(message_1);
//	NumberOfBlock = Padding_Mem(ONCHIP_MEMORY2_1_BASE + SHA_BLOCK_SIZE * 4,
//			message_1, length);
//
//	length = getLength(message_2);
//	NumberOfBlock = Padding_Mem(ONCHIP_MEMORY2_1_BASE + SHA_BLOCK_SIZE * 8,
//			message_2, length);
//   /*show block*/
//	for (index = 0; index < 3 * 16; index++) {
//		if ((index % SHA_BLOCK_SIZE) == 0)
//			printf("\n");
//		printf("%.4x", *(memory_ptr + index));
//	}
//
//	printf("\n");
    /*--------init SHA core--------*/
//	SHA_Init(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE,
//	CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
//
//	printf("control = %.4x\n", read_control(SHA_2_BASE));

	hash_block_header(message_0);
	while (1) {
		if (count1 == NumberOfBlock_m1) {
			printf("count1 = %4x\n", count1);
			read_digest(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE);
			printf("Hash digest 1 = 0x");
			for (index = 0; index < 8; index++) {
				digest_1[index] = *(memory_ptr + index);
				printf("%08x", digest_1[index]);
			}
			printf("\n");
			count1 = count1 & 0b00000000;
			//bat dau hash lan 2
			//padding
			NumberOfBlock_m1 = Padding_Mem(ONCHIP_MEMORY2_1_BASE, digest_1, 0x20); //length = 32byte
			// khoi tao hash lan 2
			SHA_Init(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE,
				CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
			control_irq = control_irq | 0x1;
		}
		if ((flag & 0x1) == 0x1) {
			read_digest(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE);
						printf("Hash final digest = 0x");
						for (index = 0; index < 8; index++) {
							digest_final[index] = *(memory_ptr + index);
							printf("%08x", digest_final[index]);
						}
		}
//		if ((flag & 0x2) == 0x2) {
//			printf("flag = %4x\n", flag);
//			read_digest(SHA_1_BASE, ONCHIP_MEMORY2_1_BASE + SHA_BLOCK_SIZE * 4);
//			printf("Hash digest = 0x");
//			for (index = 0; index < 8; index++) {
//				printf("%08x", *(memory_ptr + index + 16));
//			}
//			printf("\n");
//			flag = flag & 0b11111101;
//		}
//		if ((flag & 0x4) == 0x4) {
//			printf("flag = %4x\n", flag);
//			read_digest(SHA_2_BASE, ONCHIP_MEMORY2_1_BASE + SHA_BLOCK_SIZE * 8);
//			printf("Hash digest = 0x");
//			for (index = 0; index < 8; index++) {
//				printf("%08x", *(memory_ptr + index + 32));
//			}
//			printf("\n");
//			flag = flag & 0b11111011;
//		}
	}

	return 0;
}
