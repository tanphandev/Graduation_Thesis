
FW_2.elf:     file format elf32-littlenios2
FW_2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04080180

Program Header:
    LOAD off    0x00001000 vaddr 0x04080000 paddr 0x04080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04080020 paddr 0x04080020 align 2**12
         filesz 0x00002bcc memsz 0x00002bcc flags r-x
    LOAD off    0x00003bec vaddr 0x04082bec paddr 0x04082d30 align 2**12
         filesz 0x00000144 memsz 0x00000144 flags rw-
    LOAD off    0x00003e74 vaddr 0x04082e74 paddr 0x04082e74 align 2**12
         filesz 0x00000000 memsz 0x00000220 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04080000  04080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  04080020  04080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000280c  04080180  04080180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000260  0408298c  0408298c  0000398c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000144  04082bec  04082d30  00003bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000220  04082e74  04082e74  00003e74  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00000000  00000000  00003d30  2**0
                  CONTENTS
  7 .onchip_memory2_1 00000000  04040000  04040000  00003d30  2**0
                  CONTENTS
  8 .onchip_memory2_0 00000000  04083094  04083094  00003d30  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00003d30  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000420  00000000  00000000  00003d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00006d38  00000000  00000000  00004178  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001e85  00000000  00000000  0000aeb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002295  00000000  00000000  0000cd35  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000079c  00000000  00000000  0000efcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001b11  00000000  00000000  0000f768  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00002684  00000000  00000000  00011279  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  00013900  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000003f8  00000000  00000000  00013910  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  00015b4e  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  00015b51  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00015b5d  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00015b5e  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00015b5f  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  00015b6a  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00015b75  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000006  00000000  00000000  00015b80  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000029  00000000  00000000  00015b86  2**0
                  CONTENTS, READONLY
 28 .jdi          000067f3  00000000  00000000  00015baf  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00087c54  00000000  00000000  0001c3a2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04080000 l    d  .entry	00000000 .entry
04080020 l    d  .exceptions	00000000 .exceptions
04080180 l    d  .text	00000000 .text
0408298c l    d  .rodata	00000000 .rodata
04082bec l    d  .rwdata	00000000 .rwdata
04082e74 l    d  .bss	00000000 .bss
00000000 l    d  .sdram	00000000 .sdram
04040000 l    d  .onchip_memory2_1	00000000 .onchip_memory2_1
04083094 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FW_2_bsp//obj/HAL/src/crt0.o
040801b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 SHA.c
00000000 l    df *ABS*	00000000 optimize.c
00000000 l    df *ABS*	00000000 optimize_mining.c
00000000 l    df *ABS*	00000000 optimize_mining_2.c
00000000 l    df *ABS*	00000000 optimize_mining_3.c
00000000 l    df *ABS*	00000000 optimize_mining_4.c
00000000 l    df *ABS*	00000000 refactor.c
00000000 l    df *ABS*	00000000 test_10_core_sha.c
00000000 l    df *ABS*	00000000 test_mining.c
00000000 l    df *ABS*	00000000 test_mining_10core.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
04081da0 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
04082bec l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
04082f10 g     O .bss	00000004 alt_instruction_exception_handler
040827ec g     F .text	0000002c alt_main
04080da4 g     F .text	00000014 init_block_header
04081cf0 g     F .text	00000080 _puts_r
04082f94 g     O .bss	00000100 alt_irq
04082ec4 g     O .bss	00000004 nounce0
04082ed0 g     O .bss	00000004 final_digest_1
04082cf0 g     O .rwdata	00000004 mem_base_target
04082d30 g       *ABS*	00000000 __flash_rwdata_start
04081ca4 g     F .text	0000004c printf
04082d08 g     O .rwdata	00000004 mem_base4
040806d4 g     F .text	0000003c compareWithTarget
04082ea4 g     O .bss	00000004 count7
04082ed4 g     O .bss	00000004 final_digest_6
04082cfc g     O .rwdata	00000004 mem_base7
04082818 g     F .text	00000038 alt_putstr
04082eb8 g     O .bss	00000004 count2
04082984 g     F .text	00000008 altera_nios2_gen2_irq_init
0408073c g     F .text	000000a4 SHA_0_IRQ_Handler
040801d0 g     F .text	00000014 read_word
04080000 g     F .entry	0000000c __reset
04082ed8 g     O .bss	00000004 final_digest_9
04080020 g       *ABS*	00000000 __flash_exceptions_start
04082cd0 g     O .rwdata	00000004 nounce8
04082efc g     O .bss	00000004 errno
04082f08 g     O .bss	00000004 alt_argv
0408accc g       *ABS*	00000000 _gp
0408026c g     F .text	0000001c getLength
04081c40 g     F .text	00000028 memcpy
04082d0c g     O .rwdata	00000004 mem_base3
04082e84 g     O .bss	00000004 flag5
04080b14 g     F .text	000000a4 SHA_6_IRQ_Handler
04082e9c g     O .bss	00000004 count9
04082ea8 g     O .bss	00000004 count6
04082cf8 g     O .rwdata	00000004 mem_base8
04081d70 g     F .text	00000014 puts
04082910 g     F .text	00000074 alt_exception_cause_generated_bad_addr
040803f4 g     F .text	00000070 storeTargetIntoMemory
04081c68 g     F .text	0000003c _printf_r
04080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0408255c g     F .text	00000064 .hidden __udivsi3
04082eb0 g     O .bss	00000004 count4
04082d10 g     O .rwdata	00000004 mem_base2
04082cd4 g     O .rwdata	00000004 nounce7
04080690 g     F .text	00000044 reverse_byte_in_memory
0408024c g     F .text	00000020 read_digest
04082d1c g     O .rwdata	00000004 _global_impure_ptr
04083094 g       *ABS*	00000000 __bss_end
040826a4 g     F .text	00000068 alt_iic_isr_register
04080228 g     F .text	00000024 read_block
04082edc g     O .bss	00000004 final_digest_8
0408268c g     F .text	00000018 alt_ic_irq_enabled
04080a70 g     F .text	000000a4 SHA_5_IRQ_Handler
04082e90 g     O .bss	00000004 flag2
04082f00 g     O .bss	00000004 alt_irq_active
040800fc g     F .exceptions	00000060 alt_irq_handler
0408020c g     F .text	0000000c write_clr_irq
04080464 g     F .text	000001e8 Padding_Mem
04082ee0 g     O .bss	00000004 final_digest_3
04082e98 g     O .bss	00000004 flag0
04082908 g     F .text	00000004 alt_dcache_flush_all
04080d00 g     F .text	000000a4 SHA_9_IRQ_Handler
04082d30 g       *ABS*	00000000 __ram_rwdata_end
040801e4 g     F .text	00000008 write_ctrl
04082850 g     F .text	00000060 write
04082e88 g     O .bss	00000004 flag4
04082bec g       *ABS*	00000000 __ram_rodata_end
04082d28 g     O .rwdata	00000004 jtag_uart_0
04082e78 g     O .bss	00000004 flag8
04080288 g     F .text	0000016c Padding
040825c0 g     F .text	00000058 .hidden __umodsi3
04083094 g       *ABS*	00000000 end
04082ec8 g     O .bss	00000004 i
0408015c g     F .exceptions	00000024 alt_instruction_exception_entry
040be800 g       *ABS*	00000000 __alt_stack_pointer
04082ea0 g     O .bss	00000004 count8
040828d4 g     F .text	00000034 altera_avalon_jtag_uart_write
04081e0c g     F .text	0000052c ___vfprintf_internal_r
04080180 g     F .text	0000003c _start
04080928 g     F .text	000000a4 SHA_3_IRQ_Handler
04082e94 g     O .bss	00000004 flag1
04082d00 g     O .rwdata	00000004 mem_base6
040828d0 g     F .text	00000004 alt_sys_init
04082ee4 g     O .bss	00000004 final_digest_0
04082d18 g     O .rwdata	00000004 memory_ptr
04082eac g     O .bss	00000004 count5
04081c18 g     F .text	00000028 .hidden __mulsi3
04082bec g       *ABS*	00000000 __ram_rwdata_start
0408298c g       *ABS*	00000000 __ram_rodata_start
04040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
04082e74 g     O .bss	00000004 flag9
04082ccc g     O .rwdata	00000004 nounce9
04082cf4 g     O .rwdata	00000004 mem_base9
04082cd8 g     O .rwdata	00000004 nounce6
04083094 g       *ABS*	00000000 __alt_stack_base
04082eb4 g     O .bss	00000004 count3
04082ecc g     O .bss	00000004 index
04080220 g     F .text	00000008 read_status
04082354 g     F .text	000000b8 __sfvwrite_small_dev
04082e74 g       *ABS*	00000000 __bss_start
04080db8 g     F .text	00000e60 main
04082f04 g     O .bss	00000004 alt_envp
04082ee8 g     O .bss	00000004 final_digest_2
040807e0 g     F .text	000000a4 SHA_1_IRQ_Handler
04082d2c g     O .rwdata	00000004 alt_errno
04080710 g     F .text	0000002c padding_for_first_hash
040801ec g     F .text	00000020 write_block
04082464 g     F .text	00000084 .hidden __divsi3
04080218 g     F .text	00000008 read_control
04082ce0 g     O .rwdata	00000004 nounce4
0408298c g       *ABS*	00000000 __flash_rodata_start
04082eec g     O .bss	00000004 final_digest_7
040828b0 g     F .text	00000020 alt_irq_init
04082e7c g     O .bss	00000004 flag7
0408240c g     F .text	00000058 _write_r
04082cdc g     O .rwdata	00000004 nounce5
04082ebc g     O .bss	00000004 count1
04082ef0 g     O .bss	00000004 NumberOfBlock
04082d20 g     O .rwdata	00000004 _impure_ptr
04082f0c g     O .bss	00000004 alt_argc
04082e80 g     O .bss	00000004 flag6
04082ec0 g     O .bss	00000004 count0
04080020 g       .exceptions	00000000 alt_irq_entry
04080884 g     F .text	000000a4 SHA_2_IRQ_Handler
040801bc g     F .text	00000014 write_word
04082ef4 g     O .bss	00000004 final_digest_5
04082ce8 g     O .rwdata	00000004 nounce2
04082d04 g     O .rwdata	00000004 mem_base5
04082d14 g     O .rwdata	00000004 mem_base1
04080020 g       *ABS*	00000000 __ram_exceptions_start
04082618 g     F .text	00000004 alt_ic_isr_register
04082d30 g       *ABS*	00000000 _edata
04083094 g       *ABS*	00000000 _end
04080180 g       *ABS*	00000000 __ram_exceptions_end
04082e8c g     O .bss	00000004 flag3
04080c5c g     F .text	000000a4 SHA_8_IRQ_Handler
04082654 g     F .text	00000038 alt_ic_irq_disable
04082cec g     O .rwdata	00000004 nounce1
0408064c g     F .text	00000044 SHA_Init
040824e8 g     F .text	00000074 .hidden __modsi3
040be800 g       *ABS*	00000000 __alt_data_end
04080020 g     F .exceptions	00000000 alt_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
0408000c g       .entry	00000000 _exit
04081d84 g     F .text	0000001c strlen
0408290c g     F .text	00000004 alt_icache_flush_all
04080bb8 g     F .text	000000a4 SHA_7_IRQ_Handler
04082d24 g     O .rwdata	00000004 alt_priority_mask
0408261c g     F .text	00000038 alt_ic_irq_enable
04082338 g     F .text	0000001c __vfprintf_internal
04082ce4 g     O .rwdata	00000004 nounce3
040809cc g     F .text	000000a4 SHA_4_IRQ_Handler
0408270c g     F .text	000000e0 alt_load
04082f14 g     O .bss	00000080 target
04082ef8 g     O .bss	00000004 final_digest_4



Disassembly of section .entry:

04080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4080000:	00410234 	movhi	at,1032
    ori r1, r1, %lo(_start)
 4080004:	08406014 	ori	at,at,384
    jmp r1
 4080008:	0800683a 	jmp	at

0408000c <_exit>:
	...

Disassembly of section .exceptions:

04080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4080020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4080024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 408002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 408003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4080040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4080044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 408004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 408005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 408006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 408007c:	10000326 	beq	r2,zero,408008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4080080:	20000226 	beq	r4,zero,408008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4080084:	40800fc0 	call	40800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4080088:	00000706 	br	40800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 408008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4080090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4080094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4080098:	408015c0 	call	408015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 408009c:	1000021e 	bne	r2,zero,40800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40800f8:	ef80083a 	eret

040800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40800fc:	defffe04 	addi	sp,sp,-8
 4080100:	dfc00115 	stw	ra,4(sp)
 4080104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4080108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 408010c:	04010234 	movhi	r16,1032
 4080110:	840be504 	addi	r16,r16,12180

  active = alt_irq_pending ();

  do
  {
    i = 0;
 4080114:	0005883a 	mov	r2,zero
    mask = 1;
 4080118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 408011c:	20ca703a 	and	r5,r4,r3
 4080120:	28000b26 	beq	r5,zero,4080150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 4080124:	100490fa 	slli	r2,r2,3
 4080128:	8085883a 	add	r2,r16,r2
 408012c:	10c00017 	ldw	r3,0(r2)
 4080130:	11000117 	ldw	r4,4(r2)
 4080134:	183ee83a 	callr	r3
 4080138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 408013c:	203ff51e 	bne	r4,zero,4080114 <__alt_data_end+0xfffc1914>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 4080140:	dfc00117 	ldw	ra,4(sp)
 4080144:	dc000017 	ldw	r16,0(sp)
 4080148:	dec00204 	addi	sp,sp,8
 408014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 4080150:	18c7883a 	add	r3,r3,r3
      i++;
 4080154:	10800044 	addi	r2,r2,1

    } while (1);
 4080158:	003ff006 	br	408011c <__alt_data_end+0xfffc191c>

0408015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 408015c:	d0a09117 	ldw	r2,-32188(gp)
 4080160:	10000426 	beq	r2,zero,4080174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 4080164:	200b883a 	mov	r5,r4
 4080168:	000d883a 	mov	r6,zero
 408016c:	013fffc4 	movi	r4,-1
 4080170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4080174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 4080178:	0005883a 	mov	r2,zero
 408017c:	f800283a 	ret

Disassembly of section .text:

04080180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4080180:	06c102f4 	movhi	sp,1035
    ori sp, sp, %lo(__alt_stack_pointer)
 4080184:	defa0014 	ori	sp,sp,59392
    movhi gp, %hi(_gp)
 4080188:	06810234 	movhi	gp,1032
    ori gp, gp, %lo(_gp)
 408018c:	d6ab3314 	ori	gp,gp,44236
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4080190:	00810234 	movhi	r2,1032
    ori r2, r2, %lo(__bss_start)
 4080194:	108b9d14 	ori	r2,r2,11892

    movhi r3, %hi(__bss_end)
 4080198:	00c10234 	movhi	r3,1032
    ori r3, r3, %lo(__bss_end)
 408019c:	18cc2514 	ori	r3,r3,12436

    beq r2, r3, 1f
 40801a0:	10c00326 	beq	r2,r3,40801b0 <_start+0x30>

0:
    stw zero, (r2)
 40801a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40801a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40801ac:	10fffd36 	bltu	r2,r3,40801a4 <__alt_data_end+0xfffc19a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40801b0:	408270c0 	call	408270c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40801b4:	40827ec0 	call	40827ec <alt_main>

040801b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40801b8:	003fff06 	br	40801b8 <__alt_data_end+0xfffc19b8>

040801bc <write_word>:
#include "SHA.h"

void write_word(int *btr, int addr, int value) {
	*(btr + addr) = value;
 40801bc:	294b883a 	add	r5,r5,r5
 40801c0:	294b883a 	add	r5,r5,r5
 40801c4:	2149883a 	add	r4,r4,r5
 40801c8:	21800015 	stw	r6,0(r4)
 40801cc:	f800283a 	ret

040801d0 <read_word>:
}

unsigned int read_word(int *btr, int addr) {
	return *(btr + addr);
 40801d0:	294b883a 	add	r5,r5,r5
 40801d4:	294b883a 	add	r5,r5,r5
 40801d8:	2149883a 	add	r4,r4,r5
}
 40801dc:	20800017 	ldw	r2,0(r4)
 40801e0:	f800283a 	ret

040801e4 <write_ctrl>:
#include "SHA.h"

void write_word(int *btr, int addr, int value) {
	*(btr + addr) = value;
 40801e4:	21400815 	stw	r5,32(r4)
 40801e8:	f800283a 	ret

040801ec <write_block>:
void write_ctrl(int SHA_BASE, int value) {
	alt_u32 *btr = (alt_32*) SHA_BASE;
	write_word(btr, ADDR_CTRL, value);
}

void write_block(int SHA_BASE, int MEM_BASE) {
 40801ec:	20801004 	addi	r2,r4,64
 40801f0:	21002004 	addi	r4,r4,128
#include "SHA.h"

void write_word(int *btr, int addr, int value) {
	*(btr + addr) = value;
 40801f4:	28c00017 	ldw	r3,0(r5)
 40801f8:	10800104 	addi	r2,r2,4
 40801fc:	29400104 	addi	r5,r5,4
 4080200:	10ffff15 	stw	r3,-4(r2)

void write_block(int SHA_BASE, int MEM_BASE) {
	alt_u32 *btr = (alt_32*) SHA_BASE;
	alt_u32 *mem = (alt_32*) MEM_BASE;
	char index;
	for (index = 0; index < 16; index++) {
 4080204:	20bffb1e 	bne	r4,r2,40801f4 <__alt_data_end+0xfffc19f4>
		write_word(btr, ADDR_BLOCK_START + index, *(mem + index));
	}
}
 4080208:	f800283a 	ret

0408020c <write_clr_irq>:
#include "SHA.h"

void write_word(int *btr, int addr, int value) {
	*(btr + addr) = value;
 408020c:	00800044 	movi	r2,1
 4080210:	20802815 	stw	r2,160(r4)
 4080214:	f800283a 	ret

04080218 <read_control>:
}

unsigned int read_control(int SHA_BASE) {
	alt_u32 *btr = (alt_32*) SHA_BASE;
	return read_word(btr, ADDR_CTRL);
}
 4080218:	20800817 	ldw	r2,32(r4)
 408021c:	f800283a 	ret

04080220 <read_status>:

unsigned int read_status(int SHA_BASE) {
	alt_u32 *btr = (alt_32*) SHA_BASE;
	return read_word(btr, ADDR_STATUS);
}
 4080220:	20800917 	ldw	r2,36(r4)
 4080224:	f800283a 	ret

04080228 <read_block>:
void write_word(int *btr, int addr, int value) {
	*(btr + addr) = value;
}

unsigned int read_word(int *btr, int addr) {
	return *(btr + addr);
 4080228:	29403fcc 	andi	r5,r5,255
 408022c:	2940201c 	xori	r5,r5,128
 4080230:	297fe004 	addi	r5,r5,-128
 4080234:	29400404 	addi	r5,r5,16
 4080238:	294b883a 	add	r5,r5,r5
 408023c:	294b883a 	add	r5,r5,r5
 4080240:	2909883a 	add	r4,r5,r4
}

unsigned int read_block(int SHA_BASE, char index) {
	alt_u32 *btr = (alt_32*) SHA_BASE;
	return read_word(btr, ADDR_BLOCK_START + index);
}
 4080244:	20800017 	ldw	r2,0(r4)
 4080248:	f800283a 	ret

0408024c <read_digest>:

void read_digest(int SHA_BASE, int MEM_BASE) {
 408024c:	20802004 	addi	r2,r4,128
 4080250:	21002804 	addi	r4,r4,160
	alt_u32 *btr = (alt_32*) SHA_BASE;
	alt_u32 *mem = (alt_32*) MEM_BASE;
	char index = 0;
	for (index = 0; index < 8; index++) {
		*(mem+ index) = read_word(btr, ADDR_DIGEST_START + index);
 4080254:	10c00017 	ldw	r3,0(r2)
 4080258:	10800104 	addi	r2,r2,4
 408025c:	29400104 	addi	r5,r5,4
 4080260:	28ffff15 	stw	r3,-4(r5)

void read_digest(int SHA_BASE, int MEM_BASE) {
	alt_u32 *btr = (alt_32*) SHA_BASE;
	alt_u32 *mem = (alt_32*) MEM_BASE;
	char index = 0;
	for (index = 0; index < 8; index++) {
 4080264:	20bffb1e 	bne	r4,r2,4080254 <__alt_data_end+0xfffc1a54>
		*(mem+ index) = read_word(btr, ADDR_DIGEST_START + index);
	}
}
 4080268:	f800283a 	ret

0408026c <getLength>:

int getLength(char Message[]) {
 408026c:	2007883a 	mov	r3,r4
	int length;
	length = 0;
	while (1) {
		if (Message[length] != '\n')
 4080270:	01400284 	movi	r5,10
 4080274:	1905c83a 	sub	r2,r3,r4
 4080278:	18c00044 	addi	r3,r3,1
 408027c:	19bfffc7 	ldb	r6,-1(r3)
 4080280:	317ffc1e 	bne	r6,r5,4080274 <__alt_data_end+0xfffc1a74>
			length++;
		else
			break;
	}
	return length;
}
 4080284:	f800283a 	ret

04080288 <Padding>:
	unsigned int temp;

	j = 0;
	count = 0;
	temp = 0;
	Block[j] = 0;
 4080288:	20000015 	stw	zero,0(r4)

	for (i = 0; i < l; i++) {
 408028c:	2813883a 	mov	r9,r5
int Padding(unsigned int Block[], char Message[], int l) {
	int i, j, count, NumberBlock;
	unsigned int temp;

	j = 0;
	count = 0;
 4080290:	000f883a 	mov	r7,zero

int Padding(unsigned int Block[], char Message[], int l) {
	int i, j, count, NumberBlock;
	unsigned int temp;

	j = 0;
 4080294:	0007883a 	mov	r3,zero
	temp = 0;
	Block[j] = 0;

	for (i = 0; i < l; i++) {
		temp = Message[i];
		if (count < 3) {
 4080298:	02800084 	movi	r10,2
			temp = temp << (3 - count) * 8;
 408029c:	02c000c4 	movi	r11,3
		}
		Block[j] = Block[j] | temp;
		count++;
		if (count == 4) {
 40802a0:	03000104 	movi	r12,4
	j = 0;
	count = 0;
	temp = 0;
	Block[j] = 0;

	for (i = 0; i < l; i++) {
 40802a4:	4945c83a 	sub	r2,r9,r5
 40802a8:	1180120e 	bge	r2,r6,40802f4 <Padding+0x6c>
		temp = Message[i];
 40802ac:	4a000007 	ldb	r8,0(r9)
		if (count < 3) {
 40802b0:	51c00316 	blt	r10,r7,40802c0 <Padding+0x38>
			temp = temp << (3 - count) * 8;
 40802b4:	59c5c83a 	sub	r2,r11,r7
 40802b8:	100490fa 	slli	r2,r2,3
 40802bc:	4090983a 	sll	r8,r8,r2
		}
		Block[j] = Block[j] | temp;
 40802c0:	18c5883a 	add	r2,r3,r3
 40802c4:	1085883a 	add	r2,r2,r2
 40802c8:	2085883a 	add	r2,r4,r2
 40802cc:	13400017 	ldw	r13,0(r2)
		count++;
 40802d0:	39c00044 	addi	r7,r7,1
	for (i = 0; i < l; i++) {
		temp = Message[i];
		if (count < 3) {
			temp = temp << (3 - count) * 8;
		}
		Block[j] = Block[j] | temp;
 40802d4:	6a10b03a 	or	r8,r13,r8
 40802d8:	12000015 	stw	r8,0(r2)
		count++;
		if (count == 4) {
 40802dc:	3b00031e 	bne	r7,r12,40802ec <Padding+0x64>
			j++;
 40802e0:	18c00044 	addi	r3,r3,1
			Block[j] = 0;
 40802e4:	10000115 	stw	zero,4(r2)
			temp = 0;
			count = 0;
 40802e8:	000f883a 	mov	r7,zero
 40802ec:	4a400044 	addi	r9,r9,1
 40802f0:	003fec06 	br	40802a4 <__alt_data_end+0xfffc1aa4>
 40802f4:	3005883a 	mov	r2,r6
 40802f8:	3000010e 	bge	r6,zero,4080300 <Padding+0x78>
 40802fc:	0005883a 	mov	r2,zero
		}
	}
	if ((l % 4) == 0) {
 4080300:	314000cc 	andi	r5,r6,3
 4080304:	2800091e 	bne	r5,zero,408032c <Padding+0xa4>
		Block[l / 4] = 0x80 << 24;
 4080308:	300b883a 	mov	r5,r6
 408030c:	3000010e 	bge	r6,zero,4080314 <Padding+0x8c>
 4080310:	314000c4 	addi	r5,r6,3
 4080314:	280bd0ba 	srai	r5,r5,2
 4080318:	01e00034 	movhi	r7,32768
 408031c:	294b883a 	add	r5,r5,r5
 4080320:	294b883a 	add	r5,r5,r5
 4080324:	214b883a 	add	r5,r4,r5
 4080328:	00001606 	br	4080384 <Padding+0xfc>
	} else {
		j = l / 4;
 408032c:	3007883a 	mov	r3,r6
 4080330:	3000010e 	bge	r6,zero,4080338 <Padding+0xb0>
 4080334:	30c000c4 	addi	r3,r6,3
		i = l % 4;
 4080338:	00a00034 	movhi	r2,32768
 408033c:	108000c4 	addi	r2,r2,3
 4080340:	3084703a 	and	r2,r6,r2
		}
	}
	if ((l % 4) == 0) {
		Block[l / 4] = 0x80 << 24;
	} else {
		j = l / 4;
 4080344:	1807d0ba 	srai	r3,r3,2
		i = l % 4;
 4080348:	1000040e 	bge	r2,zero,408035c <Padding+0xd4>
 408034c:	10bfffc4 	addi	r2,r2,-1
 4080350:	017fff04 	movi	r5,-4
 4080354:	1144b03a 	or	r2,r2,r5
 4080358:	10800044 	addi	r2,r2,1
		if (i < 4) {
			temp = 0x80 << (3 - i) * 8;
		} else {
			temp = 0x80;
		}
		Block[j] = Block[j] | temp;
 408035c:	01c000c4 	movi	r7,3
 4080360:	388fc83a 	sub	r7,r7,r2
 4080364:	18cb883a 	add	r5,r3,r3
 4080368:	380e90fa 	slli	r7,r7,3
 408036c:	294b883a 	add	r5,r5,r5
 4080370:	02002004 	movi	r8,128
 4080374:	214b883a 	add	r5,r4,r5
 4080378:	41ce983a 	sll	r7,r8,r7
 408037c:	2a000017 	ldw	r8,0(r5)
 4080380:	41ceb03a 	or	r7,r8,r7
 4080384:	29c00015 	stw	r7,0(r5)

	}

	if (l <= 55) {
 4080388:	01400dc4 	movi	r5,55
 408038c:	29800a16 	blt	r5,r6,40803b8 <Padding+0x130>
		for (i = j + 1; i < 15; i++) {
 4080390:	18800044 	addi	r2,r3,1
 4080394:	18c7883a 	add	r3,r3,r3
 4080398:	18c7883a 	add	r3,r3,r3
 408039c:	20c7883a 	add	r3,r4,r3
 40803a0:	01400384 	movi	r5,14
 40803a4:	18c00104 	addi	r3,r3,4
 40803a8:	28800316 	blt	r5,r2,40803b8 <Padding+0x130>
			Block[i] = 0;
 40803ac:	18000015 	stw	zero,0(r3)
		Block[j] = Block[j] | temp;

	}

	if (l <= 55) {
		for (i = j + 1; i < 15; i++) {
 40803b0:	10800044 	addi	r2,r2,1
 40803b4:	003ffb06 	br	40803a4 <__alt_data_end+0xfffc1ba4>
			Block[i] = 0;
			NumberBlock = 1;
		}
	}

	Block[i] = l * 8;
 40803b8:	1087883a 	add	r3,r2,r2
 40803bc:	300c90fa 	slli	r6,r6,3
 40803c0:	18c7883a 	add	r3,r3,r3
 40803c4:	20c7883a 	add	r3,r4,r3
 40803c8:	19800015 	stw	r6,0(r3)
	for (i = i + 1; i < 64; i++) {
 40803cc:	01400fc4 	movi	r5,63
 40803d0:	10800044 	addi	r2,r2,1
 40803d4:	28800516 	blt	r5,r2,40803ec <Padding+0x164>
		Block[i] = 0;
 40803d8:	1087883a 	add	r3,r2,r2
 40803dc:	18c7883a 	add	r3,r3,r3
 40803e0:	20c7883a 	add	r3,r4,r3
 40803e4:	18000015 	stw	zero,0(r3)
 40803e8:	003ff906 	br	40803d0 <__alt_data_end+0xfffc1bd0>
	}
	return NumberBlock;
}
 40803ec:	00800044 	movi	r2,1
 40803f0:	f800283a 	ret

040803f4 <storeTargetIntoMemory>:

		j = 0;
		count = 0;
		temp = 0;
		alt_32 *mem = (alt_32*)MEM_BASE;
		*(mem + j) = 0;
 40803f4:	20000015 	stw	zero,0(r4)
		int i , j, count,l;
		l = length;
		unsigned int temp;

		j = 0;
		count = 0;
 40803f8:	0007883a 	mov	r3,zero
void storeTargetIntoMemory(int MEM_BASE, unsigned int Target[], int length) {
		int i , j, count,l;
		l = length;
		unsigned int temp;

		j = 0;
 40803fc:	0011883a 	mov	r8,zero
		count = 0;
		temp = 0;
		alt_32 *mem = (alt_32*)MEM_BASE;
		*(mem + j) = 0;

		for (i = 0; i < l; i++) {
 4080400:	0013883a 	mov	r9,zero
			temp = Target[i];
			if (count < 3) {
 4080404:	02800084 	movi	r10,2
				temp = temp << (3-count)*8;
 4080408:	02c000c4 	movi	r11,3
			}
			*(mem + j)= *(mem + j) | temp;
			count++;
			if (count == 4) {
 408040c:	03000104 	movi	r12,4
		count = 0;
		temp = 0;
		alt_32 *mem = (alt_32*)MEM_BASE;
		*(mem + j) = 0;

		for (i = 0; i < l; i++) {
 4080410:	4980130e 	bge	r9,r6,4080460 <storeTargetIntoMemory+0x6c>
			temp = Target[i];
 4080414:	29c00017 	ldw	r7,0(r5)
			if (count < 3) {
 4080418:	50c00316 	blt	r10,r3,4080428 <storeTargetIntoMemory+0x34>
				temp = temp << (3-count)*8;
 408041c:	58c5c83a 	sub	r2,r11,r3
 4080420:	100490fa 	slli	r2,r2,3
 4080424:	388e983a 	sll	r7,r7,r2
			}
			*(mem + j)= *(mem + j) | temp;
 4080428:	4205883a 	add	r2,r8,r8
 408042c:	1085883a 	add	r2,r2,r2
 4080430:	2085883a 	add	r2,r4,r2
 4080434:	13400017 	ldw	r13,0(r2)
			count++;
 4080438:	18c00044 	addi	r3,r3,1
		for (i = 0; i < l; i++) {
			temp = Target[i];
			if (count < 3) {
				temp = temp << (3-count)*8;
			}
			*(mem + j)= *(mem + j) | temp;
 408043c:	69ceb03a 	or	r7,r13,r7
 4080440:	11c00015 	stw	r7,0(r2)
			count++;
			if (count == 4) {
 4080444:	1b00031e 	bne	r3,r12,4080454 <storeTargetIntoMemory+0x60>
				j++;
 4080448:	42000044 	addi	r8,r8,1
				*(mem + j) = 0;
 408044c:	10000115 	stw	zero,4(r2)
				temp = 0;
				count = 0;
 4080450:	0007883a 	mov	r3,zero
		count = 0;
		temp = 0;
		alt_32 *mem = (alt_32*)MEM_BASE;
		*(mem + j) = 0;

		for (i = 0; i < l; i++) {
 4080454:	4a400044 	addi	r9,r9,1
 4080458:	29400104 	addi	r5,r5,4
 408045c:	003fec06 	br	4080410 <__alt_data_end+0xfffc1c10>
				*(mem + j) = 0;
				temp = 0;
				count = 0;
			}
		}
}
 4080460:	f800283a 	ret

04080464 <Padding_Mem>:

		j = 0;
		count = 0;
		temp = 0;
		alt_32 *mem = (alt_32*)MEM_BASE;
		*(mem + j) = 0;
 4080464:	20000015 	stw	zero,0(r4)
		int i , j, count, NumberBlock,l;
		l = length;
		unsigned int temp;

		j = 0;
		count = 0;
 4080468:	0011883a 	mov	r8,zero
int Padding_Mem(int MEM_BASE, unsigned int Message[], int length) {
		int i , j, count, NumberBlock,l;
		l = length;
		unsigned int temp;

		j = 0;
 408046c:	0007883a 	mov	r3,zero
		count = 0;
		temp = 0;
		alt_32 *mem = (alt_32*)MEM_BASE;
		*(mem + j) = 0;

		for (i = 0; i < l; i++) {
 4080470:	0015883a 	mov	r10,zero
			temp = Message[i];
			if (count < 3) {
 4080474:	02c00084 	movi	r11,2
				temp = temp << (3-count)*8;
 4080478:	030000c4 	movi	r12,3
			}
			*(mem + j)= *(mem + j) | temp;
			count++;
			if (count == 4) {
 408047c:	03400104 	movi	r13,4
		count = 0;
		temp = 0;
		alt_32 *mem = (alt_32*)MEM_BASE;
		*(mem + j) = 0;

		for (i = 0; i < l; i++) {
 4080480:	5180130e 	bge	r10,r6,40804d0 <Padding_Mem+0x6c>
			temp = Message[i];
 4080484:	2a400017 	ldw	r9,0(r5)
			if (count < 3) {
 4080488:	5a000316 	blt	r11,r8,4080498 <Padding_Mem+0x34>
				temp = temp << (3-count)*8;
 408048c:	620fc83a 	sub	r7,r12,r8
 4080490:	380e90fa 	slli	r7,r7,3
 4080494:	49d2983a 	sll	r9,r9,r7
			}
			*(mem + j)= *(mem + j) | temp;
 4080498:	18cf883a 	add	r7,r3,r3
 408049c:	39cf883a 	add	r7,r7,r7
 40804a0:	21cf883a 	add	r7,r4,r7
 40804a4:	3b800017 	ldw	r14,0(r7)
			count++;
 40804a8:	42000044 	addi	r8,r8,1
		for (i = 0; i < l; i++) {
			temp = Message[i];
			if (count < 3) {
				temp = temp << (3-count)*8;
			}
			*(mem + j)= *(mem + j) | temp;
 40804ac:	7252b03a 	or	r9,r14,r9
 40804b0:	3a400015 	stw	r9,0(r7)
			count++;
			if (count == 4) {
 40804b4:	4340031e 	bne	r8,r13,40804c4 <Padding_Mem+0x60>
				j++;
 40804b8:	18c00044 	addi	r3,r3,1
				*(mem + j) = 0;
 40804bc:	38000115 	stw	zero,4(r7)
				temp = 0;
				count = 0;
 40804c0:	0011883a 	mov	r8,zero
		count = 0;
		temp = 0;
		alt_32 *mem = (alt_32*)MEM_BASE;
		*(mem + j) = 0;

		for (i = 0; i < l; i++) {
 40804c4:	52800044 	addi	r10,r10,1
 40804c8:	29400104 	addi	r5,r5,4
 40804cc:	003fec06 	br	4080480 <__alt_data_end+0xfffc1c80>
 40804d0:	300f883a 	mov	r7,r6
 40804d4:	3000010e 	bge	r6,zero,40804dc <Padding_Mem+0x78>
 40804d8:	000f883a 	mov	r7,zero
				*(mem + j) = 0;
				temp = 0;
				count = 0;
			}
		}
		if ((l % 4) == 0) {
 40804dc:	314000cc 	andi	r5,r6,3
 40804e0:	2800091e 	bne	r5,zero,4080508 <Padding_Mem+0xa4>
			*(mem + l/4) = 0x80 << 24;
 40804e4:	300b883a 	mov	r5,r6
 40804e8:	3000010e 	bge	r6,zero,40804f0 <Padding_Mem+0x8c>
 40804ec:	314000c4 	addi	r5,r6,3
 40804f0:	280bd0ba 	srai	r5,r5,2
 40804f4:	02200034 	movhi	r8,32768
 40804f8:	294b883a 	add	r5,r5,r5
 40804fc:	294b883a 	add	r5,r5,r5
 4080500:	214b883a 	add	r5,r4,r5
 4080504:	00001706 	br	4080564 <Padding_Mem+0x100>
		}
		else {
			j = l / 4;
 4080508:	3007883a 	mov	r3,r6
 408050c:	3000010e 	bge	r6,zero,4080514 <Padding_Mem+0xb0>
 4080510:	30c000c4 	addi	r3,r6,3
			i = l % 4;
 4080514:	01600034 	movhi	r5,32768
 4080518:	294000c4 	addi	r5,r5,3
 408051c:	314a703a 	and	r5,r6,r5
		}
		if ((l % 4) == 0) {
			*(mem + l/4) = 0x80 << 24;
		}
		else {
			j = l / 4;
 4080520:	1807d0ba 	srai	r3,r3,2
			i = l % 4;
 4080524:	2800040e 	bge	r5,zero,4080538 <Padding_Mem+0xd4>
 4080528:	297fffc4 	addi	r5,r5,-1
 408052c:	01ffff04 	movi	r7,-4
 4080530:	29cab03a 	or	r5,r5,r7
 4080534:	29400044 	addi	r5,r5,1
 4080538:	280f883a 	mov	r7,r5
				temp = 0x80 << (3 - i) * 8;
			}
			else {
				temp = 0x80;
			}
			*(mem + j) = *(mem + j) | temp;
 408053c:	020000c4 	movi	r8,3
 4080540:	41d1c83a 	sub	r8,r8,r7
 4080544:	18cb883a 	add	r5,r3,r3
 4080548:	401090fa 	slli	r8,r8,3
 408054c:	294b883a 	add	r5,r5,r5
 4080550:	02402004 	movi	r9,128
 4080554:	214b883a 	add	r5,r4,r5
 4080558:	4a10983a 	sll	r8,r9,r8
 408055c:	2a400017 	ldw	r9,0(r5)
 4080560:	4a10b03a 	or	r8,r9,r8
 4080564:	2a000015 	stw	r8,0(r5)

		}

		if (l <= 55) {
 4080568:	01400dc4 	movi	r5,55
 408056c:	29800c16 	blt	r5,r6,40805a0 <Padding_Mem+0x13c>
 4080570:	18c5883a 	add	r2,r3,r3
 4080574:	1085883a 	add	r2,r2,r2
			for (i = j + 1; i < 15; i++) {
 4080578:	19c00044 	addi	r7,r3,1
 408057c:	1105883a 	add	r2,r2,r4
 4080580:	00c00384 	movi	r3,14
 4080584:	10800104 	addi	r2,r2,4
 4080588:	19c00316 	blt	r3,r7,4080598 <Padding_Mem+0x134>
				*(mem + i) = 0;
 408058c:	10000015 	stw	zero,0(r2)
			*(mem + j) = *(mem + j) | temp;

		}

		if (l <= 55) {
			for (i = j + 1; i < 15; i++) {
 4080590:	39c00044 	addi	r7,r7,1
 4080594:	003ffb06 	br	4080584 <__alt_data_end+0xfffc1d84>
 4080598:	00800044 	movi	r2,1
 408059c:	00001c06 	br	4080610 <Padding_Mem+0x1ac>
				*(mem + i) = 0;
				NumberBlock = 1;
			}
		}
		else if (l >= 56 && l <= 119) {
 40805a0:	317ff204 	addi	r5,r6,-56
 40805a4:	02000fc4 	movi	r8,63
 40805a8:	41400c36 	bltu	r8,r5,40805dc <Padding_Mem+0x178>
 40805ac:	18c5883a 	add	r2,r3,r3
 40805b0:	1085883a 	add	r2,r2,r2
			for (i = j + 1; i < 31; i++) {
 40805b4:	19c00044 	addi	r7,r3,1
 40805b8:	1105883a 	add	r2,r2,r4
 40805bc:	00c00784 	movi	r3,30
 40805c0:	10800104 	addi	r2,r2,4
 40805c4:	19c00316 	blt	r3,r7,40805d4 <Padding_Mem+0x170>
				*(mem + i) = 0;
 40805c8:	10000015 	stw	zero,0(r2)
				*(mem + i) = 0;
				NumberBlock = 1;
			}
		}
		else if (l >= 56 && l <= 119) {
			for (i = j + 1; i < 31; i++) {
 40805cc:	39c00044 	addi	r7,r7,1
 40805d0:	003ffb06 	br	40805c0 <__alt_data_end+0xfffc1dc0>
 40805d4:	00800084 	movi	r2,2
 40805d8:	00000d06 	br	4080610 <Padding_Mem+0x1ac>
				*(mem + i) = 0;
				NumberBlock = 2;
			}
		}
		else if (l >= 120 && l <= 183) {
 40805dc:	317fe204 	addi	r5,r6,-120
 40805e0:	41400b36 	bltu	r8,r5,4080610 <Padding_Mem+0x1ac>
			for (i = j + 1; i < 47; i++) {
 40805e4:	19c00044 	addi	r7,r3,1
 40805e8:	18c7883a 	add	r3,r3,r3
 40805ec:	18c7883a 	add	r3,r3,r3
 40805f0:	1907883a 	add	r3,r3,r4
 40805f4:	00800b84 	movi	r2,46
 40805f8:	18c00104 	addi	r3,r3,4
 40805fc:	11c00316 	blt	r2,r7,408060c <Padding_Mem+0x1a8>
				*(mem + i) = 0;
 4080600:	18000015 	stw	zero,0(r3)
				*(mem + i) = 0;
				NumberBlock = 2;
			}
		}
		else if (l >= 120 && l <= 183) {
			for (i = j + 1; i < 47; i++) {
 4080604:	39c00044 	addi	r7,r7,1
 4080608:	003ffb06 	br	40805f8 <__alt_data_end+0xfffc1df8>
 408060c:	008000c4 	movi	r2,3
				*(mem + i) = 0;
				NumberBlock = 3;
			}
		}
		*(mem + i) = l * 8;
 4080610:	300c90fa 	slli	r6,r6,3
 4080614:	39c7883a 	add	r3,r7,r7
 4080618:	18c7883a 	add	r3,r3,r3
 408061c:	20c7883a 	add	r3,r4,r3
 4080620:	19800015 	stw	r6,0(r3)
		for (i = i + 1; i < 64; i++) {
 4080624:	3807883a 	mov	r3,r7
 4080628:	01800fc4 	movi	r6,63
 408062c:	18c00044 	addi	r3,r3,1
 4080630:	30c00516 	blt	r6,r3,4080648 <Padding_Mem+0x1e4>
			*(mem + i) = 0;
 4080634:	18cb883a 	add	r5,r3,r3
 4080638:	294b883a 	add	r5,r5,r5
 408063c:	290b883a 	add	r5,r5,r4
 4080640:	28000015 	stw	zero,0(r5)
 4080644:	003ff906 	br	408062c <__alt_data_end+0xfffc1e2c>
		}
		return NumberBlock;
    }
 4080648:	f800283a 	ret

0408064c <SHA_Init>:

unsigned int SHA_Init(int SHA_BASE, int MEM_BASE, int ctrl_value) {
 408064c:	defffd04 	addi	sp,sp,-12
 4080650:	dc400115 	stw	r17,4(sp)
 4080654:	dc000015 	stw	r16,0(sp)
 4080658:	dfc00215 	stw	ra,8(sp)
#include "SHA.h"

void write_word(int *btr, int addr, int value) {
	*(btr + addr) = value;
 408065c:	00800044 	movi	r2,1
 4080660:	20802815 	stw	r2,160(r4)
 4080664:	20000815 	stw	zero,32(r4)
			*(mem + i) = 0;
		}
		return NumberBlock;
    }

unsigned int SHA_Init(int SHA_BASE, int MEM_BASE, int ctrl_value) {
 4080668:	3023883a 	mov	r17,r6
 408066c:	2021883a 	mov	r16,r4
	write_ctrl(SHA_BASE, 0x0); // clear control
	write_clr_irq(SHA_BASE); //clear interrupt
	write_block(SHA_BASE, MEM_BASE);
 4080670:	40801ec0 	call	40801ec <write_block>
	write_ctrl(SHA_BASE, ctrl_value);
	return read_control(SHA_BASE);
}
 4080674:	8805883a 	mov	r2,r17
#include "SHA.h"

void write_word(int *btr, int addr, int value) {
	*(btr + addr) = value;
 4080678:	84400815 	stw	r17,32(r16)
	write_ctrl(SHA_BASE, 0x0); // clear control
	write_clr_irq(SHA_BASE); //clear interrupt
	write_block(SHA_BASE, MEM_BASE);
	write_ctrl(SHA_BASE, ctrl_value);
	return read_control(SHA_BASE);
}
 408067c:	dfc00217 	ldw	ra,8(sp)
 4080680:	dc400117 	ldw	r17,4(sp)
 4080684:	dc000017 	ldw	r16,0(sp)
 4080688:	dec00304 	addi	sp,sp,12
 408068c:	f800283a 	ret

04080690 <reverse_byte_in_memory>:

void reverse_byte_in_memory(int MEM_BASE, unsigned int length_word) {
    unsigned int *memory_ptr = (unsigned int*)MEM_BASE;

    for (unsigned int i = 0; i < length_word; i++) {
 4080690:	000d883a 	mov	r6,zero
 4080694:	31400e26 	beq	r6,r5,40806d0 <reverse_byte_in_memory+0x40>
        unsigned int word = *(memory_ptr + i);
 4080698:	20800017 	ldw	r2,0(r4)
}

void reverse_byte_in_memory(int MEM_BASE, unsigned int length_word) {
    unsigned int *memory_ptr = (unsigned int*)MEM_BASE;

    for (unsigned int i = 0; i < length_word; i++) {
 408069c:	31800044 	addi	r6,r6,1
 40806a0:	21000104 	addi	r4,r4,4
        unsigned int word = *(memory_ptr + i);
        unsigned int reversed_word = ((word & 0x000000FF) << 24) |
                                    ((word & 0x0000FF00) << 8) |
                                    ((word & 0x00FF0000) >> 8) |
                                    ((word & 0xFF000000) >> 24);
        *(memory_ptr + i)= reversed_word;
 40806a4:	1006d63a 	srli	r3,r2,24
 40806a8:	100e963a 	slli	r7,r2,24
 40806ac:	38ceb03a 	or	r7,r7,r3
 40806b0:	10ffc00c 	andi	r3,r2,65280
 40806b4:	1806923a 	slli	r3,r3,8
 40806b8:	10803fec 	andhi	r2,r2,255
 40806bc:	1004d23a 	srli	r2,r2,8
 40806c0:	38c6b03a 	or	r3,r7,r3
 40806c4:	1884b03a 	or	r2,r3,r2
 40806c8:	20bfff15 	stw	r2,-4(r4)
 40806cc:	003ff106 	br	4080694 <__alt_data_end+0xfffc1e94>
    }
}
 40806d0:	f800283a 	ret

040806d4 <compareWithTarget>:

unsigned int compareWithTarget(int MEM_BASE_DIGEST, int MEM_BASE_TARGET, unsigned int length_word) {
 40806d4:	21000704 	addi	r4,r4,28
	alt_u32 *memory_base_digest = (alt_32*) MEM_BASE_DIGEST;
	alt_u32 *memory_base_target = (alt_32*) MEM_BASE_TARGET;
	unsigned int index =0;
    for (index = 0; index < length_word; index++) {
 40806d8:	0005883a 	mov	r2,zero
 40806dc:	11800a26 	beq	r2,r6,4080708 <compareWithTarget+0x34>
        if (*(memory_base_digest + (7 - index)) < *(memory_base_target + index )) {
 40806e0:	20c00017 	ldw	r3,0(r4)
 40806e4:	29c00017 	ldw	r7,0(r5)
 40806e8:	19c00536 	bltu	r3,r7,4080700 <compareWithTarget+0x2c>
 40806ec:	213fff04 	addi	r4,r4,-4
 40806f0:	29400104 	addi	r5,r5,4
        	return 1;
        }
        else if (*(memory_base_digest + (7 - index)) > *(memory_base_target + index )) {
 40806f4:	38c00436 	bltu	r7,r3,4080708 <compareWithTarget+0x34>

unsigned int compareWithTarget(int MEM_BASE_DIGEST, int MEM_BASE_TARGET, unsigned int length_word) {
	alt_u32 *memory_base_digest = (alt_32*) MEM_BASE_DIGEST;
	alt_u32 *memory_base_target = (alt_32*) MEM_BASE_TARGET;
	unsigned int index =0;
    for (index = 0; index < length_word; index++) {
 40806f8:	10800044 	addi	r2,r2,1
 40806fc:	003ff706 	br	40806dc <__alt_data_end+0xfffc1edc>
        if (*(memory_base_digest + (7 - index)) < *(memory_base_target + index )) {
        	return 1;
 4080700:	00800044 	movi	r2,1
 4080704:	f800283a 	ret
        }
        else if (*(memory_base_digest + (7 - index)) > *(memory_base_target + index )) {
        	return 0;
 4080708:	0005883a 	mov	r2,zero
        }
    }
    return 0;
}
 408070c:	f800283a 	ret

04080710 <padding_for_first_hash>:

void padding_for_first_hash(int MEM_BASE){
	alt_u32 *memory_ptr = (alt_32*) MEM_BASE;
	*(memory_ptr + 8) = 0x80000000;
 4080710:	00a00034 	movhi	r2,32768
 4080714:	20800815 	stw	r2,32(r4)
	*(memory_ptr + 10) = 0x0;
	*(memory_ptr + 11) = 0x0;
	*(memory_ptr + 12) = 0x0;
	*(memory_ptr + 13) = 0x0;
	*(memory_ptr + 14) = 0x0;
	*(memory_ptr + 15) = 0x00000100;
 4080718:	00804004 	movi	r2,256
}

void padding_for_first_hash(int MEM_BASE){
	alt_u32 *memory_ptr = (alt_32*) MEM_BASE;
	*(memory_ptr + 8) = 0x80000000;
	*(memory_ptr + 9) = 0x0;
 408071c:	20000915 	stw	zero,36(r4)
	*(memory_ptr + 10) = 0x0;
 4080720:	20000a15 	stw	zero,40(r4)
	*(memory_ptr + 11) = 0x0;
 4080724:	20000b15 	stw	zero,44(r4)
	*(memory_ptr + 12) = 0x0;
 4080728:	20000c15 	stw	zero,48(r4)
	*(memory_ptr + 13) = 0x0;
 408072c:	20000d15 	stw	zero,52(r4)
	*(memory_ptr + 14) = 0x0;
 4080730:	20000e15 	stw	zero,56(r4)
	*(memory_ptr + 15) = 0x00000100;
 4080734:	20800f15 	stw	r2,60(r4)
 4080738:	f800283a 	ret

0408073c <SHA_0_IRQ_Handler>:
unsigned int* final_digest_7;
unsigned int* final_digest_8;
unsigned int* final_digest_9;
void SHA_0_IRQ_Handler(void* isr_context) {
	//clear interrupt
	write_clr_irq(SHA_0_BASE);
 408073c:	01010334 	movhi	r4,1036
unsigned int* final_digest_5;
unsigned int* final_digest_6;
unsigned int* final_digest_7;
unsigned int* final_digest_8;
unsigned int* final_digest_9;
void SHA_0_IRQ_Handler(void* isr_context) {
 4080740:	deffff04 	addi	sp,sp,-4
	//clear interrupt
	write_clr_irq(SHA_0_BASE);
 4080744:	210e0004 	addi	r4,r4,14336
unsigned int* final_digest_5;
unsigned int* final_digest_6;
unsigned int* final_digest_7;
unsigned int* final_digest_8;
unsigned int* final_digest_9;
void SHA_0_IRQ_Handler(void* isr_context) {
 4080748:	dfc00015 	stw	ra,0(sp)
	//clear interrupt
	write_clr_irq(SHA_0_BASE);
 408074c:	408020c0 	call	408020c <write_clr_irq>
	count0++;
 4080750:	d0a07d17 	ldw	r2,-32268(gp)
	if(count0 == 0x1){
 4080754:	00c00044 	movi	r3,1
unsigned int* final_digest_8;
unsigned int* final_digest_9;
void SHA_0_IRQ_Handler(void* isr_context) {
	//clear interrupt
	write_clr_irq(SHA_0_BASE);
	count0++;
 4080758:	10800044 	addi	r2,r2,1
 408075c:	d0a07d15 	stw	r2,-32268(gp)
	if(count0 == 0x1){
 4080760:	10c0041e 	bne	r2,r3,4080774 <SHA_0_IRQ_Handler+0x38>
		//init SHA second
		SHA_Init(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE + SHA_BLOCK_SIZE * 4 ,
 4080764:	01410134 	movhi	r5,1028
 4080768:	01800384 	movi	r6,14
 408076c:	29401004 	addi	r5,r5,64
 4080770:	00000d06 	br	40807a8 <SHA_0_IRQ_Handler+0x6c>
			CTRL_NEXT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
	}else if(count0 == 0x2){
 4080774:	00c00084 	movi	r3,2
 4080778:	10c0101e 	bne	r2,r3,40807bc <SHA_0_IRQ_Handler+0x80>
		read_digest(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE + BLOCK_HEADER_SIZE *4 );
 408077c:	01410134 	movhi	r5,1028
 4080780:	01010334 	movhi	r4,1036
 4080784:	29402004 	addi	r5,r5,128
 4080788:	210e0004 	addi	r4,r4,14336
 408078c:	408024c0 	call	408024c <read_digest>
		/*-------padding for first hash--------*/
		padding_for_first_hash(ONCHIP_MEMORY2_1_BASE + BLOCK_HEADER_SIZE *4);
 4080790:	01010134 	movhi	r4,1028
 4080794:	21002004 	addi	r4,r4,128
 4080798:	40807100 	call	4080710 <padding_for_first_hash>
		/*--------Start second hash--------*/
		/*--------init SHA core--------*/
		SHA_Init(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE + BLOCK_HEADER_SIZE *4 ,
 408079c:	01410134 	movhi	r5,1028
 40807a0:	01800344 	movi	r6,13
 40807a4:	29402004 	addi	r5,r5,128
 40807a8:	01010334 	movhi	r4,1036
 40807ac:	210e0004 	addi	r4,r4,14336
		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
	}else if(count0 == 0x3){
		flag0 = flag0 | 0x1;
		count0 = 0x0;
	}
}
 40807b0:	dfc00017 	ldw	ra,0(sp)
 40807b4:	dec00104 	addi	sp,sp,4
		read_digest(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE + BLOCK_HEADER_SIZE *4 );
		/*-------padding for first hash--------*/
		padding_for_first_hash(ONCHIP_MEMORY2_1_BASE + BLOCK_HEADER_SIZE *4);
		/*--------Start second hash--------*/
		/*--------init SHA core--------*/
		SHA_Init(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE + BLOCK_HEADER_SIZE *4 ,
 40807b8:	408064c1 	jmpi	408064c <SHA_Init>
		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
	}else if(count0 == 0x3){
 40807bc:	00c000c4 	movi	r3,3
 40807c0:	10c0041e 	bne	r2,r3,40807d4 <SHA_0_IRQ_Handler+0x98>
		flag0 = flag0 | 0x1;
 40807c4:	d0a07317 	ldw	r2,-32308(gp)
		count0 = 0x0;
 40807c8:	d0207d15 	stw	zero,-32268(gp)
		/*--------Start second hash--------*/
		/*--------init SHA core--------*/
		SHA_Init(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE + BLOCK_HEADER_SIZE *4 ,
		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
	}else if(count0 == 0x3){
		flag0 = flag0 | 0x1;
 40807cc:	10800054 	ori	r2,r2,1
 40807d0:	d0a07315 	stw	r2,-32308(gp)
		count0 = 0x0;
	}
}
 40807d4:	dfc00017 	ldw	ra,0(sp)
 40807d8:	dec00104 	addi	sp,sp,4
 40807dc:	f800283a 	ret

040807e0 <SHA_1_IRQ_Handler>:
void SHA_1_IRQ_Handler(void* isr_context) {
	//clear interrupt
	write_clr_irq(SHA_1_BASE);
 40807e0:	01010334 	movhi	r4,1036
	}else if(count0 == 0x3){
		flag0 = flag0 | 0x1;
		count0 = 0x0;
	}
}
void SHA_1_IRQ_Handler(void* isr_context) {
 40807e4:	deffff04 	addi	sp,sp,-4
	//clear interrupt
	write_clr_irq(SHA_1_BASE);
 40807e8:	210d0004 	addi	r4,r4,13312
	}else if(count0 == 0x3){
		flag0 = flag0 | 0x1;
		count0 = 0x0;
	}
}
void SHA_1_IRQ_Handler(void* isr_context) {
 40807ec:	dfc00015 	stw	ra,0(sp)
	//clear interrupt
	write_clr_irq(SHA_1_BASE);
 40807f0:	408020c0 	call	408020c <write_clr_irq>
	count1++;
 40807f4:	d0a07c17 	ldw	r2,-32272(gp)

	if(count1 == 0x1){
 40807f8:	00c00044 	movi	r3,1
	}
}
void SHA_1_IRQ_Handler(void* isr_context) {
	//clear interrupt
	write_clr_irq(SHA_1_BASE);
	count1++;
 40807fc:	10800044 	addi	r2,r2,1
 4080800:	d0a07c15 	stw	r2,-32272(gp)

	if(count1 == 0x1){
 4080804:	10c0041e 	bne	r2,r3,4080818 <SHA_1_IRQ_Handler+0x38>
		//init SHA second
		SHA_Init(SHA_1_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 + SHA_BLOCK_SIZE * 4,
 4080808:	01410134 	movhi	r5,1028
 408080c:	01800384 	movi	r6,14
 4080810:	29404004 	addi	r5,r5,256
 4080814:	00000d06 	br	408084c <SHA_1_IRQ_Handler+0x6c>
			CTRL_NEXT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
	}else if(count1 == 0x2){
 4080818:	00c00084 	movi	r3,2
 408081c:	10c0101e 	bne	r2,r3,4080860 <SHA_1_IRQ_Handler+0x80>
		read_digest(SHA_1_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 + BLOCK_HEADER_SIZE * 4);
 4080820:	01410134 	movhi	r5,1028
 4080824:	01010334 	movhi	r4,1036
 4080828:	29405004 	addi	r5,r5,320
 408082c:	210d0004 	addi	r4,r4,13312
 4080830:	408024c0 	call	408024c <read_digest>
		/*-------padding for first hash--------*/
		padding_for_first_hash(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 + BLOCK_HEADER_SIZE * 4);
 4080834:	01010134 	movhi	r4,1028
 4080838:	21005004 	addi	r4,r4,320
 408083c:	40807100 	call	4080710 <padding_for_first_hash>
		/*--------Start second hash--------*/
		/*--------init SHA core--------*/
		SHA_Init(SHA_1_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 + BLOCK_HEADER_SIZE * 4,
 4080840:	01410134 	movhi	r5,1028
 4080844:	01800344 	movi	r6,13
 4080848:	29405004 	addi	r5,r5,320
 408084c:	01010334 	movhi	r4,1036
 4080850:	210d0004 	addi	r4,r4,13312

	}else if(count1 == 0x3){
		flag1 = flag1 | 0x1;
		count1 = 0x0;
	}
}
 4080854:	dfc00017 	ldw	ra,0(sp)
 4080858:	dec00104 	addi	sp,sp,4
		read_digest(SHA_1_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 + BLOCK_HEADER_SIZE * 4);
		/*-------padding for first hash--------*/
		padding_for_first_hash(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 + BLOCK_HEADER_SIZE * 4);
		/*--------Start second hash--------*/
		/*--------init SHA core--------*/
		SHA_Init(SHA_1_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 + BLOCK_HEADER_SIZE * 4,
 408085c:	408064c1 	jmpi	408064c <SHA_Init>
		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1

	}else if(count1 == 0x3){
 4080860:	00c000c4 	movi	r3,3
 4080864:	10c0041e 	bne	r2,r3,4080878 <SHA_1_IRQ_Handler+0x98>
		flag1 = flag1 | 0x1;
 4080868:	d0a07217 	ldw	r2,-32312(gp)
		count1 = 0x0;
 408086c:	d0207c15 	stw	zero,-32272(gp)
		/*--------init SHA core--------*/
		SHA_Init(SHA_1_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 + BLOCK_HEADER_SIZE * 4,
		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1

	}else if(count1 == 0x3){
		flag1 = flag1 | 0x1;
 4080870:	10800054 	ori	r2,r2,1
 4080874:	d0a07215 	stw	r2,-32312(gp)
		count1 = 0x0;
	}
}
 4080878:	dfc00017 	ldw	ra,0(sp)
 408087c:	dec00104 	addi	sp,sp,4
 4080880:	f800283a 	ret

04080884 <SHA_2_IRQ_Handler>:

void SHA_2_IRQ_Handler(void* isr_context) {
	//clear interrupt
	write_clr_irq(SHA_2_BASE);
 4080884:	01010334 	movhi	r4,1036
		flag1 = flag1 | 0x1;
		count1 = 0x0;
	}
}

void SHA_2_IRQ_Handler(void* isr_context) {
 4080888:	deffff04 	addi	sp,sp,-4
	//clear interrupt
	write_clr_irq(SHA_2_BASE);
 408088c:	210c0004 	addi	r4,r4,12288
		flag1 = flag1 | 0x1;
		count1 = 0x0;
	}
}

void SHA_2_IRQ_Handler(void* isr_context) {
 4080890:	dfc00015 	stw	ra,0(sp)
	//clear interrupt
	write_clr_irq(SHA_2_BASE);
 4080894:	408020c0 	call	408020c <write_clr_irq>
	count2++;
 4080898:	d0a07b17 	ldw	r2,-32276(gp)

	if(count2 == 0x1){
 408089c:	00c00044 	movi	r3,1
}

void SHA_2_IRQ_Handler(void* isr_context) {
	//clear interrupt
	write_clr_irq(SHA_2_BASE);
	count2++;
 40808a0:	10800044 	addi	r2,r2,1
 40808a4:	d0a07b15 	stw	r2,-32276(gp)

	if(count2 == 0x1){
 40808a8:	10c0041e 	bne	r2,r3,40808bc <SHA_2_IRQ_Handler+0x38>
		//init SHA second
		SHA_Init(SHA_2_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 2 * 4 + SHA_BLOCK_SIZE * 4,
 40808ac:	01410134 	movhi	r5,1028
 40808b0:	01800384 	movi	r6,14
 40808b4:	29407004 	addi	r5,r5,448
 40808b8:	00000d06 	br	40808f0 <SHA_2_IRQ_Handler+0x6c>
			CTRL_NEXT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
	}else if(count2 == 0x2){
 40808bc:	00c00084 	movi	r3,2
 40808c0:	10c0101e 	bne	r2,r3,4080904 <SHA_2_IRQ_Handler+0x80>
		read_digest(SHA_2_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 2 * 4 + BLOCK_HEADER_SIZE * 4);
 40808c4:	01410134 	movhi	r5,1028
 40808c8:	01010334 	movhi	r4,1036
 40808cc:	29408004 	addi	r5,r5,512
 40808d0:	210c0004 	addi	r4,r4,12288
 40808d4:	408024c0 	call	408024c <read_digest>
		/*-------padding for first hash--------*/
		padding_for_first_hash(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 2 * 4 + BLOCK_HEADER_SIZE * 4);
 40808d8:	01010134 	movhi	r4,1028
 40808dc:	21008004 	addi	r4,r4,512
 40808e0:	40807100 	call	4080710 <padding_for_first_hash>
		/*--------Start second hash--------*/
		/*--------init SHA core--------*/
		SHA_Init(SHA_2_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 2 * 4 + BLOCK_HEADER_SIZE * 4,
 40808e4:	01410134 	movhi	r5,1028
 40808e8:	01800344 	movi	r6,13
 40808ec:	29408004 	addi	r5,r5,512
 40808f0:	01010334 	movhi	r4,1036
 40808f4:	210c0004 	addi	r4,r4,12288

	}else if(count2 == 0x3){
		flag2 = flag2 | 0x1;
		count2 = 0x0;
	}
}
 40808f8:	dfc00017 	ldw	ra,0(sp)
 40808fc:	dec00104 	addi	sp,sp,4
		read_digest(SHA_2_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 2 * 4 + BLOCK_HEADER_SIZE * 4);
		/*-------padding for first hash--------*/
		padding_for_first_hash(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 2 * 4 + BLOCK_HEADER_SIZE * 4);
		/*--------Start second hash--------*/
		/*--------init SHA core--------*/
		SHA_Init(SHA_2_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 2 * 4 + BLOCK_HEADER_SIZE * 4,
 4080900:	408064c1 	jmpi	408064c <SHA_Init>
		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1

	}else if(count2 == 0x3){
 4080904:	00c000c4 	movi	r3,3
 4080908:	10c0041e 	bne	r2,r3,408091c <SHA_2_IRQ_Handler+0x98>
		flag2 = flag2 | 0x1;
 408090c:	d0a07117 	ldw	r2,-32316(gp)
		count2 = 0x0;
 4080910:	d0207b15 	stw	zero,-32276(gp)
		/*--------init SHA core--------*/
		SHA_Init(SHA_2_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 2 * 4 + BLOCK_HEADER_SIZE * 4,
		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1

	}else if(count2 == 0x3){
		flag2 = flag2 | 0x1;
 4080914:	10800054 	ori	r2,r2,1
 4080918:	d0a07115 	stw	r2,-32316(gp)
		count2 = 0x0;
	}
}
 408091c:	dfc00017 	ldw	ra,0(sp)
 4080920:	dec00104 	addi	sp,sp,4
 4080924:	f800283a 	ret

04080928 <SHA_3_IRQ_Handler>:

void SHA_3_IRQ_Handler(void* isr_context) {
	//clear interrupt
	write_clr_irq(SHA_3_BASE);
 4080928:	01010334 	movhi	r4,1036
		flag2 = flag2 | 0x1;
		count2 = 0x0;
	}
}

void SHA_3_IRQ_Handler(void* isr_context) {
 408092c:	deffff04 	addi	sp,sp,-4
	//clear interrupt
	write_clr_irq(SHA_3_BASE);
 4080930:	210b0004 	addi	r4,r4,11264
		flag2 = flag2 | 0x1;
		count2 = 0x0;
	}
}

void SHA_3_IRQ_Handler(void* isr_context) {
 4080934:	dfc00015 	stw	ra,0(sp)
	//clear interrupt
	write_clr_irq(SHA_3_BASE);
 4080938:	408020c0 	call	408020c <write_clr_irq>
	count3++;
 408093c:	d0a07a17 	ldw	r2,-32280(gp)

	if(count3 == 0x1){
 4080940:	00c00044 	movi	r3,1
}

void SHA_3_IRQ_Handler(void* isr_context) {
	//clear interrupt
	write_clr_irq(SHA_3_BASE);
	count3++;
 4080944:	10800044 	addi	r2,r2,1
 4080948:	d0a07a15 	stw	r2,-32280(gp)

	if(count3 == 0x1){
 408094c:	10c0041e 	bne	r2,r3,4080960 <SHA_3_IRQ_Handler+0x38>
		//init SHA second
		SHA_Init(SHA_3_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 3 * 4 + SHA_BLOCK_SIZE * 4,
 4080950:	01410134 	movhi	r5,1028
 4080954:	01800384 	movi	r6,14
 4080958:	2940a004 	addi	r5,r5,640
 408095c:	00000d06 	br	4080994 <SHA_3_IRQ_Handler+0x6c>
			CTRL_NEXT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
	}else if(count3 == 0x2){
 4080960:	00c00084 	movi	r3,2
 4080964:	10c0101e 	bne	r2,r3,40809a8 <SHA_3_IRQ_Handler+0x80>
		read_digest(SHA_3_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 3 * 4 + BLOCK_HEADER_SIZE * 4);
 4080968:	01410134 	movhi	r5,1028
 408096c:	01010334 	movhi	r4,1036
 4080970:	2940b004 	addi	r5,r5,704
 4080974:	210b0004 	addi	r4,r4,11264
 4080978:	408024c0 	call	408024c <read_digest>
		/*-------padding for first hash--------*/
		padding_for_first_hash(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 3 * 4 + BLOCK_HEADER_SIZE * 4);
 408097c:	01010134 	movhi	r4,1028
 4080980:	2100b004 	addi	r4,r4,704
 4080984:	40807100 	call	4080710 <padding_for_first_hash>
		/*--------Start second hash--------*/
		/*--------init SHA core--------*/
		SHA_Init(SHA_3_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 3 * 4 + BLOCK_HEADER_SIZE * 4,
 4080988:	01410134 	movhi	r5,1028
 408098c:	01800344 	movi	r6,13
 4080990:	2940b004 	addi	r5,r5,704
 4080994:	01010334 	movhi	r4,1036
 4080998:	210b0004 	addi	r4,r4,11264

	}else if(count3 == 0x3){
		flag3 = flag3 | 0x1;
		count3 = 0x0;
	}
}
 408099c:	dfc00017 	ldw	ra,0(sp)
 40809a0:	dec00104 	addi	sp,sp,4
		read_digest(SHA_3_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 3 * 4 + BLOCK_HEADER_SIZE * 4);
		/*-------padding for first hash--------*/
		padding_for_first_hash(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 3 * 4 + BLOCK_HEADER_SIZE * 4);
		/*--------Start second hash--------*/
		/*--------init SHA core--------*/
		SHA_Init(SHA_3_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 3 * 4 + BLOCK_HEADER_SIZE * 4,
 40809a4:	408064c1 	jmpi	408064c <SHA_Init>
		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1

	}else if(count3 == 0x3){
 40809a8:	00c000c4 	movi	r3,3
 40809ac:	10c0041e 	bne	r2,r3,40809c0 <SHA_3_IRQ_Handler+0x98>
		flag3 = flag3 | 0x1;
 40809b0:	d0a07017 	ldw	r2,-32320(gp)
		count3 = 0x0;
 40809b4:	d0207a15 	stw	zero,-32280(gp)
		/*--------init SHA core--------*/
		SHA_Init(SHA_3_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 3 * 4 + BLOCK_HEADER_SIZE * 4,
		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1

	}else if(count3 == 0x3){
		flag3 = flag3 | 0x1;
 40809b8:	10800054 	ori	r2,r2,1
 40809bc:	d0a07015 	stw	r2,-32320(gp)
		count3 = 0x0;
	}
}
 40809c0:	dfc00017 	ldw	ra,0(sp)
 40809c4:	dec00104 	addi	sp,sp,4
 40809c8:	f800283a 	ret

040809cc <SHA_4_IRQ_Handler>:

void SHA_4_IRQ_Handler(void* isr_context) {
	//clear interrupt
	write_clr_irq(SHA_4_BASE);
 40809cc:	01010334 	movhi	r4,1036
		flag3 = flag3 | 0x1;
		count3 = 0x0;
	}
}

void SHA_4_IRQ_Handler(void* isr_context) {
 40809d0:	deffff04 	addi	sp,sp,-4
	//clear interrupt
	write_clr_irq(SHA_4_BASE);
 40809d4:	210a0004 	addi	r4,r4,10240
		flag3 = flag3 | 0x1;
		count3 = 0x0;
	}
}

void SHA_4_IRQ_Handler(void* isr_context) {
 40809d8:	dfc00015 	stw	ra,0(sp)
	//clear interrupt
	write_clr_irq(SHA_4_BASE);
 40809dc:	408020c0 	call	408020c <write_clr_irq>
	count4++;
 40809e0:	d0a07917 	ldw	r2,-32284(gp)

	if(count4 == 0x1){
 40809e4:	00c00044 	movi	r3,1
}

void SHA_4_IRQ_Handler(void* isr_context) {
	//clear interrupt
	write_clr_irq(SHA_4_BASE);
	count4++;
 40809e8:	10800044 	addi	r2,r2,1
 40809ec:	d0a07915 	stw	r2,-32284(gp)

	if(count4 == 0x1){
 40809f0:	10c0041e 	bne	r2,r3,4080a04 <SHA_4_IRQ_Handler+0x38>
		//init SHA second
		SHA_Init(SHA_4_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 * 4 + SHA_BLOCK_SIZE * 4,
 40809f4:	01410134 	movhi	r5,1028
 40809f8:	01800384 	movi	r6,14
 40809fc:	2940d004 	addi	r5,r5,832
 4080a00:	00000d06 	br	4080a38 <SHA_4_IRQ_Handler+0x6c>
			CTRL_NEXT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
	}else if(count4 == 0x2){
 4080a04:	00c00084 	movi	r3,2
 4080a08:	10c0101e 	bne	r2,r3,4080a4c <SHA_4_IRQ_Handler+0x80>
		read_digest(SHA_4_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 * 4 + BLOCK_HEADER_SIZE * 4);
 4080a0c:	01410134 	movhi	r5,1028
 4080a10:	01010334 	movhi	r4,1036
 4080a14:	2940e004 	addi	r5,r5,896
 4080a18:	210a0004 	addi	r4,r4,10240
 4080a1c:	408024c0 	call	408024c <read_digest>
		/*-------padding for first hash--------*/
		padding_for_first_hash(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 * 4 + BLOCK_HEADER_SIZE * 4);
 4080a20:	01010134 	movhi	r4,1028
 4080a24:	2100e004 	addi	r4,r4,896
 4080a28:	40807100 	call	4080710 <padding_for_first_hash>
		/*--------Start second hash--------*/
		/*--------init SHA core--------*/
		SHA_Init(SHA_4_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 * 4 + BLOCK_HEADER_SIZE * 4,
 4080a2c:	01410134 	movhi	r5,1028
 4080a30:	01800344 	movi	r6,13
 4080a34:	2940e004 	addi	r5,r5,896
 4080a38:	01010334 	movhi	r4,1036
 4080a3c:	210a0004 	addi	r4,r4,10240

	}else if(count4 == 0x3){
		flag4 = flag4 | 0x1;
		count4 = 0x0;
	}
}
 4080a40:	dfc00017 	ldw	ra,0(sp)
 4080a44:	dec00104 	addi	sp,sp,4
		read_digest(SHA_4_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 * 4 + BLOCK_HEADER_SIZE * 4);
		/*-------padding for first hash--------*/
		padding_for_first_hash(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 * 4 + BLOCK_HEADER_SIZE * 4);
		/*--------Start second hash--------*/
		/*--------init SHA core--------*/
		SHA_Init(SHA_4_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 * 4 + BLOCK_HEADER_SIZE * 4,
 4080a48:	408064c1 	jmpi	408064c <SHA_Init>
		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1

	}else if(count4 == 0x3){
 4080a4c:	00c000c4 	movi	r3,3
 4080a50:	10c0041e 	bne	r2,r3,4080a64 <SHA_4_IRQ_Handler+0x98>
		flag4 = flag4 | 0x1;
 4080a54:	d0a06f17 	ldw	r2,-32324(gp)
		count4 = 0x0;
 4080a58:	d0207915 	stw	zero,-32284(gp)
		/*--------init SHA core--------*/
		SHA_Init(SHA_4_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 * 4 + BLOCK_HEADER_SIZE * 4,
		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1

	}else if(count4 == 0x3){
		flag4 = flag4 | 0x1;
 4080a5c:	10800054 	ori	r2,r2,1
 4080a60:	d0a06f15 	stw	r2,-32324(gp)
		count4 = 0x0;
	}
}
 4080a64:	dfc00017 	ldw	ra,0(sp)
 4080a68:	dec00104 	addi	sp,sp,4
 4080a6c:	f800283a 	ret

04080a70 <SHA_5_IRQ_Handler>:

void SHA_5_IRQ_Handler(void* isr_context) {
	//clear interrupt
	write_clr_irq(SHA_5_BASE);
 4080a70:	01010334 	movhi	r4,1036
		flag4 = flag4 | 0x1;
		count4 = 0x0;
	}
}

void SHA_5_IRQ_Handler(void* isr_context) {
 4080a74:	deffff04 	addi	sp,sp,-4
	//clear interrupt
	write_clr_irq(SHA_5_BASE);
 4080a78:	21090004 	addi	r4,r4,9216
		flag4 = flag4 | 0x1;
		count4 = 0x0;
	}
}

void SHA_5_IRQ_Handler(void* isr_context) {
 4080a7c:	dfc00015 	stw	ra,0(sp)
	//clear interrupt
	write_clr_irq(SHA_5_BASE);
 4080a80:	408020c0 	call	408020c <write_clr_irq>
	count5++;
 4080a84:	d0a07817 	ldw	r2,-32288(gp)

	if(count5 == 0x1){
 4080a88:	00c00044 	movi	r3,1
}

void SHA_5_IRQ_Handler(void* isr_context) {
	//clear interrupt
	write_clr_irq(SHA_5_BASE);
	count5++;
 4080a8c:	10800044 	addi	r2,r2,1
 4080a90:	d0a07815 	stw	r2,-32288(gp)

	if(count5 == 0x1){
 4080a94:	10c0041e 	bne	r2,r3,4080aa8 <SHA_5_IRQ_Handler+0x38>
		//init SHA second
		SHA_Init(SHA_5_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 5 * 4 + SHA_BLOCK_SIZE * 4,
 4080a98:	01410134 	movhi	r5,1028
 4080a9c:	01800384 	movi	r6,14
 4080aa0:	29410004 	addi	r5,r5,1024
 4080aa4:	00000d06 	br	4080adc <SHA_5_IRQ_Handler+0x6c>
			CTRL_NEXT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
	}else if(count5 == 0x2){
 4080aa8:	00c00084 	movi	r3,2
 4080aac:	10c0101e 	bne	r2,r3,4080af0 <SHA_5_IRQ_Handler+0x80>
		read_digest(SHA_5_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 5 * 4 + BLOCK_HEADER_SIZE * 4);
 4080ab0:	01410134 	movhi	r5,1028
 4080ab4:	01010334 	movhi	r4,1036
 4080ab8:	29411004 	addi	r5,r5,1088
 4080abc:	21090004 	addi	r4,r4,9216
 4080ac0:	408024c0 	call	408024c <read_digest>
		/*-------padding for first hash--------*/
		padding_for_first_hash(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 5 * 4 + BLOCK_HEADER_SIZE * 4);
 4080ac4:	01010134 	movhi	r4,1028
 4080ac8:	21011004 	addi	r4,r4,1088
 4080acc:	40807100 	call	4080710 <padding_for_first_hash>
		/*--------Start second hash--------*/
		/*--------init SHA core--------*/
		SHA_Init(SHA_5_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 5 * 4 + BLOCK_HEADER_SIZE * 4,
 4080ad0:	01410134 	movhi	r5,1028
 4080ad4:	01800344 	movi	r6,13
 4080ad8:	29411004 	addi	r5,r5,1088
 4080adc:	01010334 	movhi	r4,1036
 4080ae0:	21090004 	addi	r4,r4,9216

	}else if(count5 == 0x3){
		flag5 = flag5 | 0x1;
		count5 = 0x0;
	}
}
 4080ae4:	dfc00017 	ldw	ra,0(sp)
 4080ae8:	dec00104 	addi	sp,sp,4
		read_digest(SHA_5_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 5 * 4 + BLOCK_HEADER_SIZE * 4);
		/*-------padding for first hash--------*/
		padding_for_first_hash(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 5 * 4 + BLOCK_HEADER_SIZE * 4);
		/*--------Start second hash--------*/
		/*--------init SHA core--------*/
		SHA_Init(SHA_5_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 5 * 4 + BLOCK_HEADER_SIZE * 4,
 4080aec:	408064c1 	jmpi	408064c <SHA_Init>
		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1

	}else if(count5 == 0x3){
 4080af0:	00c000c4 	movi	r3,3
 4080af4:	10c0041e 	bne	r2,r3,4080b08 <SHA_5_IRQ_Handler+0x98>
		flag5 = flag5 | 0x1;
 4080af8:	d0a06e17 	ldw	r2,-32328(gp)
		count5 = 0x0;
 4080afc:	d0207815 	stw	zero,-32288(gp)
		/*--------init SHA core--------*/
		SHA_Init(SHA_5_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 5 * 4 + BLOCK_HEADER_SIZE * 4,
		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1

	}else if(count5 == 0x3){
		flag5 = flag5 | 0x1;
 4080b00:	10800054 	ori	r2,r2,1
 4080b04:	d0a06e15 	stw	r2,-32328(gp)
		count5 = 0x0;
	}
}
 4080b08:	dfc00017 	ldw	ra,0(sp)
 4080b0c:	dec00104 	addi	sp,sp,4
 4080b10:	f800283a 	ret

04080b14 <SHA_6_IRQ_Handler>:

void SHA_6_IRQ_Handler(void* isr_context) {
	//clear interrupt
	write_clr_irq(SHA_6_BASE);
 4080b14:	01010334 	movhi	r4,1036
		flag5 = flag5 | 0x1;
		count5 = 0x0;
	}
}

void SHA_6_IRQ_Handler(void* isr_context) {
 4080b18:	deffff04 	addi	sp,sp,-4
	//clear interrupt
	write_clr_irq(SHA_6_BASE);
 4080b1c:	21080004 	addi	r4,r4,8192
		flag5 = flag5 | 0x1;
		count5 = 0x0;
	}
}

void SHA_6_IRQ_Handler(void* isr_context) {
 4080b20:	dfc00015 	stw	ra,0(sp)
	//clear interrupt
	write_clr_irq(SHA_6_BASE);
 4080b24:	408020c0 	call	408020c <write_clr_irq>
	count6++;
 4080b28:	d0a07717 	ldw	r2,-32292(gp)

	if(count6 == 0x1){
 4080b2c:	00c00044 	movi	r3,1
}

void SHA_6_IRQ_Handler(void* isr_context) {
	//clear interrupt
	write_clr_irq(SHA_6_BASE);
	count6++;
 4080b30:	10800044 	addi	r2,r2,1
 4080b34:	d0a07715 	stw	r2,-32292(gp)

	if(count6 == 0x1){
 4080b38:	10c0041e 	bne	r2,r3,4080b4c <SHA_6_IRQ_Handler+0x38>
		//init SHA second
		SHA_Init(SHA_6_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 6 * 4 + SHA_BLOCK_SIZE * 4,
 4080b3c:	01410134 	movhi	r5,1028
 4080b40:	01800384 	movi	r6,14
 4080b44:	29413004 	addi	r5,r5,1216
 4080b48:	00000d06 	br	4080b80 <SHA_6_IRQ_Handler+0x6c>
			CTRL_NEXT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
	}else if(count6 == 0x2){
 4080b4c:	00c00084 	movi	r3,2
 4080b50:	10c0101e 	bne	r2,r3,4080b94 <SHA_6_IRQ_Handler+0x80>
		read_digest(SHA_6_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 6 * 4 + BLOCK_HEADER_SIZE * 4);
 4080b54:	01410134 	movhi	r5,1028
 4080b58:	01010334 	movhi	r4,1036
 4080b5c:	29414004 	addi	r5,r5,1280
 4080b60:	21080004 	addi	r4,r4,8192
 4080b64:	408024c0 	call	408024c <read_digest>
		/*-------padding for first hash--------*/
		padding_for_first_hash(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 6 * 4 + BLOCK_HEADER_SIZE * 4);
 4080b68:	01010134 	movhi	r4,1028
 4080b6c:	21014004 	addi	r4,r4,1280
 4080b70:	40807100 	call	4080710 <padding_for_first_hash>
		/*--------Start second hash--------*/
		/*--------init SHA core--------*/
		SHA_Init(SHA_6_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 6 * 4 + BLOCK_HEADER_SIZE * 4,
 4080b74:	01410134 	movhi	r5,1028
 4080b78:	01800344 	movi	r6,13
 4080b7c:	29414004 	addi	r5,r5,1280
 4080b80:	01010334 	movhi	r4,1036
 4080b84:	21080004 	addi	r4,r4,8192

	}else if(count6 == 0x3){
		flag6 = flag6 | 0x1;
		count6 = 0x0;
	}
}
 4080b88:	dfc00017 	ldw	ra,0(sp)
 4080b8c:	dec00104 	addi	sp,sp,4
		read_digest(SHA_6_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 6 * 4 + BLOCK_HEADER_SIZE * 4);
		/*-------padding for first hash--------*/
		padding_for_first_hash(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 6 * 4 + BLOCK_HEADER_SIZE * 4);
		/*--------Start second hash--------*/
		/*--------init SHA core--------*/
		SHA_Init(SHA_6_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 6 * 4 + BLOCK_HEADER_SIZE * 4,
 4080b90:	408064c1 	jmpi	408064c <SHA_Init>
		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1

	}else if(count6 == 0x3){
 4080b94:	00c000c4 	movi	r3,3
 4080b98:	10c0041e 	bne	r2,r3,4080bac <SHA_6_IRQ_Handler+0x98>
		flag6 = flag6 | 0x1;
 4080b9c:	d0a06d17 	ldw	r2,-32332(gp)
		count6 = 0x0;
 4080ba0:	d0207715 	stw	zero,-32292(gp)
		/*--------init SHA core--------*/
		SHA_Init(SHA_6_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 6 * 4 + BLOCK_HEADER_SIZE * 4,
		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1

	}else if(count6 == 0x3){
		flag6 = flag6 | 0x1;
 4080ba4:	10800054 	ori	r2,r2,1
 4080ba8:	d0a06d15 	stw	r2,-32332(gp)
		count6 = 0x0;
	}
}
 4080bac:	dfc00017 	ldw	ra,0(sp)
 4080bb0:	dec00104 	addi	sp,sp,4
 4080bb4:	f800283a 	ret

04080bb8 <SHA_7_IRQ_Handler>:

void SHA_7_IRQ_Handler(void* isr_context) {
	//clear interrupt
	write_clr_irq(SHA_7_BASE);
 4080bb8:	01010334 	movhi	r4,1036
		flag6 = flag6 | 0x1;
		count6 = 0x0;
	}
}

void SHA_7_IRQ_Handler(void* isr_context) {
 4080bbc:	deffff04 	addi	sp,sp,-4
	//clear interrupt
	write_clr_irq(SHA_7_BASE);
 4080bc0:	21070004 	addi	r4,r4,7168
		flag6 = flag6 | 0x1;
		count6 = 0x0;
	}
}

void SHA_7_IRQ_Handler(void* isr_context) {
 4080bc4:	dfc00015 	stw	ra,0(sp)
	//clear interrupt
	write_clr_irq(SHA_7_BASE);
 4080bc8:	408020c0 	call	408020c <write_clr_irq>
	count7++;
 4080bcc:	d0a07617 	ldw	r2,-32296(gp)

	if(count7 == 0x1){
 4080bd0:	00c00044 	movi	r3,1
}

void SHA_7_IRQ_Handler(void* isr_context) {
	//clear interrupt
	write_clr_irq(SHA_7_BASE);
	count7++;
 4080bd4:	10800044 	addi	r2,r2,1
 4080bd8:	d0a07615 	stw	r2,-32296(gp)

	if(count7 == 0x1){
 4080bdc:	10c0041e 	bne	r2,r3,4080bf0 <SHA_7_IRQ_Handler+0x38>
		//init SHA second
		SHA_Init(SHA_7_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 7 * 4 + SHA_BLOCK_SIZE * 4,
 4080be0:	01410134 	movhi	r5,1028
 4080be4:	01800384 	movi	r6,14
 4080be8:	29416004 	addi	r5,r5,1408
 4080bec:	00000d06 	br	4080c24 <SHA_7_IRQ_Handler+0x6c>
			CTRL_NEXT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
	}else if(count7 == 0x2){
 4080bf0:	00c00084 	movi	r3,2
 4080bf4:	10c0101e 	bne	r2,r3,4080c38 <SHA_7_IRQ_Handler+0x80>
		read_digest(SHA_7_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 7 * 4 + BLOCK_HEADER_SIZE * 4);
 4080bf8:	01410134 	movhi	r5,1028
 4080bfc:	01010334 	movhi	r4,1036
 4080c00:	29417004 	addi	r5,r5,1472
 4080c04:	21070004 	addi	r4,r4,7168
 4080c08:	408024c0 	call	408024c <read_digest>
		/*-------padding for first hash--------*/
		padding_for_first_hash(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 7 * 4 + BLOCK_HEADER_SIZE * 4);
 4080c0c:	01010134 	movhi	r4,1028
 4080c10:	21017004 	addi	r4,r4,1472
 4080c14:	40807100 	call	4080710 <padding_for_first_hash>
		/*--------Start second hash--------*/
		/*--------init SHA core--------*/
		SHA_Init(SHA_7_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 7 * 4 + BLOCK_HEADER_SIZE * 4,
 4080c18:	01410134 	movhi	r5,1028
 4080c1c:	01800344 	movi	r6,13
 4080c20:	29417004 	addi	r5,r5,1472
 4080c24:	01010334 	movhi	r4,1036
 4080c28:	21070004 	addi	r4,r4,7168

	}else if(count7 == 0x3){
		flag7 = flag7 | 0x1;
		count7 = 0x0;
	}
}
 4080c2c:	dfc00017 	ldw	ra,0(sp)
 4080c30:	dec00104 	addi	sp,sp,4
		read_digest(SHA_7_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 7 * 4 + BLOCK_HEADER_SIZE * 4);
		/*-------padding for first hash--------*/
		padding_for_first_hash(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 7 * 4 + BLOCK_HEADER_SIZE * 4);
		/*--------Start second hash--------*/
		/*--------init SHA core--------*/
		SHA_Init(SHA_7_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 7 * 4 + BLOCK_HEADER_SIZE * 4,
 4080c34:	408064c1 	jmpi	408064c <SHA_Init>
		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1

	}else if(count7 == 0x3){
 4080c38:	00c000c4 	movi	r3,3
 4080c3c:	10c0041e 	bne	r2,r3,4080c50 <SHA_7_IRQ_Handler+0x98>
		flag7 = flag7 | 0x1;
 4080c40:	d0a06c17 	ldw	r2,-32336(gp)
		count7 = 0x0;
 4080c44:	d0207615 	stw	zero,-32296(gp)
		/*--------init SHA core--------*/
		SHA_Init(SHA_7_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 7 * 4 + BLOCK_HEADER_SIZE * 4,
		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1

	}else if(count7 == 0x3){
		flag7 = flag7 | 0x1;
 4080c48:	10800054 	ori	r2,r2,1
 4080c4c:	d0a06c15 	stw	r2,-32336(gp)
		count7 = 0x0;
	}
}
 4080c50:	dfc00017 	ldw	ra,0(sp)
 4080c54:	dec00104 	addi	sp,sp,4
 4080c58:	f800283a 	ret

04080c5c <SHA_8_IRQ_Handler>:

void SHA_8_IRQ_Handler(void* isr_context) {
	//clear interrupt
	write_clr_irq(SHA_8_BASE);
 4080c5c:	01010334 	movhi	r4,1036
		flag7 = flag7 | 0x1;
		count7 = 0x0;
	}
}

void SHA_8_IRQ_Handler(void* isr_context) {
 4080c60:	deffff04 	addi	sp,sp,-4
	//clear interrupt
	write_clr_irq(SHA_8_BASE);
 4080c64:	21060004 	addi	r4,r4,6144
		flag7 = flag7 | 0x1;
		count7 = 0x0;
	}
}

void SHA_8_IRQ_Handler(void* isr_context) {
 4080c68:	dfc00015 	stw	ra,0(sp)
	//clear interrupt
	write_clr_irq(SHA_8_BASE);
 4080c6c:	408020c0 	call	408020c <write_clr_irq>
	count8++;
 4080c70:	d0a07517 	ldw	r2,-32300(gp)

	if(count8 == 0x1){
 4080c74:	00c00044 	movi	r3,1
}

void SHA_8_IRQ_Handler(void* isr_context) {
	//clear interrupt
	write_clr_irq(SHA_8_BASE);
	count8++;
 4080c78:	10800044 	addi	r2,r2,1
 4080c7c:	d0a07515 	stw	r2,-32300(gp)

	if(count8 == 0x1){
 4080c80:	10c0041e 	bne	r2,r3,4080c94 <SHA_8_IRQ_Handler+0x38>
		//init SHA second
		SHA_Init(SHA_8_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 8 * 4 + SHA_BLOCK_SIZE * 4,
 4080c84:	01410134 	movhi	r5,1028
 4080c88:	01800384 	movi	r6,14
 4080c8c:	29419004 	addi	r5,r5,1600
 4080c90:	00000d06 	br	4080cc8 <SHA_8_IRQ_Handler+0x6c>
			CTRL_NEXT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
	}else if(count8 == 0x2){
 4080c94:	00c00084 	movi	r3,2
 4080c98:	10c0101e 	bne	r2,r3,4080cdc <SHA_8_IRQ_Handler+0x80>
		read_digest(SHA_8_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 8 * 4 + BLOCK_HEADER_SIZE * 4);
 4080c9c:	01410134 	movhi	r5,1028
 4080ca0:	01010334 	movhi	r4,1036
 4080ca4:	2941a004 	addi	r5,r5,1664
 4080ca8:	21060004 	addi	r4,r4,6144
 4080cac:	408024c0 	call	408024c <read_digest>
		/*-------padding for first hash--------*/
		padding_for_first_hash(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 8 * 4 + BLOCK_HEADER_SIZE * 4);
 4080cb0:	01010134 	movhi	r4,1028
 4080cb4:	2101a004 	addi	r4,r4,1664
 4080cb8:	40807100 	call	4080710 <padding_for_first_hash>
		/*--------Start second hash--------*/
		/*--------init SHA core--------*/
		SHA_Init(SHA_8_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 8 * 4 + BLOCK_HEADER_SIZE * 4,
 4080cbc:	01410134 	movhi	r5,1028
 4080cc0:	01800344 	movi	r6,13
 4080cc4:	2941a004 	addi	r5,r5,1664
 4080cc8:	01010334 	movhi	r4,1036
 4080ccc:	21060004 	addi	r4,r4,6144

	}else if(count8 == 0x3){
		flag8= flag8 | 0x1;
		count8 = 0x0;
	}
}
 4080cd0:	dfc00017 	ldw	ra,0(sp)
 4080cd4:	dec00104 	addi	sp,sp,4
		read_digest(SHA_8_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 8 * 4 + BLOCK_HEADER_SIZE * 4);
		/*-------padding for first hash--------*/
		padding_for_first_hash(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 8 * 4 + BLOCK_HEADER_SIZE * 4);
		/*--------Start second hash--------*/
		/*--------init SHA core--------*/
		SHA_Init(SHA_8_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 8 * 4 + BLOCK_HEADER_SIZE * 4,
 4080cd8:	408064c1 	jmpi	408064c <SHA_Init>
		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1

	}else if(count8 == 0x3){
 4080cdc:	00c000c4 	movi	r3,3
 4080ce0:	10c0041e 	bne	r2,r3,4080cf4 <SHA_8_IRQ_Handler+0x98>
		flag8= flag8 | 0x1;
 4080ce4:	d0a06b17 	ldw	r2,-32340(gp)
		count8 = 0x0;
 4080ce8:	d0207515 	stw	zero,-32300(gp)
		/*--------init SHA core--------*/
		SHA_Init(SHA_8_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 8 * 4 + BLOCK_HEADER_SIZE * 4,
		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1

	}else if(count8 == 0x3){
		flag8= flag8 | 0x1;
 4080cec:	10800054 	ori	r2,r2,1
 4080cf0:	d0a06b15 	stw	r2,-32340(gp)
		count8 = 0x0;
	}
}
 4080cf4:	dfc00017 	ldw	ra,0(sp)
 4080cf8:	dec00104 	addi	sp,sp,4
 4080cfc:	f800283a 	ret

04080d00 <SHA_9_IRQ_Handler>:

void SHA_9_IRQ_Handler(void* isr_context) {
	//clear interrupt
	write_clr_irq(SHA_9_BASE);
 4080d00:	01010334 	movhi	r4,1036
		flag8= flag8 | 0x1;
		count8 = 0x0;
	}
}

void SHA_9_IRQ_Handler(void* isr_context) {
 4080d04:	deffff04 	addi	sp,sp,-4
	//clear interrupt
	write_clr_irq(SHA_9_BASE);
 4080d08:	21050004 	addi	r4,r4,5120
		flag8= flag8 | 0x1;
		count8 = 0x0;
	}
}

void SHA_9_IRQ_Handler(void* isr_context) {
 4080d0c:	dfc00015 	stw	ra,0(sp)
	//clear interrupt
	write_clr_irq(SHA_9_BASE);
 4080d10:	408020c0 	call	408020c <write_clr_irq>
	count9++;
 4080d14:	d0a07417 	ldw	r2,-32304(gp)

	if(count9 == 0x1){
 4080d18:	00c00044 	movi	r3,1
}

void SHA_9_IRQ_Handler(void* isr_context) {
	//clear interrupt
	write_clr_irq(SHA_9_BASE);
	count9++;
 4080d1c:	10800044 	addi	r2,r2,1
 4080d20:	d0a07415 	stw	r2,-32304(gp)

	if(count9 == 0x1){
 4080d24:	10c0041e 	bne	r2,r3,4080d38 <SHA_9_IRQ_Handler+0x38>
		//init SHA second
		SHA_Init(SHA_9_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 9 * 4 + SHA_BLOCK_SIZE * 4,
 4080d28:	01410134 	movhi	r5,1028
 4080d2c:	01800384 	movi	r6,14
 4080d30:	2941c004 	addi	r5,r5,1792
 4080d34:	00000d06 	br	4080d6c <SHA_9_IRQ_Handler+0x6c>
			CTRL_NEXT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
	}else if(count9 == 0x2){
 4080d38:	00c00084 	movi	r3,2
 4080d3c:	10c0101e 	bne	r2,r3,4080d80 <SHA_9_IRQ_Handler+0x80>
		read_digest(SHA_9_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 9 * 4 + BLOCK_HEADER_SIZE * 4);
 4080d40:	01410134 	movhi	r5,1028
 4080d44:	01010334 	movhi	r4,1036
 4080d48:	2941d004 	addi	r5,r5,1856
 4080d4c:	21050004 	addi	r4,r4,5120
 4080d50:	408024c0 	call	408024c <read_digest>
		/*-------padding for first hash--------*/
		padding_for_first_hash(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 9 * 4 + BLOCK_HEADER_SIZE * 4);
 4080d54:	01010134 	movhi	r4,1028
 4080d58:	2101d004 	addi	r4,r4,1856
 4080d5c:	40807100 	call	4080710 <padding_for_first_hash>
		/*--------Start second hash--------*/
		/*--------init SHA core--------*/
		SHA_Init(SHA_9_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 9 * 4 + BLOCK_HEADER_SIZE * 4,
 4080d60:	01410134 	movhi	r5,1028
 4080d64:	01800344 	movi	r6,13
 4080d68:	2941d004 	addi	r5,r5,1856
 4080d6c:	01010334 	movhi	r4,1036
 4080d70:	21050004 	addi	r4,r4,5120

	}else if(count9 == 0x3){
		flag9= flag9 | 0x1;
		count9 = 0x0;
	}
}
 4080d74:	dfc00017 	ldw	ra,0(sp)
 4080d78:	dec00104 	addi	sp,sp,4
		read_digest(SHA_9_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 9 * 4 + BLOCK_HEADER_SIZE * 4);
		/*-------padding for first hash--------*/
		padding_for_first_hash(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 9 * 4 + BLOCK_HEADER_SIZE * 4);
		/*--------Start second hash--------*/
		/*--------init SHA core--------*/
		SHA_Init(SHA_9_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 9 * 4 + BLOCK_HEADER_SIZE * 4,
 4080d7c:	408064c1 	jmpi	408064c <SHA_Init>
		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1

	}else if(count9 == 0x3){
 4080d80:	00c000c4 	movi	r3,3
 4080d84:	10c0041e 	bne	r2,r3,4080d98 <SHA_9_IRQ_Handler+0x98>
		flag9= flag9 | 0x1;
 4080d88:	d0a06a17 	ldw	r2,-32344(gp)
		count9 = 0x0;
 4080d8c:	d0207415 	stw	zero,-32304(gp)
		/*--------init SHA core--------*/
		SHA_Init(SHA_9_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 9 * 4 + BLOCK_HEADER_SIZE * 4,
		CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1

	}else if(count9 == 0x3){
		flag9= flag9 | 0x1;
 4080d90:	10800054 	ori	r2,r2,1
 4080d94:	d0a06a15 	stw	r2,-32344(gp)
		count9 = 0x0;
	}
}
 4080d98:	dfc00017 	ldw	ra,0(sp)
 4080d9c:	dec00104 	addi	sp,sp,4
 4080da0:	f800283a 	ret

04080da4 <init_block_header>:

void init_block_header(unsigned int block_header[], int MEM_BASE){
 4080da4:	2805883a 	mov	r2,r5
	int NumberOfBlock = 0x0;
	/*--------padding--------*/
	NumberOfBlock = Padding_Mem(MEM_BASE, block_header, 0x50);
 4080da8:	01801404 	movi	r6,80
 4080dac:	200b883a 	mov	r5,r4
 4080db0:	1009883a 	mov	r4,r2
 4080db4:	40804641 	jmpi	4080464 <Padding_Mem>

04080db8 <main>:
}

int main() {
 4080db8:	deffab04 	addi	sp,sp,-340
	unsigned int block_header[80] = {0x00, 0xa0, 0x11, 0x2e, 0x53, 0x5d, 0x51, 0x23, 0x62, 0xf8, 0x06, 0x87, 0x51, 0x12, 0x04, 0xab, 0xed, 0x45, 0xae, 0x64, 0xcc, 0xa1, 0xa0, 0x5e, 0x82, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x93, 0x74, 0x13, 0xff, 0x6c, 0xdb, 0x14, 0xf4, 0x89, 0x33, 0xdb, 0xf2, 0x3e, 0xbb, 0xe3, 0x75, 0xde, 0x11, 0x92, 0x14, 0x34, 0x7d, 0x8a, 0x36, 0x8e, 0xac, 0x95, 0x4f, 0x94, 0xa1, 0x14, 0x1e, 0x85, 0xd8, 0x2e, 0x64, 0x3e, 0x02, 0x06, 0x17, 0x94, 0x48, 0xa8, 0x02};
 4080dbc:	01410234 	movhi	r5,1032
 4080dc0:	01805004 	movi	r6,320
 4080dc4:	294aab04 	addi	r5,r5,10924
 4080dc8:	d9000104 	addi	r4,sp,4
	int NumberOfBlock = 0x0;
	/*--------padding--------*/
	NumberOfBlock = Padding_Mem(MEM_BASE, block_header, 0x50);
}

int main() {
 4080dcc:	dfc05415 	stw	ra,336(sp)
 4080dd0:	dc805315 	stw	r18,332(sp)
 4080dd4:	dc405215 	stw	r17,328(sp)
 4080dd8:	dc005115 	stw	r16,324(sp)
	unsigned int block_header[80] = {0x00, 0xa0, 0x11, 0x2e, 0x53, 0x5d, 0x51, 0x23, 0x62, 0xf8, 0x06, 0x87, 0x51, 0x12, 0x04, 0xab, 0xed, 0x45, 0xae, 0x64, 0xcc, 0xa1, 0xa0, 0x5e, 0x82, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x93, 0x74, 0x13, 0xff, 0x6c, 0xdb, 0x14, 0xf4, 0x89, 0x33, 0xdb, 0xf2, 0x3e, 0xbb, 0xe3, 0x75, 0xde, 0x11, 0x92, 0x14, 0x34, 0x7d, 0x8a, 0x36, 0x8e, 0xac, 0x95, 0x4f, 0x94, 0xa1, 0x14, 0x1e, 0x85, 0xd8, 0x2e, 0x64, 0x3e, 0x02, 0x06, 0x17, 0x94, 0x48, 0xa8, 0x02};
 4080ddc:	4081c400 	call	4081c40 <memcpy>
	unsigned int exponent = block_header[75];
	unsigned int mantissa[3];
	unsigned int shiftNum = exponent - 3;
	unsigned int limited = 0x1;
	unsigned int limitedLoop = 0xa;
	alt_putstr("Hello from Nios II!\n");
 4080de0:	01010234 	movhi	r4,1032
 4080de4:	210a6304 	addi	r4,r4,10636
 4080de8:	40828180 	call	4082818 <alt_putstr>

	/*--------register irq with handeler--------*/
	alt_ic_isr_register(SHA_0_IRQ_INTERRUPT_CONTROLLER_ID, SHA_0_IRQ,
 4080dec:	01810234 	movhi	r6,1032
 4080df0:	000f883a 	mov	r7,zero
 4080df4:	3181cf04 	addi	r6,r6,1852
 4080df8:	01400044 	movi	r5,1
 4080dfc:	0009883a 	mov	r4,zero
 4080e00:	d8000015 	stw	zero,0(sp)
 4080e04:	40826180 	call	4082618 <alt_ic_isr_register>
			SHA_0_IRQ_Handler, (void*) 0, (void*) 0);
	alt_ic_isr_register(SHA_1_IRQ_INTERRUPT_CONTROLLER_ID, SHA_1_IRQ,
 4080e08:	01810234 	movhi	r6,1032
 4080e0c:	000f883a 	mov	r7,zero
 4080e10:	3181f804 	addi	r6,r6,2016
 4080e14:	01400084 	movi	r5,2
 4080e18:	0009883a 	mov	r4,zero
 4080e1c:	d8000015 	stw	zero,0(sp)
 4080e20:	40826180 	call	4082618 <alt_ic_isr_register>
			SHA_1_IRQ_Handler, (void*) 0, (void*) 0);
	alt_ic_isr_register(SHA_2_IRQ_INTERRUPT_CONTROLLER_ID, SHA_2_IRQ,
 4080e24:	01810234 	movhi	r6,1032
 4080e28:	000f883a 	mov	r7,zero
 4080e2c:	31822104 	addi	r6,r6,2180
 4080e30:	014000c4 	movi	r5,3
 4080e34:	0009883a 	mov	r4,zero
 4080e38:	d8000015 	stw	zero,0(sp)
 4080e3c:	40826180 	call	4082618 <alt_ic_isr_register>
			SHA_2_IRQ_Handler, (void*) 0, (void*) 0);
	alt_ic_isr_register(SHA_3_IRQ_INTERRUPT_CONTROLLER_ID, SHA_3_IRQ,
 4080e40:	01810234 	movhi	r6,1032
 4080e44:	000f883a 	mov	r7,zero
 4080e48:	31824a04 	addi	r6,r6,2344
 4080e4c:	01400104 	movi	r5,4
 4080e50:	0009883a 	mov	r4,zero
 4080e54:	d8000015 	stw	zero,0(sp)
 4080e58:	40826180 	call	4082618 <alt_ic_isr_register>
			SHA_3_IRQ_Handler, (void*) 0, (void*) 0);
	alt_ic_isr_register(SHA_4_IRQ_INTERRUPT_CONTROLLER_ID, SHA_4_IRQ,
 4080e5c:	01810234 	movhi	r6,1032
 4080e60:	000f883a 	mov	r7,zero
 4080e64:	31827304 	addi	r6,r6,2508
 4080e68:	01400144 	movi	r5,5
 4080e6c:	0009883a 	mov	r4,zero
 4080e70:	d8000015 	stw	zero,0(sp)
 4080e74:	40826180 	call	4082618 <alt_ic_isr_register>
			SHA_4_IRQ_Handler, (void*) 0, (void*) 0);
	alt_ic_isr_register(SHA_5_IRQ_INTERRUPT_CONTROLLER_ID, SHA_5_IRQ,
 4080e78:	01810234 	movhi	r6,1032
 4080e7c:	000f883a 	mov	r7,zero
 4080e80:	31829c04 	addi	r6,r6,2672
 4080e84:	01400184 	movi	r5,6
 4080e88:	0009883a 	mov	r4,zero
 4080e8c:	d8000015 	stw	zero,0(sp)
 4080e90:	40826180 	call	4082618 <alt_ic_isr_register>
			SHA_5_IRQ_Handler, (void*) 0, (void*) 0);
	alt_ic_isr_register(SHA_6_IRQ_INTERRUPT_CONTROLLER_ID, SHA_6_IRQ,
 4080e94:	01810234 	movhi	r6,1032
 4080e98:	000f883a 	mov	r7,zero
 4080e9c:	3182c504 	addi	r6,r6,2836
 4080ea0:	014001c4 	movi	r5,7
 4080ea4:	0009883a 	mov	r4,zero
 4080ea8:	d8000015 	stw	zero,0(sp)
 4080eac:	40826180 	call	4082618 <alt_ic_isr_register>
			SHA_6_IRQ_Handler, (void*) 0, (void*) 0);
	alt_ic_isr_register(SHA_7_IRQ_INTERRUPT_CONTROLLER_ID, SHA_7_IRQ,
 4080eb0:	01810234 	movhi	r6,1032
 4080eb4:	000f883a 	mov	r7,zero
 4080eb8:	3182ee04 	addi	r6,r6,3000
 4080ebc:	01400204 	movi	r5,8
 4080ec0:	0009883a 	mov	r4,zero
 4080ec4:	d8000015 	stw	zero,0(sp)
 4080ec8:	40826180 	call	4082618 <alt_ic_isr_register>
			SHA_7_IRQ_Handler, (void*) 0, (void*) 0);
	alt_ic_isr_register(SHA_8_IRQ_INTERRUPT_CONTROLLER_ID, SHA_8_IRQ,
 4080ecc:	01810234 	movhi	r6,1032
 4080ed0:	000f883a 	mov	r7,zero
 4080ed4:	31831704 	addi	r6,r6,3164
 4080ed8:	01400244 	movi	r5,9
 4080edc:	0009883a 	mov	r4,zero
 4080ee0:	d8000015 	stw	zero,0(sp)
 4080ee4:	40826180 	call	4082618 <alt_ic_isr_register>
			SHA_8_IRQ_Handler, (void*) 0, (void*) 0);
	alt_ic_isr_register(SHA_9_IRQ_INTERRUPT_CONTROLLER_ID, SHA_9_IRQ,
 4080ee8:	01810234 	movhi	r6,1032
 4080eec:	000f883a 	mov	r7,zero
 4080ef0:	31834004 	addi	r6,r6,3328
 4080ef4:	01400284 	movi	r5,10
 4080ef8:	0009883a 	mov	r4,zero
 4080efc:	d8000015 	stw	zero,0(sp)
 4080f00:	40826180 	call	4082618 <alt_ic_isr_register>
	//calculate target
		for (int i = 0; i < 3; i++) {
			mantissa[i] = block_header[74 - i];
		}
		for (int i = 0; i < 3; i++) {
			target[32 - shiftNum - 1 - i ] = mantissa[2 - i];
 4080f04:	d8804917 	ldw	r2,292(sp)
 4080f08:	01410234 	movhi	r5,1032
 4080f0c:	294bc504 	addi	r5,r5,12052
 4080f10:	28800b15 	stw	r2,44(r5)
 4080f14:	d8804a17 	ldw	r2,296(sp)
		}
	//store target into Memory
		storeTargetIntoMemory(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, target,32);
 4080f18:	01010134 	movhi	r4,1028
 4080f1c:	01800804 	movi	r6,32
	//calculate target
		for (int i = 0; i < 3; i++) {
			mantissa[i] = block_header[74 - i];
		}
		for (int i = 0; i < 3; i++) {
			target[32 - shiftNum - 1 - i ] = mantissa[2 - i];
 4080f20:	28800a15 	stw	r2,40(r5)
 4080f24:	d8804b17 	ldw	r2,300(sp)
		}
	//store target into Memory
		storeTargetIntoMemory(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, target,32);
 4080f28:	21024004 	addi	r4,r4,2304

	// init block header for core 0
		for(index = 76; index < 80 ; index++){
 4080f2c:	044013c4 	movi	r17,79
	//calculate target
		for (int i = 0; i < 3; i++) {
			mantissa[i] = block_header[74 - i];
		}
		for (int i = 0; i < 3; i++) {
			target[32 - shiftNum - 1 - i ] = mantissa[2 - i];
 4080f30:	28800915 	stw	r2,36(r5)
		}
	//store target into Memory
		storeTargetIntoMemory(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, target,32);
 4080f34:	40803f40 	call	40803f4 <storeTargetIntoMemory>

	// init block header for core 0
		for(index = 76; index < 80 ; index++){
			block_header[index] = nounce0 >> ((3 - index - 76) * 8) & 0xFF;
 4080f38:	d4a07e17 	ldw	r18,-32264(gp)
		}
	//store target into Memory
		storeTargetIntoMemory(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, target,32);

	// init block header for core 0
		for(index = 76; index < 80 ; index++){
 4080f3c:	00801304 	movi	r2,76
 4080f40:	d0a08015 	stw	r2,-32256(gp)
 4080f44:	d0a08017 	ldw	r2,-32256(gp)
 4080f48:	88801036 	bltu	r17,r2,4080f8c <main+0x1d4>
			block_header[index] = nounce0 >> ((3 - index - 76) * 8) & 0xFF;
 4080f4c:	d0a08017 	ldw	r2,-32256(gp)
 4080f50:	d1208017 	ldw	r4,-32256(gp)
 4080f54:	d8c00104 	addi	r3,sp,4
 4080f58:	1085883a 	add	r2,r2,r2
 4080f5c:	1085883a 	add	r2,r2,r2
 4080f60:	017ffe04 	movi	r5,-8
 4080f64:	18a1883a 	add	r16,r3,r2
 4080f68:	4081c180 	call	4081c18 <__mulsi3>
 4080f6c:	10bf6e04 	addi	r2,r2,-584
 4080f70:	9084d83a 	srl	r2,r18,r2
 4080f74:	10803fcc 	andi	r2,r2,255
 4080f78:	80800015 	stw	r2,0(r16)
		}
	//store target into Memory
		storeTargetIntoMemory(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, target,32);

	// init block header for core 0
		for(index = 76; index < 80 ; index++){
 4080f7c:	d0a08017 	ldw	r2,-32256(gp)
 4080f80:	10800044 	addi	r2,r2,1
 4080f84:	d0a08015 	stw	r2,-32256(gp)
 4080f88:	003fee06 	br	4080f44 <__alt_data_end+0xfffc2744>
			block_header[index] = nounce0 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE);
 4080f8c:	01410134 	movhi	r5,1028
 4080f90:	d9000104 	addi	r4,sp,4
 4080f94:	4080da40 	call	4080da4 <init_block_header>

	//init block header for core 1
		for(index = 76; index < 80 ; index++){
			block_header[index] = nounce1 >> ((3 - index - 76) * 8) & 0xFF;
 4080f98:	d4a00817 	ldw	r18,-32736(gp)
			block_header[index] = nounce0 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE);

	//init block header for core 1
		for(index = 76; index < 80 ; index++){
 4080f9c:	00801304 	movi	r2,76
 4080fa0:	d0a08015 	stw	r2,-32256(gp)
 4080fa4:	044013c4 	movi	r17,79
 4080fa8:	d0a08017 	ldw	r2,-32256(gp)
 4080fac:	88801036 	bltu	r17,r2,4080ff0 <main+0x238>
			block_header[index] = nounce1 >> ((3 - index - 76) * 8) & 0xFF;
 4080fb0:	d0a08017 	ldw	r2,-32256(gp)
 4080fb4:	d1208017 	ldw	r4,-32256(gp)
 4080fb8:	d8c00104 	addi	r3,sp,4
 4080fbc:	1085883a 	add	r2,r2,r2
 4080fc0:	1085883a 	add	r2,r2,r2
 4080fc4:	017ffe04 	movi	r5,-8
 4080fc8:	18a1883a 	add	r16,r3,r2
 4080fcc:	4081c180 	call	4081c18 <__mulsi3>
 4080fd0:	10bf6e04 	addi	r2,r2,-584
 4080fd4:	9084d83a 	srl	r2,r18,r2
 4080fd8:	10803fcc 	andi	r2,r2,255
 4080fdc:	80800015 	stw	r2,0(r16)
			block_header[index] = nounce0 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE);

	//init block header for core 1
		for(index = 76; index < 80 ; index++){
 4080fe0:	d0a08017 	ldw	r2,-32256(gp)
 4080fe4:	10800044 	addi	r2,r2,1
 4080fe8:	d0a08015 	stw	r2,-32256(gp)
 4080fec:	003fee06 	br	4080fa8 <__alt_data_end+0xfffc27a8>
			block_header[index] = nounce1 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4);
 4080ff0:	01410134 	movhi	r5,1028
 4080ff4:	29403004 	addi	r5,r5,192
 4080ff8:	d9000104 	addi	r4,sp,4
 4080ffc:	4080da40 	call	4080da4 <init_block_header>

	//init block header for core 2
		for(index = 76; index < 80 ; index++){
			block_header[index] = nounce2 >> ((3 - index - 76) * 8) & 0xFF;
 4081000:	d4a00717 	ldw	r18,-32740(gp)
			block_header[index] = nounce1 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4);

	//init block header for core 2
		for(index = 76; index < 80 ; index++){
 4081004:	00801304 	movi	r2,76
 4081008:	d0a08015 	stw	r2,-32256(gp)
 408100c:	044013c4 	movi	r17,79
 4081010:	d0a08017 	ldw	r2,-32256(gp)
 4081014:	88801036 	bltu	r17,r2,4081058 <main+0x2a0>
			block_header[index] = nounce2 >> ((3 - index - 76) * 8) & 0xFF;
 4081018:	d0a08017 	ldw	r2,-32256(gp)
 408101c:	d1208017 	ldw	r4,-32256(gp)
 4081020:	d8c00104 	addi	r3,sp,4
 4081024:	1085883a 	add	r2,r2,r2
 4081028:	1085883a 	add	r2,r2,r2
 408102c:	017ffe04 	movi	r5,-8
 4081030:	18a1883a 	add	r16,r3,r2
 4081034:	4081c180 	call	4081c18 <__mulsi3>
 4081038:	10bf6e04 	addi	r2,r2,-584
 408103c:	9084d83a 	srl	r2,r18,r2
 4081040:	10803fcc 	andi	r2,r2,255
 4081044:	80800015 	stw	r2,0(r16)
			block_header[index] = nounce1 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4);

	//init block header for core 2
		for(index = 76; index < 80 ; index++){
 4081048:	d0a08017 	ldw	r2,-32256(gp)
 408104c:	10800044 	addi	r2,r2,1
 4081050:	d0a08015 	stw	r2,-32256(gp)
 4081054:	003fee06 	br	4081010 <__alt_data_end+0xfffc2810>
			block_header[index] = nounce2 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 2 * 4);
 4081058:	01410134 	movhi	r5,1028
 408105c:	29406004 	addi	r5,r5,384
 4081060:	d9000104 	addi	r4,sp,4
 4081064:	4080da40 	call	4080da4 <init_block_header>

	//init block header for core 3
		for(index = 76; index < 80 ; index++){
			block_header[index] = nounce3 >> ((3 - index - 76) * 8) & 0xFF;
 4081068:	d4a00617 	ldw	r18,-32744(gp)
			block_header[index] = nounce2 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 2 * 4);

	//init block header for core 3
		for(index = 76; index < 80 ; index++){
 408106c:	00801304 	movi	r2,76
 4081070:	d0a08015 	stw	r2,-32256(gp)
 4081074:	044013c4 	movi	r17,79
 4081078:	d0a08017 	ldw	r2,-32256(gp)
 408107c:	88801036 	bltu	r17,r2,40810c0 <main+0x308>
			block_header[index] = nounce3 >> ((3 - index - 76) * 8) & 0xFF;
 4081080:	d0a08017 	ldw	r2,-32256(gp)
 4081084:	d1208017 	ldw	r4,-32256(gp)
 4081088:	d8c00104 	addi	r3,sp,4
 408108c:	1085883a 	add	r2,r2,r2
 4081090:	1085883a 	add	r2,r2,r2
 4081094:	017ffe04 	movi	r5,-8
 4081098:	18a1883a 	add	r16,r3,r2
 408109c:	4081c180 	call	4081c18 <__mulsi3>
 40810a0:	10bf6e04 	addi	r2,r2,-584
 40810a4:	9084d83a 	srl	r2,r18,r2
 40810a8:	10803fcc 	andi	r2,r2,255
 40810ac:	80800015 	stw	r2,0(r16)
			block_header[index] = nounce2 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 2 * 4);

	//init block header for core 3
		for(index = 76; index < 80 ; index++){
 40810b0:	d0a08017 	ldw	r2,-32256(gp)
 40810b4:	10800044 	addi	r2,r2,1
 40810b8:	d0a08015 	stw	r2,-32256(gp)
 40810bc:	003fee06 	br	4081078 <__alt_data_end+0xfffc2878>
			block_header[index] = nounce3 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 3 * 4);
 40810c0:	01410134 	movhi	r5,1028
 40810c4:	29409004 	addi	r5,r5,576
 40810c8:	d9000104 	addi	r4,sp,4
 40810cc:	4080da40 	call	4080da4 <init_block_header>

	//init block header for core 4
		for(index = 76; index < 80 ; index++){
			block_header[index] = nounce4 >> ((3 - index - 76) * 8) & 0xFF;
 40810d0:	d4a00517 	ldw	r18,-32748(gp)
			block_header[index] = nounce3 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 3 * 4);

	//init block header for core 4
		for(index = 76; index < 80 ; index++){
 40810d4:	00801304 	movi	r2,76
 40810d8:	d0a08015 	stw	r2,-32256(gp)
 40810dc:	044013c4 	movi	r17,79
 40810e0:	d0a08017 	ldw	r2,-32256(gp)
 40810e4:	88801036 	bltu	r17,r2,4081128 <main+0x370>
			block_header[index] = nounce4 >> ((3 - index - 76) * 8) & 0xFF;
 40810e8:	d0a08017 	ldw	r2,-32256(gp)
 40810ec:	d1208017 	ldw	r4,-32256(gp)
 40810f0:	d8c00104 	addi	r3,sp,4
 40810f4:	1085883a 	add	r2,r2,r2
 40810f8:	1085883a 	add	r2,r2,r2
 40810fc:	017ffe04 	movi	r5,-8
 4081100:	18a1883a 	add	r16,r3,r2
 4081104:	4081c180 	call	4081c18 <__mulsi3>
 4081108:	10bf6e04 	addi	r2,r2,-584
 408110c:	9084d83a 	srl	r2,r18,r2
 4081110:	10803fcc 	andi	r2,r2,255
 4081114:	80800015 	stw	r2,0(r16)
			block_header[index] = nounce3 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 3 * 4);

	//init block header for core 4
		for(index = 76; index < 80 ; index++){
 4081118:	d0a08017 	ldw	r2,-32256(gp)
 408111c:	10800044 	addi	r2,r2,1
 4081120:	d0a08015 	stw	r2,-32256(gp)
 4081124:	003fee06 	br	40810e0 <__alt_data_end+0xfffc28e0>
			block_header[index] = nounce4 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 * 4);
 4081128:	01410134 	movhi	r5,1028
 408112c:	2940c004 	addi	r5,r5,768
 4081130:	d9000104 	addi	r4,sp,4
 4081134:	4080da40 	call	4080da4 <init_block_header>

	//init block header for core 5
		for(index = 76; index < 80 ; index++){
			block_header[index] = nounce5 >> ((3 - index - 76) * 8) & 0xFF;
 4081138:	d4a00417 	ldw	r18,-32752(gp)
			block_header[index] = nounce4 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 * 4);

	//init block header for core 5
		for(index = 76; index < 80 ; index++){
 408113c:	00801304 	movi	r2,76
 4081140:	d0a08015 	stw	r2,-32256(gp)
 4081144:	044013c4 	movi	r17,79
 4081148:	d0a08017 	ldw	r2,-32256(gp)
 408114c:	88801036 	bltu	r17,r2,4081190 <main+0x3d8>
			block_header[index] = nounce5 >> ((3 - index - 76) * 8) & 0xFF;
 4081150:	d0a08017 	ldw	r2,-32256(gp)
 4081154:	d1208017 	ldw	r4,-32256(gp)
 4081158:	d8c00104 	addi	r3,sp,4
 408115c:	1085883a 	add	r2,r2,r2
 4081160:	1085883a 	add	r2,r2,r2
 4081164:	017ffe04 	movi	r5,-8
 4081168:	18a1883a 	add	r16,r3,r2
 408116c:	4081c180 	call	4081c18 <__mulsi3>
 4081170:	10bf6e04 	addi	r2,r2,-584
 4081174:	9084d83a 	srl	r2,r18,r2
 4081178:	10803fcc 	andi	r2,r2,255
 408117c:	80800015 	stw	r2,0(r16)
			block_header[index] = nounce4 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 * 4);

	//init block header for core 5
		for(index = 76; index < 80 ; index++){
 4081180:	d0a08017 	ldw	r2,-32256(gp)
 4081184:	10800044 	addi	r2,r2,1
 4081188:	d0a08015 	stw	r2,-32256(gp)
 408118c:	003fee06 	br	4081148 <__alt_data_end+0xfffc2948>
			block_header[index] = nounce5 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 5 * 4);
 4081190:	01410134 	movhi	r5,1028
 4081194:	2940f004 	addi	r5,r5,960
 4081198:	d9000104 	addi	r4,sp,4
 408119c:	4080da40 	call	4080da4 <init_block_header>

	//init block header for core 6
		for(index = 76; index < 80 ; index++){
			block_header[index] = nounce6 >> ((3 - index - 76) * 8) & 0xFF;
 40811a0:	d4a00317 	ldw	r18,-32756(gp)
			block_header[index] = nounce5 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 5 * 4);

	//init block header for core 6
		for(index = 76; index < 80 ; index++){
 40811a4:	00801304 	movi	r2,76
 40811a8:	d0a08015 	stw	r2,-32256(gp)
 40811ac:	044013c4 	movi	r17,79
 40811b0:	d0a08017 	ldw	r2,-32256(gp)
 40811b4:	88801036 	bltu	r17,r2,40811f8 <main+0x440>
			block_header[index] = nounce6 >> ((3 - index - 76) * 8) & 0xFF;
 40811b8:	d0a08017 	ldw	r2,-32256(gp)
 40811bc:	d1208017 	ldw	r4,-32256(gp)
 40811c0:	d8c00104 	addi	r3,sp,4
 40811c4:	1085883a 	add	r2,r2,r2
 40811c8:	1085883a 	add	r2,r2,r2
 40811cc:	017ffe04 	movi	r5,-8
 40811d0:	18a1883a 	add	r16,r3,r2
 40811d4:	4081c180 	call	4081c18 <__mulsi3>
 40811d8:	10bf6e04 	addi	r2,r2,-584
 40811dc:	9084d83a 	srl	r2,r18,r2
 40811e0:	10803fcc 	andi	r2,r2,255
 40811e4:	80800015 	stw	r2,0(r16)
			block_header[index] = nounce5 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 5 * 4);

	//init block header for core 6
		for(index = 76; index < 80 ; index++){
 40811e8:	d0a08017 	ldw	r2,-32256(gp)
 40811ec:	10800044 	addi	r2,r2,1
 40811f0:	d0a08015 	stw	r2,-32256(gp)
 40811f4:	003fee06 	br	40811b0 <__alt_data_end+0xfffc29b0>
			block_header[index] = nounce6 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 6 * 4);
 40811f8:	01410134 	movhi	r5,1028
 40811fc:	29412004 	addi	r5,r5,1152
 4081200:	d9000104 	addi	r4,sp,4
 4081204:	4080da40 	call	4080da4 <init_block_header>

	//init block header for core 7
		for(index = 76; index < 80 ; index++){
			block_header[index] = nounce7 >> ((3 - index - 76) * 8) & 0xFF;
 4081208:	d4a00217 	ldw	r18,-32760(gp)
			block_header[index] = nounce6 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 6 * 4);

	//init block header for core 7
		for(index = 76; index < 80 ; index++){
 408120c:	00801304 	movi	r2,76
 4081210:	d0a08015 	stw	r2,-32256(gp)
 4081214:	044013c4 	movi	r17,79
 4081218:	d0a08017 	ldw	r2,-32256(gp)
 408121c:	88801036 	bltu	r17,r2,4081260 <main+0x4a8>
			block_header[index] = nounce7 >> ((3 - index - 76) * 8) & 0xFF;
 4081220:	d0a08017 	ldw	r2,-32256(gp)
 4081224:	d1208017 	ldw	r4,-32256(gp)
 4081228:	d8c00104 	addi	r3,sp,4
 408122c:	1085883a 	add	r2,r2,r2
 4081230:	1085883a 	add	r2,r2,r2
 4081234:	017ffe04 	movi	r5,-8
 4081238:	18a1883a 	add	r16,r3,r2
 408123c:	4081c180 	call	4081c18 <__mulsi3>
 4081240:	10bf6e04 	addi	r2,r2,-584
 4081244:	9084d83a 	srl	r2,r18,r2
 4081248:	10803fcc 	andi	r2,r2,255
 408124c:	80800015 	stw	r2,0(r16)
			block_header[index] = nounce6 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 6 * 4);

	//init block header for core 7
		for(index = 76; index < 80 ; index++){
 4081250:	d0a08017 	ldw	r2,-32256(gp)
 4081254:	10800044 	addi	r2,r2,1
 4081258:	d0a08015 	stw	r2,-32256(gp)
 408125c:	003fee06 	br	4081218 <__alt_data_end+0xfffc2a18>
			block_header[index] = nounce7 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 7 * 4);
 4081260:	01410134 	movhi	r5,1028
 4081264:	29415004 	addi	r5,r5,1344
 4081268:	d9000104 	addi	r4,sp,4
 408126c:	4080da40 	call	4080da4 <init_block_header>

	//init block header for core 8
		for(index = 76; index < 80 ; index++){
			block_header[index] = nounce8 >> ((3 - index - 76) * 8) & 0xFF;
 4081270:	d4a00117 	ldw	r18,-32764(gp)
			block_header[index] = nounce7 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 7 * 4);

	//init block header for core 8
		for(index = 76; index < 80 ; index++){
 4081274:	00801304 	movi	r2,76
 4081278:	d0a08015 	stw	r2,-32256(gp)
 408127c:	044013c4 	movi	r17,79
 4081280:	d0a08017 	ldw	r2,-32256(gp)
 4081284:	88801036 	bltu	r17,r2,40812c8 <main+0x510>
			block_header[index] = nounce8 >> ((3 - index - 76) * 8) & 0xFF;
 4081288:	d0a08017 	ldw	r2,-32256(gp)
 408128c:	d1208017 	ldw	r4,-32256(gp)
 4081290:	d8c00104 	addi	r3,sp,4
 4081294:	1085883a 	add	r2,r2,r2
 4081298:	1085883a 	add	r2,r2,r2
 408129c:	017ffe04 	movi	r5,-8
 40812a0:	18a1883a 	add	r16,r3,r2
 40812a4:	4081c180 	call	4081c18 <__mulsi3>
 40812a8:	10bf6e04 	addi	r2,r2,-584
 40812ac:	9084d83a 	srl	r2,r18,r2
 40812b0:	10803fcc 	andi	r2,r2,255
 40812b4:	80800015 	stw	r2,0(r16)
			block_header[index] = nounce7 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 7 * 4);

	//init block header for core 8
		for(index = 76; index < 80 ; index++){
 40812b8:	d0a08017 	ldw	r2,-32256(gp)
 40812bc:	10800044 	addi	r2,r2,1
 40812c0:	d0a08015 	stw	r2,-32256(gp)
 40812c4:	003fee06 	br	4081280 <__alt_data_end+0xfffc2a80>
			block_header[index] = nounce8 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 8 * 4);
 40812c8:	01410134 	movhi	r5,1028
 40812cc:	29418004 	addi	r5,r5,1536
 40812d0:	d9000104 	addi	r4,sp,4
 40812d4:	4080da40 	call	4080da4 <init_block_header>

	//init block header for core 9
		for(index = 76; index < 80 ; index++){
			block_header[index] = nounce9 >> ((3 - index - 76) * 8) & 0xFF;
 40812d8:	d4a00017 	ldw	r18,-32768(gp)
			block_header[index] = nounce8 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 8 * 4);

	//init block header for core 9
		for(index = 76; index < 80 ; index++){
 40812dc:	00801304 	movi	r2,76
 40812e0:	d0a08015 	stw	r2,-32256(gp)
 40812e4:	044013c4 	movi	r17,79
 40812e8:	d0a08017 	ldw	r2,-32256(gp)
 40812ec:	88801036 	bltu	r17,r2,4081330 <main+0x578>
			block_header[index] = nounce9 >> ((3 - index - 76) * 8) & 0xFF;
 40812f0:	d0a08017 	ldw	r2,-32256(gp)
 40812f4:	d1208017 	ldw	r4,-32256(gp)
 40812f8:	d8c00104 	addi	r3,sp,4
 40812fc:	1085883a 	add	r2,r2,r2
 4081300:	1085883a 	add	r2,r2,r2
 4081304:	017ffe04 	movi	r5,-8
 4081308:	18a1883a 	add	r16,r3,r2
 408130c:	4081c180 	call	4081c18 <__mulsi3>
 4081310:	10bf6e04 	addi	r2,r2,-584
 4081314:	9084d83a 	srl	r2,r18,r2
 4081318:	10803fcc 	andi	r2,r2,255
 408131c:	80800015 	stw	r2,0(r16)
			block_header[index] = nounce8 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 8 * 4);

	//init block header for core 9
		for(index = 76; index < 80 ; index++){
 4081320:	d0a08017 	ldw	r2,-32256(gp)
 4081324:	10800044 	addi	r2,r2,1
 4081328:	d0a08015 	stw	r2,-32256(gp)
 408132c:	003fee06 	br	40812e8 <__alt_data_end+0xfffc2ae8>
			block_header[index] = nounce9 >> ((3 - index - 76) * 8) & 0xFF;
		}
		init_block_header(block_header, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 9 * 4);
 4081330:	01410134 	movhi	r5,1028
 4081334:	2941b004 	addi	r5,r5,1728
 4081338:	d9000104 	addi	r4,sp,4
 408133c:	4080da40 	call	4080da4 <init_block_header>
//		//	init Core 5
//		SHA_Init(SHA_5_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 5 * 4,
//				CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
//
		//	init Core 6
		SHA_Init(SHA_6_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 6 * 4,
 4081340:	01410134 	movhi	r5,1028
 4081344:	01010334 	movhi	r4,1036
 4081348:	21080004 	addi	r4,r4,8192
 408134c:	01800344 	movi	r6,13
 4081350:	29412004 	addi	r5,r5,1152
 4081354:	408064c0 	call	408064c <SHA_Init>
//				CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
//
//		//	init Core 9
//		SHA_Init(SHA_9_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 9 * 4,
//				CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
		printf("Start Mining...\n");
 4081358:	01010234 	movhi	r4,1032
 408135c:	210a6904 	addi	r4,r4,10660
 4081360:	4081d700 	call	4081d70 <puts>
		while(1){
		if ((flag0 & 0x1) == 1) {
 4081364:	d0a07317 	ldw	r2,-32308(gp)
 4081368:	1080004c 	andi	r2,r2,1
 408136c:	10003326 	beq	r2,zero,408143c <main+0x684>
			read_digest(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE + BLOCK_HEADER_SIZE * 4);
 4081370:	01410134 	movhi	r5,1028
 4081374:	01010334 	movhi	r4,1036
 4081378:	29402004 	addi	r5,r5,128
 408137c:	210e0004 	addi	r4,r4,14336
 4081380:	408024c0 	call	408024c <read_digest>
			//reverse_byte
			reverse_byte_in_memory(ONCHIP_MEMORY2_1_BASE + BLOCK_HEADER_SIZE * 4, 0x8);
 4081384:	01010134 	movhi	r4,1028
 4081388:	01400204 	movi	r5,8
 408138c:	21002004 	addi	r4,r4,128
 4081390:	40806900 	call	4080690 <reverse_byte_in_memory>
			if(compareWithTarget(ONCHIP_MEMORY2_1_BASE + BLOCK_HEADER_SIZE * 4, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, 0x8)){
 4081394:	01410134 	movhi	r5,1028
 4081398:	01010134 	movhi	r4,1028
 408139c:	01800204 	movi	r6,8
 40813a0:	29424004 	addi	r5,r5,2304
 40813a4:	21002004 	addi	r4,r4,128
 40813a8:	40806d40 	call	40806d4 <compareWithTarget>
 40813ac:	10001826 	beq	r2,zero,4081410 <main+0x658>
						printf("\nCORE: SHA_0\n ");
 40813b0:	01010234 	movhi	r4,1032
 40813b4:	210a6d04 	addi	r4,r4,10676
 40813b8:	4081ca40 	call	4081ca4 <printf>
						printf("\nSUCCESS\nDigest Valid\n");
 40813bc:	01010234 	movhi	r4,1032
 40813c0:	210a7104 	addi	r4,r4,10692
 40813c4:	4081d700 	call	4081d70 <puts>
						printf("Nounce = %x \n",nounce0);
 40813c8:	d1607e17 	ldw	r5,-32264(gp)
 40813cc:	01010234 	movhi	r4,1032
 40813d0:	210a7704 	addi	r4,r4,10716
 40813d4:	4081ca40 	call	4081ca4 <printf>
						printf("Final Hash: 0x");
 40813d8:	01010234 	movhi	r4,1032
 40813dc:	210a7b04 	addi	r4,r4,10732
 40813e0:	4081ca40 	call	4081ca4 <printf>
 40813e4:	04002704 	movi	r16,156
						for (unsigned int index = 0; index < 0x8; index++) {
 40813e8:	04401f04 	movi	r17,124
							printf("%.8x",*(memory_ptr + 32 + (7 - index)));
 40813ec:	d0a01317 	ldw	r2,-32692(gp)
 40813f0:	01010234 	movhi	r4,1032
 40813f4:	210a7f04 	addi	r4,r4,10748
 40813f8:	1405883a 	add	r2,r2,r16
 40813fc:	11400017 	ldw	r5,0(r2)
 4081400:	843fff04 	addi	r16,r16,-4
 4081404:	4081ca40 	call	4081ca4 <printf>
			if(compareWithTarget(ONCHIP_MEMORY2_1_BASE + BLOCK_HEADER_SIZE * 4, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, 0x8)){
						printf("\nCORE: SHA_0\n ");
						printf("\nSUCCESS\nDigest Valid\n");
						printf("Nounce = %x \n",nounce0);
						printf("Final Hash: 0x");
						for (unsigned int index = 0; index < 0x8; index++) {
 4081408:	847ff81e 	bne	r16,r17,40813ec <__alt_data_end+0xfffc2bec>
 408140c:	0001fb06 	br	4081bfc <main+0xe44>
						break;
			}else {
//						printf("\nCORE: SHA_0\n ");
//						printf("Nounce = %x \n", nounce0);
//						printf("Digest invalid!!!\n\n");
						nounce0++;
 4081410:	d0a07e17 	ldw	r2,-32264(gp)
						*(memory_ptr + 19) = nounce0;
 4081414:	d0e01317 	ldw	r3,-32692(gp)
						SHA_Init(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE,
 4081418:	01010334 	movhi	r4,1036
						break;
			}else {
//						printf("\nCORE: SHA_0\n ");
//						printf("Nounce = %x \n", nounce0);
//						printf("Digest invalid!!!\n\n");
						nounce0++;
 408141c:	10800044 	addi	r2,r2,1
						*(memory_ptr + 19) = nounce0;
 4081420:	18801315 	stw	r2,76(r3)
						SHA_Init(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE,
 4081424:	01800344 	movi	r6,13
 4081428:	01410134 	movhi	r5,1028
 408142c:	210e0004 	addi	r4,r4,14336
						break;
			}else {
//						printf("\nCORE: SHA_0\n ");
//						printf("Nounce = %x \n", nounce0);
//						printf("Digest invalid!!!\n\n");
						nounce0++;
 4081430:	d0a07e15 	stw	r2,-32264(gp)
						*(memory_ptr + 19) = nounce0;
						SHA_Init(SHA_0_BASE, ONCHIP_MEMORY2_1_BASE,
 4081434:	408064c0 	call	408064c <SHA_Init>
								CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
			}
			flag0 = 0x0;
 4081438:	d0207315 	stw	zero,-32308(gp)
		}
		if ((flag1 & 0x1) == 1) {
 408143c:	d0a07217 	ldw	r2,-32312(gp)
 4081440:	1080004c 	andi	r2,r2,1
 4081444:	10003426 	beq	r2,zero,4081518 <main+0x760>
			read_digest(SHA_1_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 + BLOCK_HEADER_SIZE * 4);
 4081448:	01410134 	movhi	r5,1028
 408144c:	01010334 	movhi	r4,1036
 4081450:	29405004 	addi	r5,r5,320
 4081454:	210d0004 	addi	r4,r4,13312
 4081458:	408024c0 	call	408024c <read_digest>
			//reverse_byte
			reverse_byte_in_memory(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 + BLOCK_HEADER_SIZE * 4, 0x8);
 408145c:	01010134 	movhi	r4,1028
 4081460:	01400204 	movi	r5,8
 4081464:	21005004 	addi	r4,r4,320
 4081468:	40806900 	call	4080690 <reverse_byte_in_memory>
			if(compareWithTarget(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 + BLOCK_HEADER_SIZE * 4, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, 0x8)){
 408146c:	01410134 	movhi	r5,1028
 4081470:	01010134 	movhi	r4,1028
 4081474:	01800204 	movi	r6,8
 4081478:	29424004 	addi	r5,r5,2304
 408147c:	21005004 	addi	r4,r4,320
 4081480:	40806d40 	call	40806d4 <compareWithTarget>
 4081484:	10001826 	beq	r2,zero,40814e8 <main+0x730>
				printf("\nCORE: SHA_1\n ");
 4081488:	01010234 	movhi	r4,1032
 408148c:	210a8104 	addi	r4,r4,10756
 4081490:	4081ca40 	call	4081ca4 <printf>
				printf("\nSUCCESS\nDigest Valid\n ");
 4081494:	01010234 	movhi	r4,1032
 4081498:	210a8504 	addi	r4,r4,10772
 408149c:	4081ca40 	call	4081ca4 <printf>
				printf("Nounce = %x \n",nounce1);
 40814a0:	d1600817 	ldw	r5,-32736(gp)
 40814a4:	01010234 	movhi	r4,1032
 40814a8:	210a7704 	addi	r4,r4,10716
 40814ac:	4081ca40 	call	4081ca4 <printf>
				printf("Final Hash: 0x");
 40814b0:	01010234 	movhi	r4,1032
 40814b4:	210a7b04 	addi	r4,r4,10732
 40814b8:	4081ca40 	call	4081ca4 <printf>
 40814bc:	04002704 	movi	r16,156
				for (unsigned int index = 0; index < 0x8; index++) {
 40814c0:	04401f04 	movi	r17,124
					printf("%.8x",*(mem_base1 + 32 + (7 - index)));
 40814c4:	d0a01217 	ldw	r2,-32696(gp)
 40814c8:	01010234 	movhi	r4,1032
 40814cc:	210a7f04 	addi	r4,r4,10748
 40814d0:	1405883a 	add	r2,r2,r16
 40814d4:	11400017 	ldw	r5,0(r2)
 40814d8:	843fff04 	addi	r16,r16,-4
 40814dc:	4081ca40 	call	4081ca4 <printf>
			if(compareWithTarget(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 + BLOCK_HEADER_SIZE * 4, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, 0x8)){
				printf("\nCORE: SHA_1\n ");
				printf("\nSUCCESS\nDigest Valid\n ");
				printf("Nounce = %x \n",nounce1);
				printf("Final Hash: 0x");
				for (unsigned int index = 0; index < 0x8; index++) {
 40814e0:	847ff81e 	bne	r16,r17,40814c4 <__alt_data_end+0xfffc2cc4>
 40814e4:	0001c506 	br	4081bfc <main+0xe44>
				break;
			}else {
//						printf("\nCORE: SHA_1\n ");
//				printf("Nounce = %x \n",nounce1);
//				printf("Digest invalid!!!\n\n");
				nounce1++;
 40814e8:	d0a00817 	ldw	r2,-32736(gp)
				*(mem_base1 + 19) = nounce1;
 40814ec:	d0e01217 	ldw	r3,-32696(gp)
				SHA_Init(SHA_1_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4,
 40814f0:	01410134 	movhi	r5,1028
				break;
			}else {
//						printf("\nCORE: SHA_1\n ");
//				printf("Nounce = %x \n",nounce1);
//				printf("Digest invalid!!!\n\n");
				nounce1++;
 40814f4:	10800044 	addi	r2,r2,1
				*(mem_base1 + 19) = nounce1;
				SHA_Init(SHA_1_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4,
 40814f8:	01010334 	movhi	r4,1036
			}else {
//						printf("\nCORE: SHA_1\n ");
//				printf("Nounce = %x \n",nounce1);
//				printf("Digest invalid!!!\n\n");
				nounce1++;
				*(mem_base1 + 19) = nounce1;
 40814fc:	18801315 	stw	r2,76(r3)
				SHA_Init(SHA_1_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4,
 4081500:	01800344 	movi	r6,13
 4081504:	29403004 	addi	r5,r5,192
 4081508:	210d0004 	addi	r4,r4,13312
				break;
			}else {
//						printf("\nCORE: SHA_1\n ");
//				printf("Nounce = %x \n",nounce1);
//				printf("Digest invalid!!!\n\n");
				nounce1++;
 408150c:	d0a00815 	stw	r2,-32736(gp)
				*(mem_base1 + 19) = nounce1;
				SHA_Init(SHA_1_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4,
 4081510:	408064c0 	call	408064c <SHA_Init>
				CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
			}
			flag1 = 0x0;
 4081514:	d0207215 	stw	zero,-32312(gp)
		}
		if ((flag2 & 0x1) == 1) {
 4081518:	d0a07117 	ldw	r2,-32316(gp)
 408151c:	1080004c 	andi	r2,r2,1
 4081520:	10003426 	beq	r2,zero,40815f4 <main+0x83c>
			read_digest(SHA_2_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 2 * 4 + BLOCK_HEADER_SIZE * 4);
 4081524:	01410134 	movhi	r5,1028
 4081528:	01010334 	movhi	r4,1036
 408152c:	29408004 	addi	r5,r5,512
 4081530:	210c0004 	addi	r4,r4,12288
 4081534:	408024c0 	call	408024c <read_digest>
			//reverse_byte
			reverse_byte_in_memory(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 2 * 4 + BLOCK_HEADER_SIZE * 4, 0x8);
 4081538:	01010134 	movhi	r4,1028
 408153c:	01400204 	movi	r5,8
 4081540:	21008004 	addi	r4,r4,512
 4081544:	40806900 	call	4080690 <reverse_byte_in_memory>
			if(compareWithTarget(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 2 * 4 + BLOCK_HEADER_SIZE * 4, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, 0x8)){
 4081548:	01410134 	movhi	r5,1028
 408154c:	01010134 	movhi	r4,1028
 4081550:	01800204 	movi	r6,8
 4081554:	29424004 	addi	r5,r5,2304
 4081558:	21008004 	addi	r4,r4,512
 408155c:	40806d40 	call	40806d4 <compareWithTarget>
 4081560:	10001826 	beq	r2,zero,40815c4 <main+0x80c>
				printf("\nCORE: SHA_2\n ");
 4081564:	01010234 	movhi	r4,1032
 4081568:	210a8b04 	addi	r4,r4,10796
 408156c:	4081ca40 	call	4081ca4 <printf>
				printf("\nSUCCESS\nDigest Valid\n ");
 4081570:	01010234 	movhi	r4,1032
 4081574:	210a8504 	addi	r4,r4,10772
 4081578:	4081ca40 	call	4081ca4 <printf>
				printf("Nounce = %x \n",nounce2);
 408157c:	d1600717 	ldw	r5,-32740(gp)
 4081580:	01010234 	movhi	r4,1032
 4081584:	210a7704 	addi	r4,r4,10716
 4081588:	4081ca40 	call	4081ca4 <printf>
				printf("Final Hash: 0x");
 408158c:	01010234 	movhi	r4,1032
 4081590:	210a7b04 	addi	r4,r4,10732
 4081594:	4081ca40 	call	4081ca4 <printf>
 4081598:	04002704 	movi	r16,156
				for (unsigned int index = 0; index < 0x8; index++) {
 408159c:	04401f04 	movi	r17,124
					printf("%.8x",*(mem_base2 + 32 + (7 - index)));
 40815a0:	d0a01117 	ldw	r2,-32700(gp)
 40815a4:	01010234 	movhi	r4,1032
 40815a8:	210a7f04 	addi	r4,r4,10748
 40815ac:	1405883a 	add	r2,r2,r16
 40815b0:	11400017 	ldw	r5,0(r2)
 40815b4:	843fff04 	addi	r16,r16,-4
 40815b8:	4081ca40 	call	4081ca4 <printf>
			if(compareWithTarget(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 2 * 4 + BLOCK_HEADER_SIZE * 4, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, 0x8)){
				printf("\nCORE: SHA_2\n ");
				printf("\nSUCCESS\nDigest Valid\n ");
				printf("Nounce = %x \n",nounce2);
				printf("Final Hash: 0x");
				for (unsigned int index = 0; index < 0x8; index++) {
 40815bc:	847ff81e 	bne	r16,r17,40815a0 <__alt_data_end+0xfffc2da0>
 40815c0:	00018e06 	br	4081bfc <main+0xe44>
				break;
			}else {
//						printf("\nCORE: SHA_2\n ");
//				printf("Nounce = %x \n",nounce2);
//				printf("Digest invalid!!!\n\n");
				nounce2++;
 40815c4:	d0a00717 	ldw	r2,-32740(gp)
				*(mem_base2 + 19) = nounce2;
 40815c8:	d0e01117 	ldw	r3,-32700(gp)
				SHA_Init(SHA_2_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 2 * 4,
 40815cc:	01410134 	movhi	r5,1028
				break;
			}else {
//						printf("\nCORE: SHA_2\n ");
//				printf("Nounce = %x \n",nounce2);
//				printf("Digest invalid!!!\n\n");
				nounce2++;
 40815d0:	10800044 	addi	r2,r2,1
				*(mem_base2 + 19) = nounce2;
				SHA_Init(SHA_2_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 2 * 4,
 40815d4:	01010334 	movhi	r4,1036
			}else {
//						printf("\nCORE: SHA_2\n ");
//				printf("Nounce = %x \n",nounce2);
//				printf("Digest invalid!!!\n\n");
				nounce2++;
				*(mem_base2 + 19) = nounce2;
 40815d8:	18801315 	stw	r2,76(r3)
				SHA_Init(SHA_2_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 2 * 4,
 40815dc:	01800344 	movi	r6,13
 40815e0:	29406004 	addi	r5,r5,384
 40815e4:	210c0004 	addi	r4,r4,12288
				break;
			}else {
//						printf("\nCORE: SHA_2\n ");
//				printf("Nounce = %x \n",nounce2);
//				printf("Digest invalid!!!\n\n");
				nounce2++;
 40815e8:	d0a00715 	stw	r2,-32740(gp)
				*(mem_base2 + 19) = nounce2;
				SHA_Init(SHA_2_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 2 * 4,
 40815ec:	408064c0 	call	408064c <SHA_Init>
				CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
			}
			flag2 = 0x0;
 40815f0:	d0207115 	stw	zero,-32316(gp)
		}
		if ((flag3 & 0x1) == 1) {
 40815f4:	d0a07017 	ldw	r2,-32320(gp)
 40815f8:	1080004c 	andi	r2,r2,1
 40815fc:	10003426 	beq	r2,zero,40816d0 <main+0x918>
			read_digest(SHA_3_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 3 * 4 + BLOCK_HEADER_SIZE * 4);
 4081600:	01410134 	movhi	r5,1028
 4081604:	01010334 	movhi	r4,1036
 4081608:	2940b004 	addi	r5,r5,704
 408160c:	210b0004 	addi	r4,r4,11264
 4081610:	408024c0 	call	408024c <read_digest>
			//reverse_byte
			reverse_byte_in_memory(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 3 * 4 + BLOCK_HEADER_SIZE * 4, 0x8);
 4081614:	01010134 	movhi	r4,1028
 4081618:	01400204 	movi	r5,8
 408161c:	2100b004 	addi	r4,r4,704
 4081620:	40806900 	call	4080690 <reverse_byte_in_memory>
			if(compareWithTarget(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 3 * 4 + BLOCK_HEADER_SIZE * 4, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, 0x8)){
 4081624:	01410134 	movhi	r5,1028
 4081628:	01010134 	movhi	r4,1028
 408162c:	01800204 	movi	r6,8
 4081630:	29424004 	addi	r5,r5,2304
 4081634:	2100b004 	addi	r4,r4,704
 4081638:	40806d40 	call	40806d4 <compareWithTarget>
 408163c:	10001826 	beq	r2,zero,40816a0 <main+0x8e8>
				printf("\nCORE: SHA_3\n ");
 4081640:	01010234 	movhi	r4,1032
 4081644:	210a8f04 	addi	r4,r4,10812
 4081648:	4081ca40 	call	4081ca4 <printf>
				printf("\nSUCCESS\nDigest Valid\n ");
 408164c:	01010234 	movhi	r4,1032
 4081650:	210a8504 	addi	r4,r4,10772
 4081654:	4081ca40 	call	4081ca4 <printf>
				printf("Nounce = %x \n",nounce3);
 4081658:	d1600617 	ldw	r5,-32744(gp)
 408165c:	01010234 	movhi	r4,1032
 4081660:	210a7704 	addi	r4,r4,10716
 4081664:	4081ca40 	call	4081ca4 <printf>
				printf("Final Hash: 0x");
 4081668:	01010234 	movhi	r4,1032
 408166c:	210a7b04 	addi	r4,r4,10732
 4081670:	4081ca40 	call	4081ca4 <printf>
 4081674:	04002704 	movi	r16,156
				for (unsigned int index = 0; index < 0x8; index++) {
 4081678:	04401f04 	movi	r17,124
					printf("%.8x",*(mem_base3 + 32 + (7 - index)));
 408167c:	d0a01017 	ldw	r2,-32704(gp)
 4081680:	01010234 	movhi	r4,1032
 4081684:	210a7f04 	addi	r4,r4,10748
 4081688:	1405883a 	add	r2,r2,r16
 408168c:	11400017 	ldw	r5,0(r2)
 4081690:	843fff04 	addi	r16,r16,-4
 4081694:	4081ca40 	call	4081ca4 <printf>
			if(compareWithTarget(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 3 * 4 + BLOCK_HEADER_SIZE * 4, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, 0x8)){
				printf("\nCORE: SHA_3\n ");
				printf("\nSUCCESS\nDigest Valid\n ");
				printf("Nounce = %x \n",nounce3);
				printf("Final Hash: 0x");
				for (unsigned int index = 0; index < 0x8; index++) {
 4081698:	847ff81e 	bne	r16,r17,408167c <__alt_data_end+0xfffc2e7c>
 408169c:	00015706 	br	4081bfc <main+0xe44>
				break;
			}else {
//						printf("\nCORE: SHA_3\n ");
//				printf("Nounce = %x \n",nounce3);
//				printf("Digest invalid!!!\n\n");
				nounce3++;
 40816a0:	d0a00617 	ldw	r2,-32744(gp)
				*(mem_base3 + 19) = nounce3;
 40816a4:	d0e01017 	ldw	r3,-32704(gp)
				SHA_Init(SHA_3_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 3 * 4,
 40816a8:	01410134 	movhi	r5,1028
				break;
			}else {
//						printf("\nCORE: SHA_3\n ");
//				printf("Nounce = %x \n",nounce3);
//				printf("Digest invalid!!!\n\n");
				nounce3++;
 40816ac:	10800044 	addi	r2,r2,1
				*(mem_base3 + 19) = nounce3;
				SHA_Init(SHA_3_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 3 * 4,
 40816b0:	01010334 	movhi	r4,1036
			}else {
//						printf("\nCORE: SHA_3\n ");
//				printf("Nounce = %x \n",nounce3);
//				printf("Digest invalid!!!\n\n");
				nounce3++;
				*(mem_base3 + 19) = nounce3;
 40816b4:	18801315 	stw	r2,76(r3)
				SHA_Init(SHA_3_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 3 * 4,
 40816b8:	01800344 	movi	r6,13
 40816bc:	29409004 	addi	r5,r5,576
 40816c0:	210b0004 	addi	r4,r4,11264
				break;
			}else {
//						printf("\nCORE: SHA_3\n ");
//				printf("Nounce = %x \n",nounce3);
//				printf("Digest invalid!!!\n\n");
				nounce3++;
 40816c4:	d0a00615 	stw	r2,-32744(gp)
				*(mem_base3 + 19) = nounce3;
				SHA_Init(SHA_3_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 3 * 4,
 40816c8:	408064c0 	call	408064c <SHA_Init>
				CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
			}
			flag3 = 0x0;
 40816cc:	d0207015 	stw	zero,-32320(gp)
		}
		if ((flag4 & 0x1) == 1) {
 40816d0:	d0a06f17 	ldw	r2,-32324(gp)
 40816d4:	1080004c 	andi	r2,r2,1
 40816d8:	10003426 	beq	r2,zero,40817ac <main+0x9f4>
			read_digest(SHA_4_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 * 4 + BLOCK_HEADER_SIZE * 4);
 40816dc:	01410134 	movhi	r5,1028
 40816e0:	01010334 	movhi	r4,1036
 40816e4:	2940e004 	addi	r5,r5,896
 40816e8:	210a0004 	addi	r4,r4,10240
 40816ec:	408024c0 	call	408024c <read_digest>
			//reverse_byte
			reverse_byte_in_memory(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 * 4 + BLOCK_HEADER_SIZE * 4, 0x8);
 40816f0:	01010134 	movhi	r4,1028
 40816f4:	01400204 	movi	r5,8
 40816f8:	2100e004 	addi	r4,r4,896
 40816fc:	40806900 	call	4080690 <reverse_byte_in_memory>
			if(compareWithTarget(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 * 4 + BLOCK_HEADER_SIZE * 4, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, 0x8)){
 4081700:	01410134 	movhi	r5,1028
 4081704:	01010134 	movhi	r4,1028
 4081708:	01800204 	movi	r6,8
 408170c:	29424004 	addi	r5,r5,2304
 4081710:	2100e004 	addi	r4,r4,896
 4081714:	40806d40 	call	40806d4 <compareWithTarget>
 4081718:	10001826 	beq	r2,zero,408177c <main+0x9c4>
				printf("\nCORE: SHA_4\n ");
 408171c:	01010234 	movhi	r4,1032
 4081720:	210a9304 	addi	r4,r4,10828
 4081724:	4081ca40 	call	4081ca4 <printf>
				printf("\nSUCCESS\nDigest Valid\n ");
 4081728:	01010234 	movhi	r4,1032
 408172c:	210a8504 	addi	r4,r4,10772
 4081730:	4081ca40 	call	4081ca4 <printf>
				printf("Nounce = %x \n",nounce4);
 4081734:	d1600517 	ldw	r5,-32748(gp)
 4081738:	01010234 	movhi	r4,1032
 408173c:	210a7704 	addi	r4,r4,10716
 4081740:	4081ca40 	call	4081ca4 <printf>
				printf("Final Hash: 0x");
 4081744:	01010234 	movhi	r4,1032
 4081748:	210a7b04 	addi	r4,r4,10732
 408174c:	4081ca40 	call	4081ca4 <printf>
 4081750:	04002704 	movi	r16,156
				for (unsigned int index = 0; index < 0x8; index++) {
 4081754:	04401f04 	movi	r17,124
					printf("%.8x",*(mem_base4 + 32 + (7 - index)));
 4081758:	d0a00f17 	ldw	r2,-32708(gp)
 408175c:	01010234 	movhi	r4,1032
 4081760:	210a7f04 	addi	r4,r4,10748
 4081764:	1405883a 	add	r2,r2,r16
 4081768:	11400017 	ldw	r5,0(r2)
 408176c:	843fff04 	addi	r16,r16,-4
 4081770:	4081ca40 	call	4081ca4 <printf>
			if(compareWithTarget(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 * 4 + BLOCK_HEADER_SIZE * 4, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, 0x8)){
				printf("\nCORE: SHA_4\n ");
				printf("\nSUCCESS\nDigest Valid\n ");
				printf("Nounce = %x \n",nounce4);
				printf("Final Hash: 0x");
				for (unsigned int index = 0; index < 0x8; index++) {
 4081774:	847ff81e 	bne	r16,r17,4081758 <__alt_data_end+0xfffc2f58>
 4081778:	00012006 	br	4081bfc <main+0xe44>
				break;
			}else {
//						printf("\nCORE: SHA_4\n ");
//				printf("Nounce = %x \n",nounce4);
//				printf("Digest invalid!!!\n\n");
				nounce4++;
 408177c:	d0a00517 	ldw	r2,-32748(gp)
				*(mem_base4 + 19) = nounce4;
 4081780:	d0e00f17 	ldw	r3,-32708(gp)
				SHA_Init(SHA_4_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 * 4,
 4081784:	01410134 	movhi	r5,1028
				break;
			}else {
//						printf("\nCORE: SHA_4\n ");
//				printf("Nounce = %x \n",nounce4);
//				printf("Digest invalid!!!\n\n");
				nounce4++;
 4081788:	10800044 	addi	r2,r2,1
				*(mem_base4 + 19) = nounce4;
				SHA_Init(SHA_4_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 * 4,
 408178c:	01010334 	movhi	r4,1036
			}else {
//						printf("\nCORE: SHA_4\n ");
//				printf("Nounce = %x \n",nounce4);
//				printf("Digest invalid!!!\n\n");
				nounce4++;
				*(mem_base4 + 19) = nounce4;
 4081790:	18801315 	stw	r2,76(r3)
				SHA_Init(SHA_4_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 * 4,
 4081794:	01800344 	movi	r6,13
 4081798:	2940c004 	addi	r5,r5,768
 408179c:	210a0004 	addi	r4,r4,10240
				break;
			}else {
//						printf("\nCORE: SHA_4\n ");
//				printf("Nounce = %x \n",nounce4);
//				printf("Digest invalid!!!\n\n");
				nounce4++;
 40817a0:	d0a00515 	stw	r2,-32748(gp)
				*(mem_base4 + 19) = nounce4;
				SHA_Init(SHA_4_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 4 * 4,
 40817a4:	408064c0 	call	408064c <SHA_Init>
				CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
			}
			flag4 = 0x0;
 40817a8:	d0206f15 	stw	zero,-32324(gp)
		}
		if ((flag5 & 0x1) == 1) {
 40817ac:	d0a06e17 	ldw	r2,-32328(gp)
 40817b0:	1080004c 	andi	r2,r2,1
 40817b4:	10003426 	beq	r2,zero,4081888 <main+0xad0>
			read_digest(SHA_5_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 5 * 4 + BLOCK_HEADER_SIZE * 4);
 40817b8:	01410134 	movhi	r5,1028
 40817bc:	01010334 	movhi	r4,1036
 40817c0:	29411004 	addi	r5,r5,1088
 40817c4:	21090004 	addi	r4,r4,9216
 40817c8:	408024c0 	call	408024c <read_digest>
			//reverse_byte
			reverse_byte_in_memory(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 5 * 4 + BLOCK_HEADER_SIZE * 4, 0x8);
 40817cc:	01010134 	movhi	r4,1028
 40817d0:	01400204 	movi	r5,8
 40817d4:	21011004 	addi	r4,r4,1088
 40817d8:	40806900 	call	4080690 <reverse_byte_in_memory>
			if(compareWithTarget(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 5 * 4 + BLOCK_HEADER_SIZE * 4, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, 0x8)){
 40817dc:	01410134 	movhi	r5,1028
 40817e0:	01010134 	movhi	r4,1028
 40817e4:	01800204 	movi	r6,8
 40817e8:	29424004 	addi	r5,r5,2304
 40817ec:	21011004 	addi	r4,r4,1088
 40817f0:	40806d40 	call	40806d4 <compareWithTarget>
 40817f4:	10001826 	beq	r2,zero,4081858 <main+0xaa0>
				printf("\nCORE: SHA_5\n ");
 40817f8:	01010234 	movhi	r4,1032
 40817fc:	210a9704 	addi	r4,r4,10844
 4081800:	4081ca40 	call	4081ca4 <printf>
				printf("\nSUCCESS\nDigest Valid\n ");
 4081804:	01010234 	movhi	r4,1032
 4081808:	210a8504 	addi	r4,r4,10772
 408180c:	4081ca40 	call	4081ca4 <printf>
				printf("Nounce = %x \n",nounce5);
 4081810:	d1600417 	ldw	r5,-32752(gp)
 4081814:	01010234 	movhi	r4,1032
 4081818:	210a7704 	addi	r4,r4,10716
 408181c:	4081ca40 	call	4081ca4 <printf>
				printf("Final Hash: 0x");
 4081820:	01010234 	movhi	r4,1032
 4081824:	210a7b04 	addi	r4,r4,10732
 4081828:	4081ca40 	call	4081ca4 <printf>
 408182c:	04002704 	movi	r16,156
				for (unsigned int index = 0; index < 0x8; index++) {
 4081830:	04401f04 	movi	r17,124
					printf("%.8x",*(mem_base5 + 32 + (7 - index)));
 4081834:	d0a00e17 	ldw	r2,-32712(gp)
 4081838:	01010234 	movhi	r4,1032
 408183c:	210a7f04 	addi	r4,r4,10748
 4081840:	1405883a 	add	r2,r2,r16
 4081844:	11400017 	ldw	r5,0(r2)
 4081848:	843fff04 	addi	r16,r16,-4
 408184c:	4081ca40 	call	4081ca4 <printf>
			if(compareWithTarget(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 5 * 4 + BLOCK_HEADER_SIZE * 4, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, 0x8)){
				printf("\nCORE: SHA_5\n ");
				printf("\nSUCCESS\nDigest Valid\n ");
				printf("Nounce = %x \n",nounce5);
				printf("Final Hash: 0x");
				for (unsigned int index = 0; index < 0x8; index++) {
 4081850:	847ff81e 	bne	r16,r17,4081834 <__alt_data_end+0xfffc3034>
 4081854:	0000e906 	br	4081bfc <main+0xe44>
				break;
			}else {
//						printf("\nCORE: SHA_5\n ");
//				printf("Nounce = %x \n",nounce5);
//				printf("Digest invalid!!!\n\n");
				nounce5++;
 4081858:	d0a00417 	ldw	r2,-32752(gp)
				*(mem_base5 + 19) = nounce5;
 408185c:	d0e00e17 	ldw	r3,-32712(gp)
				SHA_Init(SHA_5_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 5 * 4,
 4081860:	01410134 	movhi	r5,1028
				break;
			}else {
//						printf("\nCORE: SHA_5\n ");
//				printf("Nounce = %x \n",nounce5);
//				printf("Digest invalid!!!\n\n");
				nounce5++;
 4081864:	10800044 	addi	r2,r2,1
				*(mem_base5 + 19) = nounce5;
				SHA_Init(SHA_5_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 5 * 4,
 4081868:	01010334 	movhi	r4,1036
			}else {
//						printf("\nCORE: SHA_5\n ");
//				printf("Nounce = %x \n",nounce5);
//				printf("Digest invalid!!!\n\n");
				nounce5++;
				*(mem_base5 + 19) = nounce5;
 408186c:	18801315 	stw	r2,76(r3)
				SHA_Init(SHA_5_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 5 * 4,
 4081870:	01800344 	movi	r6,13
 4081874:	2940f004 	addi	r5,r5,960
 4081878:	21090004 	addi	r4,r4,9216
				break;
			}else {
//						printf("\nCORE: SHA_5\n ");
//				printf("Nounce = %x \n",nounce5);
//				printf("Digest invalid!!!\n\n");
				nounce5++;
 408187c:	d0a00415 	stw	r2,-32752(gp)
				*(mem_base5 + 19) = nounce5;
				SHA_Init(SHA_5_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 5 * 4,
 4081880:	408064c0 	call	408064c <SHA_Init>
				CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
			}
			flag5 = 0x0;
 4081884:	d0206e15 	stw	zero,-32328(gp)
		}
		if ((flag6 & 0x1) == 1) {
 4081888:	d0a06d17 	ldw	r2,-32332(gp)
 408188c:	1080004c 	andi	r2,r2,1
 4081890:	10003426 	beq	r2,zero,4081964 <main+0xbac>
			read_digest(SHA_6_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 6 * 4 + BLOCK_HEADER_SIZE * 4);
 4081894:	01410134 	movhi	r5,1028
 4081898:	01010334 	movhi	r4,1036
 408189c:	29414004 	addi	r5,r5,1280
 40818a0:	21080004 	addi	r4,r4,8192
 40818a4:	408024c0 	call	408024c <read_digest>
			//reverse_byte
			reverse_byte_in_memory(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 6 * 4 + BLOCK_HEADER_SIZE * 4, 0x8);
 40818a8:	01010134 	movhi	r4,1028
 40818ac:	01400204 	movi	r5,8
 40818b0:	21014004 	addi	r4,r4,1280
 40818b4:	40806900 	call	4080690 <reverse_byte_in_memory>
			if(compareWithTarget(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 6 * 4 + BLOCK_HEADER_SIZE * 4, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, 0x8)){
 40818b8:	01410134 	movhi	r5,1028
 40818bc:	01010134 	movhi	r4,1028
 40818c0:	01800204 	movi	r6,8
 40818c4:	29424004 	addi	r5,r5,2304
 40818c8:	21014004 	addi	r4,r4,1280
 40818cc:	40806d40 	call	40806d4 <compareWithTarget>
 40818d0:	10001826 	beq	r2,zero,4081934 <main+0xb7c>
				printf("\nCORE: SHA_6\n ");
 40818d4:	01010234 	movhi	r4,1032
 40818d8:	210a9b04 	addi	r4,r4,10860
 40818dc:	4081ca40 	call	4081ca4 <printf>
				printf("\nSUCCESS\nDigest Valid\n ");
 40818e0:	01010234 	movhi	r4,1032
 40818e4:	210a8504 	addi	r4,r4,10772
 40818e8:	4081ca40 	call	4081ca4 <printf>
				printf("Nounce = %x \n",nounce6);
 40818ec:	d1600317 	ldw	r5,-32756(gp)
 40818f0:	01010234 	movhi	r4,1032
 40818f4:	210a7704 	addi	r4,r4,10716
 40818f8:	4081ca40 	call	4081ca4 <printf>
				printf("Final Hash: 0x");
 40818fc:	01010234 	movhi	r4,1032
 4081900:	210a7b04 	addi	r4,r4,10732
 4081904:	4081ca40 	call	4081ca4 <printf>
 4081908:	04002704 	movi	r16,156
				for (unsigned int index = 0; index < 0x8; index++) {
 408190c:	04401f04 	movi	r17,124
					printf("%.8x",*(mem_base6 + 32 + (7 - index)));
 4081910:	d0a00d17 	ldw	r2,-32716(gp)
 4081914:	01010234 	movhi	r4,1032
 4081918:	210a7f04 	addi	r4,r4,10748
 408191c:	1405883a 	add	r2,r2,r16
 4081920:	11400017 	ldw	r5,0(r2)
 4081924:	843fff04 	addi	r16,r16,-4
 4081928:	4081ca40 	call	4081ca4 <printf>
			if(compareWithTarget(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 6 * 4 + BLOCK_HEADER_SIZE * 4, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, 0x8)){
				printf("\nCORE: SHA_6\n ");
				printf("\nSUCCESS\nDigest Valid\n ");
				printf("Nounce = %x \n",nounce6);
				printf("Final Hash: 0x");
				for (unsigned int index = 0; index < 0x8; index++) {
 408192c:	847ff81e 	bne	r16,r17,4081910 <__alt_data_end+0xfffc3110>
 4081930:	0000b206 	br	4081bfc <main+0xe44>
				break;
			}else {
//						printf("\nCORE: SHA_6\n ");
//				printf("Nounce = %x \n",nounce6);
//				printf("Digest invalid!!!\n\n");
				nounce6++;
 4081934:	d0a00317 	ldw	r2,-32756(gp)
				*(mem_base6 + 19) = nounce6;
 4081938:	d0e00d17 	ldw	r3,-32716(gp)
				SHA_Init(SHA_6_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 6 * 4,
 408193c:	01410134 	movhi	r5,1028
				break;
			}else {
//						printf("\nCORE: SHA_6\n ");
//				printf("Nounce = %x \n",nounce6);
//				printf("Digest invalid!!!\n\n");
				nounce6++;
 4081940:	10800044 	addi	r2,r2,1
				*(mem_base6 + 19) = nounce6;
				SHA_Init(SHA_6_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 6 * 4,
 4081944:	01010334 	movhi	r4,1036
			}else {
//						printf("\nCORE: SHA_6\n ");
//				printf("Nounce = %x \n",nounce6);
//				printf("Digest invalid!!!\n\n");
				nounce6++;
				*(mem_base6 + 19) = nounce6;
 4081948:	18801315 	stw	r2,76(r3)
				SHA_Init(SHA_6_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 6 * 4,
 408194c:	01800344 	movi	r6,13
 4081950:	29412004 	addi	r5,r5,1152
 4081954:	21080004 	addi	r4,r4,8192
				break;
			}else {
//						printf("\nCORE: SHA_6\n ");
//				printf("Nounce = %x \n",nounce6);
//				printf("Digest invalid!!!\n\n");
				nounce6++;
 4081958:	d0a00315 	stw	r2,-32756(gp)
				*(mem_base6 + 19) = nounce6;
				SHA_Init(SHA_6_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 6 * 4,
 408195c:	408064c0 	call	408064c <SHA_Init>
				CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
			}
			flag6 = 0x0;
 4081960:	d0206d15 	stw	zero,-32332(gp)
		}
		if ((flag7 & 0x1) == 1) {
 4081964:	d0a06c17 	ldw	r2,-32336(gp)
 4081968:	1080004c 	andi	r2,r2,1
 408196c:	10003426 	beq	r2,zero,4081a40 <main+0xc88>
			read_digest(SHA_7_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 7 * 4 + BLOCK_HEADER_SIZE * 4);
 4081970:	01410134 	movhi	r5,1028
 4081974:	01010334 	movhi	r4,1036
 4081978:	29417004 	addi	r5,r5,1472
 408197c:	21070004 	addi	r4,r4,7168
 4081980:	408024c0 	call	408024c <read_digest>
			//reverse_byte
			reverse_byte_in_memory(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 7 * 4 + BLOCK_HEADER_SIZE * 4, 0x8);
 4081984:	01010134 	movhi	r4,1028
 4081988:	01400204 	movi	r5,8
 408198c:	21017004 	addi	r4,r4,1472
 4081990:	40806900 	call	4080690 <reverse_byte_in_memory>
			if(compareWithTarget(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 7 * 4 + BLOCK_HEADER_SIZE * 4, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, 0x8)){
 4081994:	01410134 	movhi	r5,1028
 4081998:	01010134 	movhi	r4,1028
 408199c:	01800204 	movi	r6,8
 40819a0:	29424004 	addi	r5,r5,2304
 40819a4:	21017004 	addi	r4,r4,1472
 40819a8:	40806d40 	call	40806d4 <compareWithTarget>
 40819ac:	10001826 	beq	r2,zero,4081a10 <main+0xc58>
				printf("\nCORE: SHA_7\n ");
 40819b0:	01010234 	movhi	r4,1032
 40819b4:	210a9f04 	addi	r4,r4,10876
 40819b8:	4081ca40 	call	4081ca4 <printf>
				printf("\nSUCCESS\nDigest Valid\n ");
 40819bc:	01010234 	movhi	r4,1032
 40819c0:	210a8504 	addi	r4,r4,10772
 40819c4:	4081ca40 	call	4081ca4 <printf>
				printf("Nounce = %x \n",nounce7);
 40819c8:	d1600217 	ldw	r5,-32760(gp)
 40819cc:	01010234 	movhi	r4,1032
 40819d0:	210a7704 	addi	r4,r4,10716
 40819d4:	4081ca40 	call	4081ca4 <printf>
				printf("Final Hash: 0x");
 40819d8:	01010234 	movhi	r4,1032
 40819dc:	210a7b04 	addi	r4,r4,10732
 40819e0:	4081ca40 	call	4081ca4 <printf>
 40819e4:	04002704 	movi	r16,156
				for (unsigned int index = 0; index < 0x8; index++) {
 40819e8:	04401f04 	movi	r17,124
					printf("%.8x",*(mem_base7 + 32 + (7 - index)));
 40819ec:	d0a00c17 	ldw	r2,-32720(gp)
 40819f0:	01010234 	movhi	r4,1032
 40819f4:	210a7f04 	addi	r4,r4,10748
 40819f8:	1405883a 	add	r2,r2,r16
 40819fc:	11400017 	ldw	r5,0(r2)
 4081a00:	843fff04 	addi	r16,r16,-4
 4081a04:	4081ca40 	call	4081ca4 <printf>
			if(compareWithTarget(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 7 * 4 + BLOCK_HEADER_SIZE * 4, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, 0x8)){
				printf("\nCORE: SHA_7\n ");
				printf("\nSUCCESS\nDigest Valid\n ");
				printf("Nounce = %x \n",nounce7);
				printf("Final Hash: 0x");
				for (unsigned int index = 0; index < 0x8; index++) {
 4081a08:	847ff81e 	bne	r16,r17,40819ec <__alt_data_end+0xfffc31ec>
 4081a0c:	00007b06 	br	4081bfc <main+0xe44>
				break;
			}else {
//						printf("\nCORE: SHA_7\n ");
//				printf("Nounce = %x \n",nounce7);
//				printf("Digest invalid!!!\n\n");
				nounce7++;
 4081a10:	d0a00217 	ldw	r2,-32760(gp)
				*(mem_base7 + 19) = nounce7;
 4081a14:	d0e00c17 	ldw	r3,-32720(gp)
				SHA_Init(SHA_7_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 7 * 4,
 4081a18:	01410134 	movhi	r5,1028
				break;
			}else {
//						printf("\nCORE: SHA_7\n ");
//				printf("Nounce = %x \n",nounce7);
//				printf("Digest invalid!!!\n\n");
				nounce7++;
 4081a1c:	10800044 	addi	r2,r2,1
				*(mem_base7 + 19) = nounce7;
				SHA_Init(SHA_7_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 7 * 4,
 4081a20:	01010334 	movhi	r4,1036
			}else {
//						printf("\nCORE: SHA_7\n ");
//				printf("Nounce = %x \n",nounce7);
//				printf("Digest invalid!!!\n\n");
				nounce7++;
				*(mem_base7 + 19) = nounce7;
 4081a24:	18801315 	stw	r2,76(r3)
				SHA_Init(SHA_7_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 7 * 4,
 4081a28:	01800344 	movi	r6,13
 4081a2c:	29415004 	addi	r5,r5,1344
 4081a30:	21070004 	addi	r4,r4,7168
				break;
			}else {
//						printf("\nCORE: SHA_7\n ");
//				printf("Nounce = %x \n",nounce7);
//				printf("Digest invalid!!!\n\n");
				nounce7++;
 4081a34:	d0a00215 	stw	r2,-32760(gp)
				*(mem_base7 + 19) = nounce7;
				SHA_Init(SHA_7_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 7 * 4,
 4081a38:	408064c0 	call	408064c <SHA_Init>
				CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
			}
			flag7 = 0x0;
 4081a3c:	d0206c15 	stw	zero,-32336(gp)
		}
		if ((flag8 & 0x1) == 1) {
 4081a40:	d0a06b17 	ldw	r2,-32340(gp)
 4081a44:	1080004c 	andi	r2,r2,1
 4081a48:	10003426 	beq	r2,zero,4081b1c <main+0xd64>
			read_digest(SHA_8_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 8 * 4 + BLOCK_HEADER_SIZE * 4);
 4081a4c:	01410134 	movhi	r5,1028
 4081a50:	01010334 	movhi	r4,1036
 4081a54:	2941a004 	addi	r5,r5,1664
 4081a58:	21060004 	addi	r4,r4,6144
 4081a5c:	408024c0 	call	408024c <read_digest>
			//reverse_byte
			reverse_byte_in_memory(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 8 * 4 + BLOCK_HEADER_SIZE * 4, 0x8);
 4081a60:	01010134 	movhi	r4,1028
 4081a64:	01400204 	movi	r5,8
 4081a68:	2101a004 	addi	r4,r4,1664
 4081a6c:	40806900 	call	4080690 <reverse_byte_in_memory>
			if(compareWithTarget(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 8 * 4 + BLOCK_HEADER_SIZE * 4, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, 0x8)){
 4081a70:	01410134 	movhi	r5,1028
 4081a74:	01010134 	movhi	r4,1028
 4081a78:	01800204 	movi	r6,8
 4081a7c:	29424004 	addi	r5,r5,2304
 4081a80:	2101a004 	addi	r4,r4,1664
 4081a84:	40806d40 	call	40806d4 <compareWithTarget>
 4081a88:	10001826 	beq	r2,zero,4081aec <main+0xd34>
				printf("\nCORE: SHA_8\n ");
 4081a8c:	01010234 	movhi	r4,1032
 4081a90:	210aa304 	addi	r4,r4,10892
 4081a94:	4081ca40 	call	4081ca4 <printf>
				printf("\nSUCCESS\nDigest Valid\n ");
 4081a98:	01010234 	movhi	r4,1032
 4081a9c:	210a8504 	addi	r4,r4,10772
 4081aa0:	4081ca40 	call	4081ca4 <printf>
				printf("Nounce = %x \n",nounce8);
 4081aa4:	d1600117 	ldw	r5,-32764(gp)
 4081aa8:	01010234 	movhi	r4,1032
 4081aac:	210a7704 	addi	r4,r4,10716
 4081ab0:	4081ca40 	call	4081ca4 <printf>
				printf("Final Hash: 0x");
 4081ab4:	01010234 	movhi	r4,1032
 4081ab8:	210a7b04 	addi	r4,r4,10732
 4081abc:	4081ca40 	call	4081ca4 <printf>
 4081ac0:	04002704 	movi	r16,156
				for (unsigned int index = 0; index < 0x8; index++) {
 4081ac4:	04401f04 	movi	r17,124
					printf("%.8x",*(mem_base8 + 32 + (7 - index)));
 4081ac8:	d0a00b17 	ldw	r2,-32724(gp)
 4081acc:	01010234 	movhi	r4,1032
 4081ad0:	210a7f04 	addi	r4,r4,10748
 4081ad4:	1405883a 	add	r2,r2,r16
 4081ad8:	11400017 	ldw	r5,0(r2)
 4081adc:	843fff04 	addi	r16,r16,-4
 4081ae0:	4081ca40 	call	4081ca4 <printf>
			if(compareWithTarget(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 8 * 4 + BLOCK_HEADER_SIZE * 4, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, 0x8)){
				printf("\nCORE: SHA_8\n ");
				printf("\nSUCCESS\nDigest Valid\n ");
				printf("Nounce = %x \n",nounce8);
				printf("Final Hash: 0x");
				for (unsigned int index = 0; index < 0x8; index++) {
 4081ae4:	847ff81e 	bne	r16,r17,4081ac8 <__alt_data_end+0xfffc32c8>
 4081ae8:	00004406 	br	4081bfc <main+0xe44>
				break;
			}else {
//						printf("\nCORE: SHA_8\n ");
//				printf("Nounce = %x \n",nounce8);
//				printf("Digest invalid!!!\n\n");
				nounce8++;
 4081aec:	d0a00117 	ldw	r2,-32764(gp)
				*(mem_base8 + 19) = nounce8;
 4081af0:	d0e00b17 	ldw	r3,-32724(gp)
				SHA_Init(SHA_8_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 8 * 4,
 4081af4:	01410134 	movhi	r5,1028
				break;
			}else {
//						printf("\nCORE: SHA_8\n ");
//				printf("Nounce = %x \n",nounce8);
//				printf("Digest invalid!!!\n\n");
				nounce8++;
 4081af8:	10800044 	addi	r2,r2,1
				*(mem_base8 + 19) = nounce8;
				SHA_Init(SHA_8_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 8 * 4,
 4081afc:	01010334 	movhi	r4,1036
			}else {
//						printf("\nCORE: SHA_8\n ");
//				printf("Nounce = %x \n",nounce8);
//				printf("Digest invalid!!!\n\n");
				nounce8++;
				*(mem_base8 + 19) = nounce8;
 4081b00:	18801315 	stw	r2,76(r3)
				SHA_Init(SHA_8_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 8 * 4,
 4081b04:	01800344 	movi	r6,13
 4081b08:	29418004 	addi	r5,r5,1536
 4081b0c:	21060004 	addi	r4,r4,6144
				break;
			}else {
//						printf("\nCORE: SHA_8\n ");
//				printf("Nounce = %x \n",nounce8);
//				printf("Digest invalid!!!\n\n");
				nounce8++;
 4081b10:	d0a00115 	stw	r2,-32764(gp)
				*(mem_base8 + 19) = nounce8;
				SHA_Init(SHA_8_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 8 * 4,
 4081b14:	408064c0 	call	408064c <SHA_Init>
				CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
			}
			flag8 = 0x0;
 4081b18:	d0206b15 	stw	zero,-32340(gp)
		}
		if ((flag9 & 0x1) == 1) {
 4081b1c:	d0a06a17 	ldw	r2,-32344(gp)
 4081b20:	1080004c 	andi	r2,r2,1
 4081b24:	103e0f26 	beq	r2,zero,4081364 <__alt_data_end+0xfffc2b64>
			read_digest(SHA_9_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 9 * 4 + BLOCK_HEADER_SIZE * 4);
 4081b28:	01410134 	movhi	r5,1028
 4081b2c:	01010334 	movhi	r4,1036
 4081b30:	2941d004 	addi	r5,r5,1856
 4081b34:	21050004 	addi	r4,r4,5120
 4081b38:	408024c0 	call	408024c <read_digest>
			//reverse_byte
			reverse_byte_in_memory(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 9 * 4 + BLOCK_HEADER_SIZE * 4, 0x8);
 4081b3c:	01010134 	movhi	r4,1028
 4081b40:	01400204 	movi	r5,8
 4081b44:	2101d004 	addi	r4,r4,1856
 4081b48:	40806900 	call	4080690 <reverse_byte_in_memory>
			if(compareWithTarget(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 9 * 4 + BLOCK_HEADER_SIZE * 4, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, 0x8)){
 4081b4c:	01410134 	movhi	r5,1028
 4081b50:	01010134 	movhi	r4,1028
 4081b54:	01800204 	movi	r6,8
 4081b58:	29424004 	addi	r5,r5,2304
 4081b5c:	2101d004 	addi	r4,r4,1856
 4081b60:	40806d40 	call	40806d4 <compareWithTarget>
 4081b64:	10001826 	beq	r2,zero,4081bc8 <main+0xe10>
				printf("\nCORE: SHA_9\n ");
 4081b68:	01010234 	movhi	r4,1032
 4081b6c:	210aa704 	addi	r4,r4,10908
 4081b70:	4081ca40 	call	4081ca4 <printf>
				printf("\nSUCCESS\nDigest Valid\n ");
 4081b74:	01010234 	movhi	r4,1032
 4081b78:	210a8504 	addi	r4,r4,10772
 4081b7c:	4081ca40 	call	4081ca4 <printf>
				printf("Nounce = %x \n",nounce9);
 4081b80:	d1600017 	ldw	r5,-32768(gp)
 4081b84:	01010234 	movhi	r4,1032
 4081b88:	210a7704 	addi	r4,r4,10716
 4081b8c:	4081ca40 	call	4081ca4 <printf>
				printf("Final Hash: 0x");
 4081b90:	01010234 	movhi	r4,1032
 4081b94:	210a7b04 	addi	r4,r4,10732
 4081b98:	4081ca40 	call	4081ca4 <printf>
 4081b9c:	04002704 	movi	r16,156
				for (unsigned int index = 0; index < 0x8; index++) {
 4081ba0:	04401f04 	movi	r17,124
					printf("%.8x",*(mem_base9 + 32 + (7 - index)));
 4081ba4:	d0a00a17 	ldw	r2,-32728(gp)
 4081ba8:	01010234 	movhi	r4,1032
 4081bac:	210a7f04 	addi	r4,r4,10748
 4081bb0:	1405883a 	add	r2,r2,r16
 4081bb4:	11400017 	ldw	r5,0(r2)
 4081bb8:	843fff04 	addi	r16,r16,-4
 4081bbc:	4081ca40 	call	4081ca4 <printf>
			if(compareWithTarget(ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 9 * 4 + BLOCK_HEADER_SIZE * 4, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 12 * 4, 0x8)){
				printf("\nCORE: SHA_9\n ");
				printf("\nSUCCESS\nDigest Valid\n ");
				printf("Nounce = %x \n",nounce9);
				printf("Final Hash: 0x");
				for (unsigned int index = 0; index < 0x8; index++) {
 4081bc0:	847ff81e 	bne	r16,r17,4081ba4 <__alt_data_end+0xfffc33a4>
 4081bc4:	00000d06 	br	4081bfc <main+0xe44>
				break;
			}else {
//						printf("\nCORE: SHA_9\n ");
//				printf("Nounce = %x \n",nounce9);
//				printf("Digest invalid!!!\n\n");
				nounce9++;
 4081bc8:	d0a00017 	ldw	r2,-32768(gp)
				*(mem_base9 + 19) = nounce9;
 4081bcc:	d0e00a17 	ldw	r3,-32728(gp)
				SHA_Init(SHA_9_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 9 * 4,
 4081bd0:	01410134 	movhi	r5,1028
				break;
			}else {
//						printf("\nCORE: SHA_9\n ");
//				printf("Nounce = %x \n",nounce9);
//				printf("Digest invalid!!!\n\n");
				nounce9++;
 4081bd4:	10800044 	addi	r2,r2,1
				*(mem_base9 + 19) = nounce9;
				SHA_Init(SHA_9_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 9 * 4,
 4081bd8:	01010334 	movhi	r4,1036
			}else {
//						printf("\nCORE: SHA_9\n ");
//				printf("Nounce = %x \n",nounce9);
//				printf("Digest invalid!!!\n\n");
				nounce9++;
				*(mem_base9 + 19) = nounce9;
 4081bdc:	18801315 	stw	r2,76(r3)
				SHA_Init(SHA_9_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 9 * 4,
 4081be0:	01800344 	movi	r6,13
 4081be4:	2941b004 	addi	r5,r5,1728
 4081be8:	21050004 	addi	r4,r4,5120
				break;
			}else {
//						printf("\nCORE: SHA_9\n ");
//				printf("Nounce = %x \n",nounce9);
//				printf("Digest invalid!!!\n\n");
				nounce9++;
 4081bec:	d0a00015 	stw	r2,-32768(gp)
				*(mem_base9 + 19) = nounce9;
				SHA_Init(SHA_9_BASE, ONCHIP_MEMORY2_1_BASE + STORAGE_SIZE * 9 * 4,
 4081bf0:	408064c0 	call	408064c <SHA_Init>
				CTRL_INIT_VALUE + CTRL_IRQ_EN_VALUE + CTRL_MODE_VALUE); //mode = 1, init = 1, irq_en = 1
			}
			flag9 = 0x0;
 4081bf4:	d0206a15 	stw	zero,-32344(gp)
 4081bf8:	003dda06 	br	4081364 <__alt_data_end+0xfffc2b64>
		}
	}
	return 0;
}
 4081bfc:	0005883a 	mov	r2,zero
 4081c00:	dfc05417 	ldw	ra,336(sp)
 4081c04:	dc805317 	ldw	r18,332(sp)
 4081c08:	dc405217 	ldw	r17,328(sp)
 4081c0c:	dc005117 	ldw	r16,324(sp)
 4081c10:	dec05504 	addi	sp,sp,340
 4081c14:	f800283a 	ret

04081c18 <__mulsi3>:
 4081c18:	0005883a 	mov	r2,zero
 4081c1c:	20000726 	beq	r4,zero,4081c3c <__mulsi3+0x24>
 4081c20:	20c0004c 	andi	r3,r4,1
 4081c24:	2008d07a 	srli	r4,r4,1
 4081c28:	18000126 	beq	r3,zero,4081c30 <__mulsi3+0x18>
 4081c2c:	1145883a 	add	r2,r2,r5
 4081c30:	294b883a 	add	r5,r5,r5
 4081c34:	203ffa1e 	bne	r4,zero,4081c20 <__alt_data_end+0xfffc3420>
 4081c38:	f800283a 	ret
 4081c3c:	f800283a 	ret

04081c40 <memcpy>:
 4081c40:	2005883a 	mov	r2,r4
 4081c44:	2007883a 	mov	r3,r4
 4081c48:	218d883a 	add	r6,r4,r6
 4081c4c:	19800526 	beq	r3,r6,4081c64 <memcpy+0x24>
 4081c50:	29000003 	ldbu	r4,0(r5)
 4081c54:	18c00044 	addi	r3,r3,1
 4081c58:	29400044 	addi	r5,r5,1
 4081c5c:	193fffc5 	stb	r4,-1(r3)
 4081c60:	003ffa06 	br	4081c4c <__alt_data_end+0xfffc344c>
 4081c64:	f800283a 	ret

04081c68 <_printf_r>:
 4081c68:	defffd04 	addi	sp,sp,-12
 4081c6c:	dfc00015 	stw	ra,0(sp)
 4081c70:	d9800115 	stw	r6,4(sp)
 4081c74:	d9c00215 	stw	r7,8(sp)
 4081c78:	20c00217 	ldw	r3,8(r4)
 4081c7c:	01810234 	movhi	r6,1032
 4081c80:	3188d504 	addi	r6,r6,9044
 4081c84:	19800115 	stw	r6,4(r3)
 4081c88:	280d883a 	mov	r6,r5
 4081c8c:	21400217 	ldw	r5,8(r4)
 4081c90:	d9c00104 	addi	r7,sp,4
 4081c94:	4081e0c0 	call	4081e0c <___vfprintf_internal_r>
 4081c98:	dfc00017 	ldw	ra,0(sp)
 4081c9c:	dec00304 	addi	sp,sp,12
 4081ca0:	f800283a 	ret

04081ca4 <printf>:
 4081ca4:	defffc04 	addi	sp,sp,-16
 4081ca8:	dfc00015 	stw	ra,0(sp)
 4081cac:	d9400115 	stw	r5,4(sp)
 4081cb0:	d9800215 	stw	r6,8(sp)
 4081cb4:	d9c00315 	stw	r7,12(sp)
 4081cb8:	00810234 	movhi	r2,1032
 4081cbc:	108b4804 	addi	r2,r2,11552
 4081cc0:	10800017 	ldw	r2,0(r2)
 4081cc4:	01410234 	movhi	r5,1032
 4081cc8:	2948d504 	addi	r5,r5,9044
 4081ccc:	10c00217 	ldw	r3,8(r2)
 4081cd0:	d9800104 	addi	r6,sp,4
 4081cd4:	19400115 	stw	r5,4(r3)
 4081cd8:	200b883a 	mov	r5,r4
 4081cdc:	11000217 	ldw	r4,8(r2)
 4081ce0:	40823380 	call	4082338 <__vfprintf_internal>
 4081ce4:	dfc00017 	ldw	ra,0(sp)
 4081ce8:	dec00404 	addi	sp,sp,16
 4081cec:	f800283a 	ret

04081cf0 <_puts_r>:
 4081cf0:	defffd04 	addi	sp,sp,-12
 4081cf4:	dc000015 	stw	r16,0(sp)
 4081cf8:	2021883a 	mov	r16,r4
 4081cfc:	2809883a 	mov	r4,r5
 4081d00:	dfc00215 	stw	ra,8(sp)
 4081d04:	dc400115 	stw	r17,4(sp)
 4081d08:	2823883a 	mov	r17,r5
 4081d0c:	4081d840 	call	4081d84 <strlen>
 4081d10:	81400217 	ldw	r5,8(r16)
 4081d14:	01010234 	movhi	r4,1032
 4081d18:	2108d504 	addi	r4,r4,9044
 4081d1c:	29000115 	stw	r4,4(r5)
 4081d20:	100f883a 	mov	r7,r2
 4081d24:	880d883a 	mov	r6,r17
 4081d28:	8009883a 	mov	r4,r16
 4081d2c:	40823540 	call	4082354 <__sfvwrite_small_dev>
 4081d30:	00ffffc4 	movi	r3,-1
 4081d34:	10c00926 	beq	r2,r3,4081d5c <_puts_r+0x6c>
 4081d38:	81400217 	ldw	r5,8(r16)
 4081d3c:	01810234 	movhi	r6,1032
 4081d40:	01c00044 	movi	r7,1
 4081d44:	28800117 	ldw	r2,4(r5)
 4081d48:	318a7a04 	addi	r6,r6,10728
 4081d4c:	8009883a 	mov	r4,r16
 4081d50:	103ee83a 	callr	r2
 4081d54:	10bfffe0 	cmpeqi	r2,r2,-1
 4081d58:	0085c83a 	sub	r2,zero,r2
 4081d5c:	dfc00217 	ldw	ra,8(sp)
 4081d60:	dc400117 	ldw	r17,4(sp)
 4081d64:	dc000017 	ldw	r16,0(sp)
 4081d68:	dec00304 	addi	sp,sp,12
 4081d6c:	f800283a 	ret

04081d70 <puts>:
 4081d70:	00810234 	movhi	r2,1032
 4081d74:	108b4804 	addi	r2,r2,11552
 4081d78:	200b883a 	mov	r5,r4
 4081d7c:	11000017 	ldw	r4,0(r2)
 4081d80:	4081cf01 	jmpi	4081cf0 <_puts_r>

04081d84 <strlen>:
 4081d84:	2005883a 	mov	r2,r4
 4081d88:	10c00007 	ldb	r3,0(r2)
 4081d8c:	18000226 	beq	r3,zero,4081d98 <strlen+0x14>
 4081d90:	10800044 	addi	r2,r2,1
 4081d94:	003ffc06 	br	4081d88 <__alt_data_end+0xfffc3588>
 4081d98:	1105c83a 	sub	r2,r2,r4
 4081d9c:	f800283a 	ret

04081da0 <print_repeat>:
 4081da0:	defffb04 	addi	sp,sp,-20
 4081da4:	dc800315 	stw	r18,12(sp)
 4081da8:	dc400215 	stw	r17,8(sp)
 4081dac:	dc000115 	stw	r16,4(sp)
 4081db0:	dfc00415 	stw	ra,16(sp)
 4081db4:	2025883a 	mov	r18,r4
 4081db8:	2823883a 	mov	r17,r5
 4081dbc:	d9800005 	stb	r6,0(sp)
 4081dc0:	3821883a 	mov	r16,r7
 4081dc4:	04000a0e 	bge	zero,r16,4081df0 <print_repeat+0x50>
 4081dc8:	88800117 	ldw	r2,4(r17)
 4081dcc:	01c00044 	movi	r7,1
 4081dd0:	d80d883a 	mov	r6,sp
 4081dd4:	880b883a 	mov	r5,r17
 4081dd8:	9009883a 	mov	r4,r18
 4081ddc:	103ee83a 	callr	r2
 4081de0:	843fffc4 	addi	r16,r16,-1
 4081de4:	103ff726 	beq	r2,zero,4081dc4 <__alt_data_end+0xfffc35c4>
 4081de8:	00bfffc4 	movi	r2,-1
 4081dec:	00000106 	br	4081df4 <print_repeat+0x54>
 4081df0:	0005883a 	mov	r2,zero
 4081df4:	dfc00417 	ldw	ra,16(sp)
 4081df8:	dc800317 	ldw	r18,12(sp)
 4081dfc:	dc400217 	ldw	r17,8(sp)
 4081e00:	dc000117 	ldw	r16,4(sp)
 4081e04:	dec00504 	addi	sp,sp,20
 4081e08:	f800283a 	ret

04081e0c <___vfprintf_internal_r>:
 4081e0c:	deffe504 	addi	sp,sp,-108
 4081e10:	d8c00804 	addi	r3,sp,32
 4081e14:	ddc01815 	stw	r23,96(sp)
 4081e18:	dd801715 	stw	r22,92(sp)
 4081e1c:	dd401615 	stw	r21,88(sp)
 4081e20:	dd001515 	stw	r20,84(sp)
 4081e24:	dcc01415 	stw	r19,80(sp)
 4081e28:	dc801315 	stw	r18,76(sp)
 4081e2c:	dc401215 	stw	r17,72(sp)
 4081e30:	dc001115 	stw	r16,68(sp)
 4081e34:	dfc01a15 	stw	ra,104(sp)
 4081e38:	df001915 	stw	fp,100(sp)
 4081e3c:	2029883a 	mov	r20,r4
 4081e40:	2823883a 	mov	r17,r5
 4081e44:	382d883a 	mov	r22,r7
 4081e48:	d9800f15 	stw	r6,60(sp)
 4081e4c:	0021883a 	mov	r16,zero
 4081e50:	d8000e15 	stw	zero,56(sp)
 4081e54:	d8000a15 	stw	zero,40(sp)
 4081e58:	002b883a 	mov	r21,zero
 4081e5c:	0027883a 	mov	r19,zero
 4081e60:	0025883a 	mov	r18,zero
 4081e64:	d8000c15 	stw	zero,48(sp)
 4081e68:	d8000b15 	stw	zero,44(sp)
 4081e6c:	002f883a 	mov	r23,zero
 4081e70:	d8c00915 	stw	r3,36(sp)
 4081e74:	d8c00f17 	ldw	r3,60(sp)
 4081e78:	19000003 	ldbu	r4,0(r3)
 4081e7c:	20803fcc 	andi	r2,r4,255
 4081e80:	1080201c 	xori	r2,r2,128
 4081e84:	10bfe004 	addi	r2,r2,-128
 4081e88:	10011e26 	beq	r2,zero,4082304 <___vfprintf_internal_r+0x4f8>
 4081e8c:	00c00044 	movi	r3,1
 4081e90:	b8c01426 	beq	r23,r3,4081ee4 <___vfprintf_internal_r+0xd8>
 4081e94:	1dc00216 	blt	r3,r23,4081ea0 <___vfprintf_internal_r+0x94>
 4081e98:	b8000626 	beq	r23,zero,4081eb4 <___vfprintf_internal_r+0xa8>
 4081e9c:	00011506 	br	40822f4 <___vfprintf_internal_r+0x4e8>
 4081ea0:	01400084 	movi	r5,2
 4081ea4:	b9401d26 	beq	r23,r5,4081f1c <___vfprintf_internal_r+0x110>
 4081ea8:	014000c4 	movi	r5,3
 4081eac:	b9402b26 	beq	r23,r5,4081f5c <___vfprintf_internal_r+0x150>
 4081eb0:	00011006 	br	40822f4 <___vfprintf_internal_r+0x4e8>
 4081eb4:	01400944 	movi	r5,37
 4081eb8:	1140fc26 	beq	r2,r5,40822ac <___vfprintf_internal_r+0x4a0>
 4081ebc:	88800117 	ldw	r2,4(r17)
 4081ec0:	d9000005 	stb	r4,0(sp)
 4081ec4:	01c00044 	movi	r7,1
 4081ec8:	d80d883a 	mov	r6,sp
 4081ecc:	880b883a 	mov	r5,r17
 4081ed0:	a009883a 	mov	r4,r20
 4081ed4:	103ee83a 	callr	r2
 4081ed8:	1000d81e 	bne	r2,zero,408223c <___vfprintf_internal_r+0x430>
 4081edc:	84000044 	addi	r16,r16,1
 4081ee0:	00010406 	br	40822f4 <___vfprintf_internal_r+0x4e8>
 4081ee4:	01400c04 	movi	r5,48
 4081ee8:	1140fa26 	beq	r2,r5,40822d4 <___vfprintf_internal_r+0x4c8>
 4081eec:	01400944 	movi	r5,37
 4081ef0:	11400a1e 	bne	r2,r5,4081f1c <___vfprintf_internal_r+0x110>
 4081ef4:	d8800005 	stb	r2,0(sp)
 4081ef8:	88800117 	ldw	r2,4(r17)
 4081efc:	b80f883a 	mov	r7,r23
 4081f00:	d80d883a 	mov	r6,sp
 4081f04:	880b883a 	mov	r5,r17
 4081f08:	a009883a 	mov	r4,r20
 4081f0c:	103ee83a 	callr	r2
 4081f10:	1000ca1e 	bne	r2,zero,408223c <___vfprintf_internal_r+0x430>
 4081f14:	84000044 	addi	r16,r16,1
 4081f18:	0000f506 	br	40822f0 <___vfprintf_internal_r+0x4e4>
 4081f1c:	25fff404 	addi	r23,r4,-48
 4081f20:	bdc03fcc 	andi	r23,r23,255
 4081f24:	00c00244 	movi	r3,9
 4081f28:	1dc00936 	bltu	r3,r23,4081f50 <___vfprintf_internal_r+0x144>
 4081f2c:	00bfffc4 	movi	r2,-1
 4081f30:	90800426 	beq	r18,r2,4081f44 <___vfprintf_internal_r+0x138>
 4081f34:	01400284 	movi	r5,10
 4081f38:	9009883a 	mov	r4,r18
 4081f3c:	4081c180 	call	4081c18 <__mulsi3>
 4081f40:	00000106 	br	4081f48 <___vfprintf_internal_r+0x13c>
 4081f44:	0005883a 	mov	r2,zero
 4081f48:	b8a5883a 	add	r18,r23,r2
 4081f4c:	0000e206 	br	40822d8 <___vfprintf_internal_r+0x4cc>
 4081f50:	01400b84 	movi	r5,46
 4081f54:	1140e426 	beq	r2,r5,40822e8 <___vfprintf_internal_r+0x4dc>
 4081f58:	05c00084 	movi	r23,2
 4081f5c:	213ff404 	addi	r4,r4,-48
 4081f60:	27003fcc 	andi	fp,r4,255
 4081f64:	00c00244 	movi	r3,9
 4081f68:	1f000936 	bltu	r3,fp,4081f90 <___vfprintf_internal_r+0x184>
 4081f6c:	00bfffc4 	movi	r2,-1
 4081f70:	98800426 	beq	r19,r2,4081f84 <___vfprintf_internal_r+0x178>
 4081f74:	01400284 	movi	r5,10
 4081f78:	9809883a 	mov	r4,r19
 4081f7c:	4081c180 	call	4081c18 <__mulsi3>
 4081f80:	00000106 	br	4081f88 <___vfprintf_internal_r+0x17c>
 4081f84:	0005883a 	mov	r2,zero
 4081f88:	e0a7883a 	add	r19,fp,r2
 4081f8c:	0000d906 	br	40822f4 <___vfprintf_internal_r+0x4e8>
 4081f90:	00c01b04 	movi	r3,108
 4081f94:	10c0d226 	beq	r2,r3,40822e0 <___vfprintf_internal_r+0x4d4>
 4081f98:	013fffc4 	movi	r4,-1
 4081f9c:	99000226 	beq	r19,r4,4081fa8 <___vfprintf_internal_r+0x19c>
 4081fa0:	d8000b15 	stw	zero,44(sp)
 4081fa4:	00000106 	br	4081fac <___vfprintf_internal_r+0x1a0>
 4081fa8:	04c00044 	movi	r19,1
 4081fac:	01001a44 	movi	r4,105
 4081fb0:	11001626 	beq	r2,r4,408200c <___vfprintf_internal_r+0x200>
 4081fb4:	20800916 	blt	r4,r2,4081fdc <___vfprintf_internal_r+0x1d0>
 4081fb8:	010018c4 	movi	r4,99
 4081fbc:	11008826 	beq	r2,r4,40821e0 <___vfprintf_internal_r+0x3d4>
 4081fc0:	01001904 	movi	r4,100
 4081fc4:	11001126 	beq	r2,r4,408200c <___vfprintf_internal_r+0x200>
 4081fc8:	01001604 	movi	r4,88
 4081fcc:	1100c81e 	bne	r2,r4,40822f0 <___vfprintf_internal_r+0x4e4>
 4081fd0:	00c00044 	movi	r3,1
 4081fd4:	d8c00e15 	stw	r3,56(sp)
 4081fd8:	00001506 	br	4082030 <___vfprintf_internal_r+0x224>
 4081fdc:	01001cc4 	movi	r4,115
 4081fe0:	11009826 	beq	r2,r4,4082244 <___vfprintf_internal_r+0x438>
 4081fe4:	20800416 	blt	r4,r2,4081ff8 <___vfprintf_internal_r+0x1ec>
 4081fe8:	01001bc4 	movi	r4,111
 4081fec:	1100c01e 	bne	r2,r4,40822f0 <___vfprintf_internal_r+0x4e4>
 4081ff0:	05400204 	movi	r21,8
 4081ff4:	00000f06 	br	4082034 <___vfprintf_internal_r+0x228>
 4081ff8:	01001d44 	movi	r4,117
 4081ffc:	11000d26 	beq	r2,r4,4082034 <___vfprintf_internal_r+0x228>
 4082000:	01001e04 	movi	r4,120
 4082004:	11000a26 	beq	r2,r4,4082030 <___vfprintf_internal_r+0x224>
 4082008:	0000b906 	br	40822f0 <___vfprintf_internal_r+0x4e4>
 408200c:	d8c00a17 	ldw	r3,40(sp)
 4082010:	b7000104 	addi	fp,r22,4
 4082014:	18000726 	beq	r3,zero,4082034 <___vfprintf_internal_r+0x228>
 4082018:	df000d15 	stw	fp,52(sp)
 408201c:	b5c00017 	ldw	r23,0(r22)
 4082020:	b800080e 	bge	r23,zero,4082044 <___vfprintf_internal_r+0x238>
 4082024:	05efc83a 	sub	r23,zero,r23
 4082028:	02400044 	movi	r9,1
 408202c:	00000606 	br	4082048 <___vfprintf_internal_r+0x23c>
 4082030:	05400404 	movi	r21,16
 4082034:	b0c00104 	addi	r3,r22,4
 4082038:	d8c00d15 	stw	r3,52(sp)
 408203c:	b5c00017 	ldw	r23,0(r22)
 4082040:	d8000a15 	stw	zero,40(sp)
 4082044:	0013883a 	mov	r9,zero
 4082048:	d839883a 	mov	fp,sp
 408204c:	b8001726 	beq	r23,zero,40820ac <___vfprintf_internal_r+0x2a0>
 4082050:	a80b883a 	mov	r5,r21
 4082054:	b809883a 	mov	r4,r23
 4082058:	da401015 	stw	r9,64(sp)
 408205c:	408255c0 	call	408255c <__udivsi3>
 4082060:	a80b883a 	mov	r5,r21
 4082064:	1009883a 	mov	r4,r2
 4082068:	102d883a 	mov	r22,r2
 408206c:	4081c180 	call	4081c18 <__mulsi3>
 4082070:	b885c83a 	sub	r2,r23,r2
 4082074:	00c00244 	movi	r3,9
 4082078:	da401017 	ldw	r9,64(sp)
 408207c:	18800216 	blt	r3,r2,4082088 <___vfprintf_internal_r+0x27c>
 4082080:	10800c04 	addi	r2,r2,48
 4082084:	00000506 	br	408209c <___vfprintf_internal_r+0x290>
 4082088:	d8c00e17 	ldw	r3,56(sp)
 408208c:	18000226 	beq	r3,zero,4082098 <___vfprintf_internal_r+0x28c>
 4082090:	10800dc4 	addi	r2,r2,55
 4082094:	00000106 	br	408209c <___vfprintf_internal_r+0x290>
 4082098:	108015c4 	addi	r2,r2,87
 408209c:	e0800005 	stb	r2,0(fp)
 40820a0:	b02f883a 	mov	r23,r22
 40820a4:	e7000044 	addi	fp,fp,1
 40820a8:	003fe806 	br	408204c <__alt_data_end+0xfffc384c>
 40820ac:	e6efc83a 	sub	r23,fp,sp
 40820b0:	9dc5c83a 	sub	r2,r19,r23
 40820b4:	0080090e 	bge	zero,r2,40820dc <___vfprintf_internal_r+0x2d0>
 40820b8:	e085883a 	add	r2,fp,r2
 40820bc:	01400c04 	movi	r5,48
 40820c0:	d8c00917 	ldw	r3,36(sp)
 40820c4:	e009883a 	mov	r4,fp
 40820c8:	e0c0032e 	bgeu	fp,r3,40820d8 <___vfprintf_internal_r+0x2cc>
 40820cc:	e7000044 	addi	fp,fp,1
 40820d0:	21400005 	stb	r5,0(r4)
 40820d4:	e0bffa1e 	bne	fp,r2,40820c0 <__alt_data_end+0xfffc38c0>
 40820d8:	e6efc83a 	sub	r23,fp,sp
 40820dc:	d8c00b17 	ldw	r3,44(sp)
 40820e0:	4dd1883a 	add	r8,r9,r23
 40820e4:	922dc83a 	sub	r22,r18,r8
 40820e8:	18001626 	beq	r3,zero,4082144 <___vfprintf_internal_r+0x338>
 40820ec:	48000a26 	beq	r9,zero,4082118 <___vfprintf_internal_r+0x30c>
 40820f0:	00800b44 	movi	r2,45
 40820f4:	d8800805 	stb	r2,32(sp)
 40820f8:	88800117 	ldw	r2,4(r17)
 40820fc:	01c00044 	movi	r7,1
 4082100:	d9800804 	addi	r6,sp,32
 4082104:	880b883a 	mov	r5,r17
 4082108:	a009883a 	mov	r4,r20
 408210c:	103ee83a 	callr	r2
 4082110:	10004a1e 	bne	r2,zero,408223c <___vfprintf_internal_r+0x430>
 4082114:	84000044 	addi	r16,r16,1
 4082118:	0580070e 	bge	zero,r22,4082138 <___vfprintf_internal_r+0x32c>
 408211c:	b00f883a 	mov	r7,r22
 4082120:	01800c04 	movi	r6,48
 4082124:	880b883a 	mov	r5,r17
 4082128:	a009883a 	mov	r4,r20
 408212c:	4081da00 	call	4081da0 <print_repeat>
 4082130:	1000421e 	bne	r2,zero,408223c <___vfprintf_internal_r+0x430>
 4082134:	85a1883a 	add	r16,r16,r22
 4082138:	e02d883a 	mov	r22,fp
 408213c:	bf2fc83a 	sub	r23,r23,fp
 4082140:	00002006 	br	40821c4 <___vfprintf_internal_r+0x3b8>
 4082144:	0580090e 	bge	zero,r22,408216c <___vfprintf_internal_r+0x360>
 4082148:	b00f883a 	mov	r7,r22
 408214c:	01800804 	movi	r6,32
 4082150:	880b883a 	mov	r5,r17
 4082154:	a009883a 	mov	r4,r20
 4082158:	da401015 	stw	r9,64(sp)
 408215c:	4081da00 	call	4081da0 <print_repeat>
 4082160:	da401017 	ldw	r9,64(sp)
 4082164:	1000351e 	bne	r2,zero,408223c <___vfprintf_internal_r+0x430>
 4082168:	85a1883a 	add	r16,r16,r22
 408216c:	483ff226 	beq	r9,zero,4082138 <__alt_data_end+0xfffc3938>
 4082170:	00800b44 	movi	r2,45
 4082174:	d8800805 	stb	r2,32(sp)
 4082178:	88800117 	ldw	r2,4(r17)
 408217c:	01c00044 	movi	r7,1
 4082180:	d9800804 	addi	r6,sp,32
 4082184:	880b883a 	mov	r5,r17
 4082188:	a009883a 	mov	r4,r20
 408218c:	103ee83a 	callr	r2
 4082190:	10002a1e 	bne	r2,zero,408223c <___vfprintf_internal_r+0x430>
 4082194:	84000044 	addi	r16,r16,1
 4082198:	003fe706 	br	4082138 <__alt_data_end+0xfffc3938>
 408219c:	b5bfffc4 	addi	r22,r22,-1
 40821a0:	b0800003 	ldbu	r2,0(r22)
 40821a4:	01c00044 	movi	r7,1
 40821a8:	d9800804 	addi	r6,sp,32
 40821ac:	d8800805 	stb	r2,32(sp)
 40821b0:	88800117 	ldw	r2,4(r17)
 40821b4:	880b883a 	mov	r5,r17
 40821b8:	a009883a 	mov	r4,r20
 40821bc:	103ee83a 	callr	r2
 40821c0:	10001e1e 	bne	r2,zero,408223c <___vfprintf_internal_r+0x430>
 40821c4:	8585c83a 	sub	r2,r16,r22
 40821c8:	b5c9883a 	add	r4,r22,r23
 40821cc:	e085883a 	add	r2,fp,r2
 40821d0:	013ff216 	blt	zero,r4,408219c <__alt_data_end+0xfffc399c>
 40821d4:	1021883a 	mov	r16,r2
 40821d8:	dd800d17 	ldw	r22,52(sp)
 40821dc:	00004406 	br	40822f0 <___vfprintf_internal_r+0x4e4>
 40821e0:	00800044 	movi	r2,1
 40821e4:	1480080e 	bge	r2,r18,4082208 <___vfprintf_internal_r+0x3fc>
 40821e8:	95ffffc4 	addi	r23,r18,-1
 40821ec:	b80f883a 	mov	r7,r23
 40821f0:	01800804 	movi	r6,32
 40821f4:	880b883a 	mov	r5,r17
 40821f8:	a009883a 	mov	r4,r20
 40821fc:	4081da00 	call	4081da0 <print_repeat>
 4082200:	10000e1e 	bne	r2,zero,408223c <___vfprintf_internal_r+0x430>
 4082204:	85e1883a 	add	r16,r16,r23
 4082208:	b0800017 	ldw	r2,0(r22)
 408220c:	01c00044 	movi	r7,1
 4082210:	d80d883a 	mov	r6,sp
 4082214:	d8800005 	stb	r2,0(sp)
 4082218:	88800117 	ldw	r2,4(r17)
 408221c:	880b883a 	mov	r5,r17
 4082220:	a009883a 	mov	r4,r20
 4082224:	b5c00104 	addi	r23,r22,4
 4082228:	103ee83a 	callr	r2
 408222c:	1000031e 	bne	r2,zero,408223c <___vfprintf_internal_r+0x430>
 4082230:	84000044 	addi	r16,r16,1
 4082234:	b82d883a 	mov	r22,r23
 4082238:	00002d06 	br	40822f0 <___vfprintf_internal_r+0x4e4>
 408223c:	00bfffc4 	movi	r2,-1
 4082240:	00003106 	br	4082308 <___vfprintf_internal_r+0x4fc>
 4082244:	b5c00017 	ldw	r23,0(r22)
 4082248:	b7000104 	addi	fp,r22,4
 408224c:	b809883a 	mov	r4,r23
 4082250:	4081d840 	call	4081d84 <strlen>
 4082254:	9091c83a 	sub	r8,r18,r2
 4082258:	102d883a 	mov	r22,r2
 408225c:	0200090e 	bge	zero,r8,4082284 <___vfprintf_internal_r+0x478>
 4082260:	400f883a 	mov	r7,r8
 4082264:	01800804 	movi	r6,32
 4082268:	880b883a 	mov	r5,r17
 408226c:	a009883a 	mov	r4,r20
 4082270:	da001015 	stw	r8,64(sp)
 4082274:	4081da00 	call	4081da0 <print_repeat>
 4082278:	da001017 	ldw	r8,64(sp)
 408227c:	103fef1e 	bne	r2,zero,408223c <__alt_data_end+0xfffc3a3c>
 4082280:	8221883a 	add	r16,r16,r8
 4082284:	88800117 	ldw	r2,4(r17)
 4082288:	b00f883a 	mov	r7,r22
 408228c:	b80d883a 	mov	r6,r23
 4082290:	880b883a 	mov	r5,r17
 4082294:	a009883a 	mov	r4,r20
 4082298:	103ee83a 	callr	r2
 408229c:	103fe71e 	bne	r2,zero,408223c <__alt_data_end+0xfffc3a3c>
 40822a0:	85a1883a 	add	r16,r16,r22
 40822a4:	e02d883a 	mov	r22,fp
 40822a8:	00001106 	br	40822f0 <___vfprintf_internal_r+0x4e4>
 40822ac:	00c00044 	movi	r3,1
 40822b0:	04ffffc4 	movi	r19,-1
 40822b4:	d8000e15 	stw	zero,56(sp)
 40822b8:	d8c00a15 	stw	r3,40(sp)
 40822bc:	05400284 	movi	r21,10
 40822c0:	9825883a 	mov	r18,r19
 40822c4:	d8000c15 	stw	zero,48(sp)
 40822c8:	d8000b15 	stw	zero,44(sp)
 40822cc:	182f883a 	mov	r23,r3
 40822d0:	00000806 	br	40822f4 <___vfprintf_internal_r+0x4e8>
 40822d4:	ddc00b15 	stw	r23,44(sp)
 40822d8:	05c00084 	movi	r23,2
 40822dc:	00000506 	br	40822f4 <___vfprintf_internal_r+0x4e8>
 40822e0:	00c00044 	movi	r3,1
 40822e4:	d8c00c15 	stw	r3,48(sp)
 40822e8:	05c000c4 	movi	r23,3
 40822ec:	00000106 	br	40822f4 <___vfprintf_internal_r+0x4e8>
 40822f0:	002f883a 	mov	r23,zero
 40822f4:	d8c00f17 	ldw	r3,60(sp)
 40822f8:	18c00044 	addi	r3,r3,1
 40822fc:	d8c00f15 	stw	r3,60(sp)
 4082300:	003edc06 	br	4081e74 <__alt_data_end+0xfffc3674>
 4082304:	8005883a 	mov	r2,r16
 4082308:	dfc01a17 	ldw	ra,104(sp)
 408230c:	df001917 	ldw	fp,100(sp)
 4082310:	ddc01817 	ldw	r23,96(sp)
 4082314:	dd801717 	ldw	r22,92(sp)
 4082318:	dd401617 	ldw	r21,88(sp)
 408231c:	dd001517 	ldw	r20,84(sp)
 4082320:	dcc01417 	ldw	r19,80(sp)
 4082324:	dc801317 	ldw	r18,76(sp)
 4082328:	dc401217 	ldw	r17,72(sp)
 408232c:	dc001117 	ldw	r16,68(sp)
 4082330:	dec01b04 	addi	sp,sp,108
 4082334:	f800283a 	ret

04082338 <__vfprintf_internal>:
 4082338:	00810234 	movhi	r2,1032
 408233c:	108b4804 	addi	r2,r2,11552
 4082340:	300f883a 	mov	r7,r6
 4082344:	280d883a 	mov	r6,r5
 4082348:	200b883a 	mov	r5,r4
 408234c:	11000017 	ldw	r4,0(r2)
 4082350:	4081e0c1 	jmpi	4081e0c <___vfprintf_internal_r>

04082354 <__sfvwrite_small_dev>:
 4082354:	2880000b 	ldhu	r2,0(r5)
 4082358:	1080020c 	andi	r2,r2,8
 408235c:	10002126 	beq	r2,zero,40823e4 <__sfvwrite_small_dev+0x90>
 4082360:	2880008f 	ldh	r2,2(r5)
 4082364:	defffa04 	addi	sp,sp,-24
 4082368:	dc000015 	stw	r16,0(sp)
 408236c:	dfc00515 	stw	ra,20(sp)
 4082370:	dd000415 	stw	r20,16(sp)
 4082374:	dcc00315 	stw	r19,12(sp)
 4082378:	dc800215 	stw	r18,8(sp)
 408237c:	dc400115 	stw	r17,4(sp)
 4082380:	2821883a 	mov	r16,r5
 4082384:	10001216 	blt	r2,zero,40823d0 <__sfvwrite_small_dev+0x7c>
 4082388:	2027883a 	mov	r19,r4
 408238c:	3025883a 	mov	r18,r6
 4082390:	3823883a 	mov	r17,r7
 4082394:	05010004 	movi	r20,1024
 4082398:	04400b0e 	bge	zero,r17,40823c8 <__sfvwrite_small_dev+0x74>
 408239c:	880f883a 	mov	r7,r17
 40823a0:	a440010e 	bge	r20,r17,40823a8 <__sfvwrite_small_dev+0x54>
 40823a4:	01c10004 	movi	r7,1024
 40823a8:	8140008f 	ldh	r5,2(r16)
 40823ac:	900d883a 	mov	r6,r18
 40823b0:	9809883a 	mov	r4,r19
 40823b4:	408240c0 	call	408240c <_write_r>
 40823b8:	0080050e 	bge	zero,r2,40823d0 <__sfvwrite_small_dev+0x7c>
 40823bc:	88a3c83a 	sub	r17,r17,r2
 40823c0:	90a5883a 	add	r18,r18,r2
 40823c4:	003ff406 	br	4082398 <__alt_data_end+0xfffc3b98>
 40823c8:	0005883a 	mov	r2,zero
 40823cc:	00000706 	br	40823ec <__sfvwrite_small_dev+0x98>
 40823d0:	8080000b 	ldhu	r2,0(r16)
 40823d4:	10801014 	ori	r2,r2,64
 40823d8:	8080000d 	sth	r2,0(r16)
 40823dc:	00bfffc4 	movi	r2,-1
 40823e0:	00000206 	br	40823ec <__sfvwrite_small_dev+0x98>
 40823e4:	00bfffc4 	movi	r2,-1
 40823e8:	f800283a 	ret
 40823ec:	dfc00517 	ldw	ra,20(sp)
 40823f0:	dd000417 	ldw	r20,16(sp)
 40823f4:	dcc00317 	ldw	r19,12(sp)
 40823f8:	dc800217 	ldw	r18,8(sp)
 40823fc:	dc400117 	ldw	r17,4(sp)
 4082400:	dc000017 	ldw	r16,0(sp)
 4082404:	dec00604 	addi	sp,sp,24
 4082408:	f800283a 	ret

0408240c <_write_r>:
 408240c:	defffd04 	addi	sp,sp,-12
 4082410:	dc000015 	stw	r16,0(sp)
 4082414:	04010234 	movhi	r16,1032
 4082418:	dc400115 	stw	r17,4(sp)
 408241c:	840bbf04 	addi	r16,r16,12028
 4082420:	2023883a 	mov	r17,r4
 4082424:	2809883a 	mov	r4,r5
 4082428:	300b883a 	mov	r5,r6
 408242c:	380d883a 	mov	r6,r7
 4082430:	dfc00215 	stw	ra,8(sp)
 4082434:	80000015 	stw	zero,0(r16)
 4082438:	40828500 	call	4082850 <write>
 408243c:	00ffffc4 	movi	r3,-1
 4082440:	10c0031e 	bne	r2,r3,4082450 <_write_r+0x44>
 4082444:	80c00017 	ldw	r3,0(r16)
 4082448:	18000126 	beq	r3,zero,4082450 <_write_r+0x44>
 408244c:	88c00015 	stw	r3,0(r17)
 4082450:	dfc00217 	ldw	ra,8(sp)
 4082454:	dc400117 	ldw	r17,4(sp)
 4082458:	dc000017 	ldw	r16,0(sp)
 408245c:	dec00304 	addi	sp,sp,12
 4082460:	f800283a 	ret

04082464 <__divsi3>:
 4082464:	20001b16 	blt	r4,zero,40824d4 <__divsi3+0x70>
 4082468:	000f883a 	mov	r7,zero
 408246c:	28001616 	blt	r5,zero,40824c8 <__divsi3+0x64>
 4082470:	200d883a 	mov	r6,r4
 4082474:	29001a2e 	bgeu	r5,r4,40824e0 <__divsi3+0x7c>
 4082478:	00800804 	movi	r2,32
 408247c:	00c00044 	movi	r3,1
 4082480:	00000106 	br	4082488 <__divsi3+0x24>
 4082484:	10000d26 	beq	r2,zero,40824bc <__divsi3+0x58>
 4082488:	294b883a 	add	r5,r5,r5
 408248c:	10bfffc4 	addi	r2,r2,-1
 4082490:	18c7883a 	add	r3,r3,r3
 4082494:	293ffb36 	bltu	r5,r4,4082484 <__alt_data_end+0xfffc3c84>
 4082498:	0005883a 	mov	r2,zero
 408249c:	18000726 	beq	r3,zero,40824bc <__divsi3+0x58>
 40824a0:	0005883a 	mov	r2,zero
 40824a4:	31400236 	bltu	r6,r5,40824b0 <__divsi3+0x4c>
 40824a8:	314dc83a 	sub	r6,r6,r5
 40824ac:	10c4b03a 	or	r2,r2,r3
 40824b0:	1806d07a 	srli	r3,r3,1
 40824b4:	280ad07a 	srli	r5,r5,1
 40824b8:	183ffa1e 	bne	r3,zero,40824a4 <__alt_data_end+0xfffc3ca4>
 40824bc:	38000126 	beq	r7,zero,40824c4 <__divsi3+0x60>
 40824c0:	0085c83a 	sub	r2,zero,r2
 40824c4:	f800283a 	ret
 40824c8:	014bc83a 	sub	r5,zero,r5
 40824cc:	39c0005c 	xori	r7,r7,1
 40824d0:	003fe706 	br	4082470 <__alt_data_end+0xfffc3c70>
 40824d4:	0109c83a 	sub	r4,zero,r4
 40824d8:	01c00044 	movi	r7,1
 40824dc:	003fe306 	br	408246c <__alt_data_end+0xfffc3c6c>
 40824e0:	00c00044 	movi	r3,1
 40824e4:	003fee06 	br	40824a0 <__alt_data_end+0xfffc3ca0>

040824e8 <__modsi3>:
 40824e8:	20001716 	blt	r4,zero,4082548 <__modsi3+0x60>
 40824ec:	000f883a 	mov	r7,zero
 40824f0:	2005883a 	mov	r2,r4
 40824f4:	28001216 	blt	r5,zero,4082540 <__modsi3+0x58>
 40824f8:	2900162e 	bgeu	r5,r4,4082554 <__modsi3+0x6c>
 40824fc:	01800804 	movi	r6,32
 4082500:	00c00044 	movi	r3,1
 4082504:	00000106 	br	408250c <__modsi3+0x24>
 4082508:	30000a26 	beq	r6,zero,4082534 <__modsi3+0x4c>
 408250c:	294b883a 	add	r5,r5,r5
 4082510:	31bfffc4 	addi	r6,r6,-1
 4082514:	18c7883a 	add	r3,r3,r3
 4082518:	293ffb36 	bltu	r5,r4,4082508 <__alt_data_end+0xfffc3d08>
 408251c:	18000526 	beq	r3,zero,4082534 <__modsi3+0x4c>
 4082520:	1806d07a 	srli	r3,r3,1
 4082524:	11400136 	bltu	r2,r5,408252c <__modsi3+0x44>
 4082528:	1145c83a 	sub	r2,r2,r5
 408252c:	280ad07a 	srli	r5,r5,1
 4082530:	183ffb1e 	bne	r3,zero,4082520 <__alt_data_end+0xfffc3d20>
 4082534:	38000126 	beq	r7,zero,408253c <__modsi3+0x54>
 4082538:	0085c83a 	sub	r2,zero,r2
 408253c:	f800283a 	ret
 4082540:	014bc83a 	sub	r5,zero,r5
 4082544:	003fec06 	br	40824f8 <__alt_data_end+0xfffc3cf8>
 4082548:	0109c83a 	sub	r4,zero,r4
 408254c:	01c00044 	movi	r7,1
 4082550:	003fe706 	br	40824f0 <__alt_data_end+0xfffc3cf0>
 4082554:	00c00044 	movi	r3,1
 4082558:	003ff106 	br	4082520 <__alt_data_end+0xfffc3d20>

0408255c <__udivsi3>:
 408255c:	200d883a 	mov	r6,r4
 4082560:	2900152e 	bgeu	r5,r4,40825b8 <__udivsi3+0x5c>
 4082564:	28001416 	blt	r5,zero,40825b8 <__udivsi3+0x5c>
 4082568:	00800804 	movi	r2,32
 408256c:	00c00044 	movi	r3,1
 4082570:	00000206 	br	408257c <__udivsi3+0x20>
 4082574:	10000e26 	beq	r2,zero,40825b0 <__udivsi3+0x54>
 4082578:	28000516 	blt	r5,zero,4082590 <__udivsi3+0x34>
 408257c:	294b883a 	add	r5,r5,r5
 4082580:	10bfffc4 	addi	r2,r2,-1
 4082584:	18c7883a 	add	r3,r3,r3
 4082588:	293ffa36 	bltu	r5,r4,4082574 <__alt_data_end+0xfffc3d74>
 408258c:	18000826 	beq	r3,zero,40825b0 <__udivsi3+0x54>
 4082590:	0005883a 	mov	r2,zero
 4082594:	31400236 	bltu	r6,r5,40825a0 <__udivsi3+0x44>
 4082598:	314dc83a 	sub	r6,r6,r5
 408259c:	10c4b03a 	or	r2,r2,r3
 40825a0:	1806d07a 	srli	r3,r3,1
 40825a4:	280ad07a 	srli	r5,r5,1
 40825a8:	183ffa1e 	bne	r3,zero,4082594 <__alt_data_end+0xfffc3d94>
 40825ac:	f800283a 	ret
 40825b0:	0005883a 	mov	r2,zero
 40825b4:	f800283a 	ret
 40825b8:	00c00044 	movi	r3,1
 40825bc:	003ff406 	br	4082590 <__alt_data_end+0xfffc3d90>

040825c0 <__umodsi3>:
 40825c0:	2005883a 	mov	r2,r4
 40825c4:	2900122e 	bgeu	r5,r4,4082610 <__umodsi3+0x50>
 40825c8:	28001116 	blt	r5,zero,4082610 <__umodsi3+0x50>
 40825cc:	01800804 	movi	r6,32
 40825d0:	00c00044 	movi	r3,1
 40825d4:	00000206 	br	40825e0 <__umodsi3+0x20>
 40825d8:	30000c26 	beq	r6,zero,408260c <__umodsi3+0x4c>
 40825dc:	28000516 	blt	r5,zero,40825f4 <__umodsi3+0x34>
 40825e0:	294b883a 	add	r5,r5,r5
 40825e4:	31bfffc4 	addi	r6,r6,-1
 40825e8:	18c7883a 	add	r3,r3,r3
 40825ec:	293ffa36 	bltu	r5,r4,40825d8 <__alt_data_end+0xfffc3dd8>
 40825f0:	18000626 	beq	r3,zero,408260c <__umodsi3+0x4c>
 40825f4:	1806d07a 	srli	r3,r3,1
 40825f8:	11400136 	bltu	r2,r5,4082600 <__umodsi3+0x40>
 40825fc:	1145c83a 	sub	r2,r2,r5
 4082600:	280ad07a 	srli	r5,r5,1
 4082604:	183ffb1e 	bne	r3,zero,40825f4 <__alt_data_end+0xfffc3df4>
 4082608:	f800283a 	ret
 408260c:	f800283a 	ret
 4082610:	00c00044 	movi	r3,1
 4082614:	003ff706 	br	40825f4 <__alt_data_end+0xfffc3df4>

04082618 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4082618:	40826a41 	jmpi	40826a4 <alt_iic_isr_register>

0408261c <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 408261c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4082620:	00bfff84 	movi	r2,-2
 4082624:	2084703a 	and	r2,r4,r2
 4082628:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 408262c:	00c00044 	movi	r3,1
 4082630:	d0a08d17 	ldw	r2,-32204(gp)
 4082634:	194a983a 	sll	r5,r3,r5
 4082638:	288ab03a 	or	r5,r5,r2
 408263c:	d1608d15 	stw	r5,-32204(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4082640:	d0a08d17 	ldw	r2,-32204(gp)
 4082644:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4082648:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 408264c:	0005883a 	mov	r2,zero
 4082650:	f800283a 	ret

04082654 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4082654:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4082658:	00bfff84 	movi	r2,-2
 408265c:	2084703a 	and	r2,r4,r2
 4082660:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
 4082664:	00ffff84 	movi	r3,-2
 4082668:	d0a08d17 	ldw	r2,-32204(gp)
 408266c:	194a183a 	rol	r5,r3,r5
 4082670:	288a703a 	and	r5,r5,r2
 4082674:	d1608d15 	stw	r5,-32204(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4082678:	d0a08d17 	ldw	r2,-32204(gp)
 408267c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4082680:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 4082684:	0005883a 	mov	r2,zero
 4082688:	f800283a 	ret

0408268c <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 408268c:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4082690:	00800044 	movi	r2,1
 4082694:	1144983a 	sll	r2,r2,r5
 4082698:	10c4703a 	and	r2,r2,r3
}
 408269c:	1004c03a 	cmpne	r2,r2,zero
 40826a0:	f800283a 	ret

040826a4 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40826a4:	00c007c4 	movi	r3,31
 40826a8:	19401616 	blt	r3,r5,4082704 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40826ac:	defffe04 	addi	sp,sp,-8
 40826b0:	dfc00115 	stw	ra,4(sp)
 40826b4:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40826b8:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40826bc:	00ffff84 	movi	r3,-2
 40826c0:	80c6703a 	and	r3,r16,r3
 40826c4:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 40826c8:	280490fa 	slli	r2,r5,3
 40826cc:	00c10234 	movhi	r3,1032
 40826d0:	18cbe504 	addi	r3,r3,12180
 40826d4:	1885883a 	add	r2,r3,r2
 40826d8:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
 40826dc:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 40826e0:	30000226 	beq	r6,zero,40826ec <alt_iic_isr_register+0x48>
 40826e4:	408261c0 	call	408261c <alt_ic_irq_enable>
 40826e8:	00000106 	br	40826f0 <alt_iic_isr_register+0x4c>
 40826ec:	40826540 	call	4082654 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40826f0:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 40826f4:	dfc00117 	ldw	ra,4(sp)
 40826f8:	dc000017 	ldw	r16,0(sp)
 40826fc:	dec00204 	addi	sp,sp,8
 4082700:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
 4082704:	00bffa84 	movi	r2,-22
 4082708:	f800283a 	ret

0408270c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 408270c:	deffff04 	addi	sp,sp,-4
 4082710:	01010234 	movhi	r4,1032
 4082714:	01410234 	movhi	r5,1032
 4082718:	dfc00015 	stw	ra,0(sp)
 408271c:	210afb04 	addi	r4,r4,11244
 4082720:	294b4c04 	addi	r5,r5,11568

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4082724:	2140061e 	bne	r4,r5,4082740 <alt_load+0x34>
 4082728:	01010234 	movhi	r4,1032
 408272c:	01410234 	movhi	r5,1032
 4082730:	21000804 	addi	r4,r4,32
 4082734:	29400804 	addi	r5,r5,32
 4082738:	2140121e 	bne	r4,r5,4082784 <alt_load+0x78>
 408273c:	00000b06 	br	408276c <alt_load+0x60>
 4082740:	00c10234 	movhi	r3,1032
 4082744:	18cb4c04 	addi	r3,r3,11568
 4082748:	1907c83a 	sub	r3,r3,r4
 408274c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 4082750:	10fff526 	beq	r2,r3,4082728 <__alt_data_end+0xfffc3f28>
    {
      *to++ = *from++;
 4082754:	114f883a 	add	r7,r2,r5
 4082758:	39c00017 	ldw	r7,0(r7)
 408275c:	110d883a 	add	r6,r2,r4
 4082760:	10800104 	addi	r2,r2,4
 4082764:	31c00015 	stw	r7,0(r6)
 4082768:	003ff906 	br	4082750 <__alt_data_end+0xfffc3f50>
 408276c:	01010234 	movhi	r4,1032
 4082770:	01410234 	movhi	r5,1032
 4082774:	210a6304 	addi	r4,r4,10636
 4082778:	294a6304 	addi	r5,r5,10636

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 408277c:	2140101e 	bne	r4,r5,40827c0 <alt_load+0xb4>
 4082780:	00000b06 	br	40827b0 <alt_load+0xa4>
 4082784:	00c10234 	movhi	r3,1032
 4082788:	18c06004 	addi	r3,r3,384
 408278c:	1907c83a 	sub	r3,r3,r4
 4082790:	0005883a 	mov	r2,zero
  {
    while( to != end )
 4082794:	10fff526 	beq	r2,r3,408276c <__alt_data_end+0xfffc3f6c>
    {
      *to++ = *from++;
 4082798:	114f883a 	add	r7,r2,r5
 408279c:	39c00017 	ldw	r7,0(r7)
 40827a0:	110d883a 	add	r6,r2,r4
 40827a4:	10800104 	addi	r2,r2,4
 40827a8:	31c00015 	stw	r7,0(r6)
 40827ac:	003ff906 	br	4082794 <__alt_data_end+0xfffc3f94>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 40827b0:	40829080 	call	4082908 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 40827b4:	dfc00017 	ldw	ra,0(sp)
 40827b8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 40827bc:	408290c1 	jmpi	408290c <alt_icache_flush_all>
 40827c0:	00c10234 	movhi	r3,1032
 40827c4:	18cafb04 	addi	r3,r3,11244
 40827c8:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 40827cc:	0005883a 	mov	r2,zero
  {
    while( to != end )
 40827d0:	18bff726 	beq	r3,r2,40827b0 <__alt_data_end+0xfffc3fb0>
    {
      *to++ = *from++;
 40827d4:	114f883a 	add	r7,r2,r5
 40827d8:	39c00017 	ldw	r7,0(r7)
 40827dc:	110d883a 	add	r6,r2,r4
 40827e0:	10800104 	addi	r2,r2,4
 40827e4:	31c00015 	stw	r7,0(r6)
 40827e8:	003ff906 	br	40827d0 <__alt_data_end+0xfffc3fd0>

040827ec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 40827ec:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 40827f0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 40827f4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 40827f8:	40828b00 	call	40828b0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 40827fc:	40828d00 	call	40828d0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 4082800:	d1a08e17 	ldw	r6,-32200(gp)
 4082804:	d1608f17 	ldw	r5,-32196(gp)
 4082808:	d1209017 	ldw	r4,-32192(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 408280c:	dfc00017 	ldw	ra,0(sp)
 4082810:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 4082814:	4080db81 	jmpi	4080db8 <main>

04082818 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 4082818:	defffe04 	addi	sp,sp,-8
 408281c:	dc000015 	stw	r16,0(sp)
 4082820:	dfc00115 	stw	ra,4(sp)
 4082824:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 4082828:	4081d840 	call	4081d84 <strlen>
 408282c:	01010234 	movhi	r4,1032
 4082830:	000f883a 	mov	r7,zero
 4082834:	100d883a 	mov	r6,r2
 4082838:	800b883a 	mov	r5,r16
 408283c:	210b4a04 	addi	r4,r4,11560
#else
    return fputs(str, stdout);
#endif
#endif
}
 4082840:	dfc00117 	ldw	ra,4(sp)
 4082844:	dc000017 	ldw	r16,0(sp)
 4082848:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 408284c:	40828d41 	jmpi	40828d4 <altera_avalon_jtag_uart_write>

04082850 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 4082850:	00800044 	movi	r2,1
 4082854:	20800226 	beq	r4,r2,4082860 <write+0x10>
 4082858:	00800084 	movi	r2,2
 408285c:	2080041e 	bne	r4,r2,4082870 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 4082860:	01010234 	movhi	r4,1032
 4082864:	000f883a 	mov	r7,zero
 4082868:	210b4a04 	addi	r4,r4,11560
 408286c:	40828d41 	jmpi	40828d4 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 4082870:	d0a01817 	ldw	r2,-32672(gp)
 4082874:	10000926 	beq	r2,zero,408289c <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4082878:	deffff04 	addi	sp,sp,-4
 408287c:	dfc00015 	stw	ra,0(sp)
 4082880:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 4082884:	00c01444 	movi	r3,81
 4082888:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 408288c:	00bfffc4 	movi	r2,-1
 4082890:	dfc00017 	ldw	ra,0(sp)
 4082894:	dec00104 	addi	sp,sp,4
 4082898:	f800283a 	ret
 408289c:	d0a08c04 	addi	r2,gp,-32208
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 40828a0:	00c01444 	movi	r3,81
 40828a4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 40828a8:	00bfffc4 	movi	r2,-1
 40828ac:	f800283a 	ret

040828b0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 40828b0:	deffff04 	addi	sp,sp,-4
 40828b4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 40828b8:	40829840 	call	4082984 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 40828bc:	00800044 	movi	r2,1
 40828c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 40828c4:	dfc00017 	ldw	ra,0(sp)
 40828c8:	dec00104 	addi	sp,sp,4
 40828cc:	f800283a 	ret

040828d0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 40828d0:	f800283a 	ret

040828d4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 40828d4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 40828d8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 40828dc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 40828e0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 40828e4:	2980072e 	bgeu	r5,r6,4082904 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 40828e8:	38c00037 	ldwio	r3,0(r7)
 40828ec:	18ffffec 	andhi	r3,r3,65535
 40828f0:	183ffc26 	beq	r3,zero,40828e4 <__alt_data_end+0xfffc40e4>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 40828f4:	28c00007 	ldb	r3,0(r5)
 40828f8:	20c00035 	stwio	r3,0(r4)
 40828fc:	29400044 	addi	r5,r5,1
 4082900:	003ff806 	br	40828e4 <__alt_data_end+0xfffc40e4>

  return count;
}
 4082904:	f800283a 	ret

04082908 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4082908:	f800283a 	ret

0408290c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 408290c:	f800283a 	ret

04082910 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
 4082910:	213ffe84 	addi	r4,r4,-6
 4082914:	008003c4 	movi	r2,15
 4082918:	11001636 	bltu	r2,r4,4082974 <alt_exception_cause_generated_bad_addr+0x64>
 408291c:	200890ba 	slli	r4,r4,2
 4082920:	00810234 	movhi	r2,1032
 4082924:	108a4d04 	addi	r2,r2,10548
 4082928:	2089883a 	add	r4,r4,r2
 408292c:	20800017 	ldw	r2,0(r4)
 4082930:	1000683a 	jmp	r2
 4082934:	0408297c 	xorhi	r16,zero,8357
 4082938:	0408297c 	xorhi	r16,zero,8357
 408293c:	04082974 	movhi	r16,8357
 4082940:	04082974 	movhi	r16,8357
 4082944:	04082974 	movhi	r16,8357
 4082948:	0408297c 	xorhi	r16,zero,8357
 408294c:	04082974 	movhi	r16,8357
 4082950:	04082974 	movhi	r16,8357
 4082954:	0408297c 	xorhi	r16,zero,8357
 4082958:	0408297c 	xorhi	r16,zero,8357
 408295c:	04082974 	movhi	r16,8357
 4082960:	0408297c 	xorhi	r16,zero,8357
 4082964:	04082974 	movhi	r16,8357
 4082968:	04082974 	movhi	r16,8357
 408296c:	04082974 	movhi	r16,8357
 4082970:	0408297c 	xorhi	r16,zero,8357
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4082974:	0005883a 	mov	r2,zero
 4082978:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 408297c:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
 4082980:	f800283a 	ret

04082984 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 4082984:	000170fa 	wrctl	ienable,zero
 4082988:	f800283a 	ret
